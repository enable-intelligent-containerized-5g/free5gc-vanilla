# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.snssai import Snssai
from openapi_server import util

from openapi_server.models.snssai import Snssai  # noqa: E501

class MmTransactionSliceReportItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, snssai=None, timestamp=None, transactions=None):  # noqa: E501
        """MmTransactionSliceReportItem - a model defined in OpenAPI

        :param snssai: The snssai of this MmTransactionSliceReportItem.  # noqa: E501
        :type snssai: Snssai
        :param timestamp: The timestamp of this MmTransactionSliceReportItem.  # noqa: E501
        :type timestamp: datetime
        :param transactions: The transactions of this MmTransactionSliceReportItem.  # noqa: E501
        :type transactions: int
        """
        self.openapi_types = {
            'snssai': Snssai,
            'timestamp': datetime,
            'transactions': int
        }

        self.attribute_map = {
            'snssai': 'snssai',
            'timestamp': 'timestamp',
            'transactions': 'transactions'
        }

        self.snssai = snssai
        self.timestamp = timestamp
        self.transactions = transactions

    @classmethod
    def from_dict(cls, dikt) -> 'MmTransactionSliceReportItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MmTransactionSliceReportItem of this MmTransactionSliceReportItem.  # noqa: E501
        :rtype: MmTransactionSliceReportItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def snssai(self):
        """Gets the snssai of this MmTransactionSliceReportItem.


        :return: The snssai of this MmTransactionSliceReportItem.
        :rtype: Snssai
        """
        return self._snssai

    @snssai.setter
    def snssai(self, snssai):
        """Sets the snssai of this MmTransactionSliceReportItem.


        :param snssai: The snssai of this MmTransactionSliceReportItem.
        :type snssai: Snssai
        """

        self._snssai = snssai

    @property
    def timestamp(self):
        """Gets the timestamp of this MmTransactionSliceReportItem.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The timestamp of this MmTransactionSliceReportItem.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MmTransactionSliceReportItem.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param timestamp: The timestamp of this MmTransactionSliceReportItem.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def transactions(self):
        """Gets the transactions of this MmTransactionSliceReportItem.


        :return: The transactions of this MmTransactionSliceReportItem.
        :rtype: int
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this MmTransactionSliceReportItem.


        :param transactions: The transactions of this MmTransactionSliceReportItem.
        :type transactions: int
        """
        if transactions is None:
            raise ValueError("Invalid value for `transactions`, must not be `None`")  # noqa: E501

        self._transactions = transactions
