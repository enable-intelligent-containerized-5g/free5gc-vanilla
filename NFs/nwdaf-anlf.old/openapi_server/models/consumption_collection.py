# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ConsumptionCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumps=None):  # noqa: E501
        """ConsumptionCollection - a model defined in OpenAPI

        :param consumps: The consumps of this ConsumptionCollection.  # noqa: E501
        :type consumps: List[str]
        """
        self.openapi_types = {
            'consumps': List[str]
        }

        self.attribute_map = {
            'consumps': 'consumps'
        }

        self.consumps = consumps

    @classmethod
    def from_dict(cls, dikt) -> 'ConsumptionCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConsumptionCollection of this ConsumptionCollection.  # noqa: E501
        :rtype: ConsumptionCollection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumps(self):
        """Gets the consumps of this ConsumptionCollection.


        :return: The consumps of this ConsumptionCollection.
        :rtype: List[str]
        """
        return self._consumps

    @consumps.setter
    def consumps(self, consumps):
        """Sets the consumps of this ConsumptionCollection.


        :param consumps: The consumps of this ConsumptionCollection.
        :type consumps: List[str]
        """
        if consumps is None:
            raise ValueError("Invalid value for `consumps`, must not be `None`")  # noqa: E501
        if consumps is not None and len(consumps) < 1:
            raise ValueError("Invalid value for `consumps`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._consumps = consumps
