# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.plmn_id import PlmnId
from openapi_server.models.tac_range import TacRange
import re
from openapi_server import util

from openapi_server.models.plmn_id import PlmnId  # noqa: E501
from openapi_server.models.tac_range import TacRange  # noqa: E501
import re  # noqa: E501

class TaiRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, plmn_id=None, tac_range_list=None, nid=None):  # noqa: E501
        """TaiRange - a model defined in OpenAPI

        :param plmn_id: The plmn_id of this TaiRange.  # noqa: E501
        :type plmn_id: PlmnId
        :param tac_range_list: The tac_range_list of this TaiRange.  # noqa: E501
        :type tac_range_list: List[TacRange]
        :param nid: The nid of this TaiRange.  # noqa: E501
        :type nid: str
        """
        self.openapi_types = {
            'plmn_id': PlmnId,
            'tac_range_list': List[TacRange],
            'nid': str
        }

        self.attribute_map = {
            'plmn_id': 'plmnId',
            'tac_range_list': 'tacRangeList',
            'nid': 'nid'
        }

        self.plmn_id = plmn_id
        self.tac_range_list = tac_range_list
        self.nid = nid

    @classmethod
    def from_dict(cls, dikt) -> 'TaiRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaiRange of this TaiRange.  # noqa: E501
        :rtype: TaiRange
        """
        return util.deserialize_model(dikt, cls)

    @property
    def plmn_id(self):
        """Gets the plmn_id of this TaiRange.


        :return: The plmn_id of this TaiRange.
        :rtype: PlmnId
        """
        return self._plmn_id

    @plmn_id.setter
    def plmn_id(self, plmn_id):
        """Sets the plmn_id of this TaiRange.


        :param plmn_id: The plmn_id of this TaiRange.
        :type plmn_id: PlmnId
        """
        if plmn_id is None:
            raise ValueError("Invalid value for `plmn_id`, must not be `None`")  # noqa: E501

        self._plmn_id = plmn_id

    @property
    def tac_range_list(self):
        """Gets the tac_range_list of this TaiRange.


        :return: The tac_range_list of this TaiRange.
        :rtype: List[TacRange]
        """
        return self._tac_range_list

    @tac_range_list.setter
    def tac_range_list(self, tac_range_list):
        """Sets the tac_range_list of this TaiRange.


        :param tac_range_list: The tac_range_list of this TaiRange.
        :type tac_range_list: List[TacRange]
        """
        if tac_range_list is None:
            raise ValueError("Invalid value for `tac_range_list`, must not be `None`")  # noqa: E501
        if tac_range_list is not None and len(tac_range_list) < 1:
            raise ValueError("Invalid value for `tac_range_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tac_range_list = tac_range_list

    @property
    def nid(self):
        """Gets the nid of this TaiRange.

        This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1).    # noqa: E501

        :return: The nid of this TaiRange.
        :rtype: str
        """
        return self._nid

    @nid.setter
    def nid(self, nid):
        """Sets the nid of this TaiRange.

        This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1).    # noqa: E501

        :param nid: The nid of this TaiRange.
        :type nid: str
        """
        if nid is not None and not re.search(r'^[A-Fa-f0-9]{11}$', nid):  # noqa: E501
            raise ValueError("Invalid value for `nid`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{11}$/`")  # noqa: E501

        self._nid = nid
