# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.addr_fqdn import AddrFqdn
from openapi_server.models.network_area_info import NetworkAreaInfo
from openapi_server.models.perf_data import PerfData
from openapi_server.models.time_window import TimeWindow
from openapi_server.models.upf_information import UpfInformation
from openapi_server import util

from openapi_server.models.addr_fqdn import AddrFqdn  # noqa: E501
from openapi_server.models.network_area_info import NetworkAreaInfo  # noqa: E501
from openapi_server.models.perf_data import PerfData  # noqa: E501
from openapi_server.models.time_window import TimeWindow  # noqa: E501
from openapi_server.models.upf_information import UpfInformation  # noqa: E501

class DnPerf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_server_ins_addr=None, upf_info=None, dnai=None, perf_data=None, spatial_valid_con=None, temporal_valid_con=None):  # noqa: E501
        """DnPerf - a model defined in OpenAPI

        :param app_server_ins_addr: The app_server_ins_addr of this DnPerf.  # noqa: E501
        :type app_server_ins_addr: AddrFqdn
        :param upf_info: The upf_info of this DnPerf.  # noqa: E501
        :type upf_info: UpfInformation
        :param dnai: The dnai of this DnPerf.  # noqa: E501
        :type dnai: str
        :param perf_data: The perf_data of this DnPerf.  # noqa: E501
        :type perf_data: PerfData
        :param spatial_valid_con: The spatial_valid_con of this DnPerf.  # noqa: E501
        :type spatial_valid_con: NetworkAreaInfo
        :param temporal_valid_con: The temporal_valid_con of this DnPerf.  # noqa: E501
        :type temporal_valid_con: TimeWindow
        """
        self.openapi_types = {
            'app_server_ins_addr': AddrFqdn,
            'upf_info': UpfInformation,
            'dnai': str,
            'perf_data': PerfData,
            'spatial_valid_con': NetworkAreaInfo,
            'temporal_valid_con': TimeWindow
        }

        self.attribute_map = {
            'app_server_ins_addr': 'appServerInsAddr',
            'upf_info': 'upfInfo',
            'dnai': 'dnai',
            'perf_data': 'perfData',
            'spatial_valid_con': 'spatialValidCon',
            'temporal_valid_con': 'temporalValidCon'
        }

        self.app_server_ins_addr = app_server_ins_addr
        self.upf_info = upf_info
        self.dnai = dnai
        self.perf_data = perf_data
        self.spatial_valid_con = spatial_valid_con
        self.temporal_valid_con = temporal_valid_con

    @classmethod
    def from_dict(cls, dikt) -> 'DnPerf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DnPerf of this DnPerf.  # noqa: E501
        :rtype: DnPerf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_server_ins_addr(self):
        """Gets the app_server_ins_addr of this DnPerf.


        :return: The app_server_ins_addr of this DnPerf.
        :rtype: AddrFqdn
        """
        return self._app_server_ins_addr

    @app_server_ins_addr.setter
    def app_server_ins_addr(self, app_server_ins_addr):
        """Sets the app_server_ins_addr of this DnPerf.


        :param app_server_ins_addr: The app_server_ins_addr of this DnPerf.
        :type app_server_ins_addr: AddrFqdn
        """

        self._app_server_ins_addr = app_server_ins_addr

    @property
    def upf_info(self):
        """Gets the upf_info of this DnPerf.


        :return: The upf_info of this DnPerf.
        :rtype: UpfInformation
        """
        return self._upf_info

    @upf_info.setter
    def upf_info(self, upf_info):
        """Sets the upf_info of this DnPerf.


        :param upf_info: The upf_info of this DnPerf.
        :type upf_info: UpfInformation
        """

        self._upf_info = upf_info

    @property
    def dnai(self):
        """Gets the dnai of this DnPerf.

        DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.  # noqa: E501

        :return: The dnai of this DnPerf.
        :rtype: str
        """
        return self._dnai

    @dnai.setter
    def dnai(self, dnai):
        """Sets the dnai of this DnPerf.

        DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.  # noqa: E501

        :param dnai: The dnai of this DnPerf.
        :type dnai: str
        """

        self._dnai = dnai

    @property
    def perf_data(self):
        """Gets the perf_data of this DnPerf.


        :return: The perf_data of this DnPerf.
        :rtype: PerfData
        """
        return self._perf_data

    @perf_data.setter
    def perf_data(self, perf_data):
        """Sets the perf_data of this DnPerf.


        :param perf_data: The perf_data of this DnPerf.
        :type perf_data: PerfData
        """
        if perf_data is None:
            raise ValueError("Invalid value for `perf_data`, must not be `None`")  # noqa: E501

        self._perf_data = perf_data

    @property
    def spatial_valid_con(self):
        """Gets the spatial_valid_con of this DnPerf.


        :return: The spatial_valid_con of this DnPerf.
        :rtype: NetworkAreaInfo
        """
        return self._spatial_valid_con

    @spatial_valid_con.setter
    def spatial_valid_con(self, spatial_valid_con):
        """Sets the spatial_valid_con of this DnPerf.


        :param spatial_valid_con: The spatial_valid_con of this DnPerf.
        :type spatial_valid_con: NetworkAreaInfo
        """

        self._spatial_valid_con = spatial_valid_con

    @property
    def temporal_valid_con(self):
        """Gets the temporal_valid_con of this DnPerf.


        :return: The temporal_valid_con of this DnPerf.
        :rtype: TimeWindow
        """
        return self._temporal_valid_con

    @temporal_valid_con.setter
    def temporal_valid_con(self, temporal_valid_con):
        """Sets the temporal_valid_con of this DnPerf.


        :param temporal_valid_con: The temporal_valid_con of this DnPerf.
        :type temporal_valid_con: TimeWindow
        """

        self._temporal_valid_con = temporal_valid_con
