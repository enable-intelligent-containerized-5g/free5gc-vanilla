# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ml_model_info import MLModelInfo
from openapi_server.models.nwdaf_event import NwdafEvent
from openapi_server import util

from openapi_server.models.ml_model_info import MLModelInfo  # noqa: E501
from openapi_server.models.nwdaf_event import NwdafEvent  # noqa: E501

class ModelInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analytics_id=None, ml_model_infos=None):  # noqa: E501
        """ModelInfo - a model defined in OpenAPI

        :param analytics_id: The analytics_id of this ModelInfo.  # noqa: E501
        :type analytics_id: NwdafEvent
        :param ml_model_infos: The ml_model_infos of this ModelInfo.  # noqa: E501
        :type ml_model_infos: List[MLModelInfo]
        """
        self.openapi_types = {
            'analytics_id': NwdafEvent,
            'ml_model_infos': List[MLModelInfo]
        }

        self.attribute_map = {
            'analytics_id': 'analyticsId',
            'ml_model_infos': 'mlModelInfos'
        }

        self.analytics_id = analytics_id
        self.ml_model_infos = ml_model_infos

    @classmethod
    def from_dict(cls, dikt) -> 'ModelInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ModelInfo of this ModelInfo.  # noqa: E501
        :rtype: ModelInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analytics_id(self):
        """Gets the analytics_id of this ModelInfo.


        :return: The analytics_id of this ModelInfo.
        :rtype: NwdafEvent
        """
        return self._analytics_id

    @analytics_id.setter
    def analytics_id(self, analytics_id):
        """Sets the analytics_id of this ModelInfo.


        :param analytics_id: The analytics_id of this ModelInfo.
        :type analytics_id: NwdafEvent
        """
        if analytics_id is None:
            raise ValueError("Invalid value for `analytics_id`, must not be `None`")  # noqa: E501

        self._analytics_id = analytics_id

    @property
    def ml_model_infos(self):
        """Gets the ml_model_infos of this ModelInfo.


        :return: The ml_model_infos of this ModelInfo.
        :rtype: List[MLModelInfo]
        """
        return self._ml_model_infos

    @ml_model_infos.setter
    def ml_model_infos(self, ml_model_infos):
        """Sets the ml_model_infos of this ModelInfo.


        :param ml_model_infos: The ml_model_infos of this ModelInfo.
        :type ml_model_infos: List[MLModelInfo]
        """
        if ml_model_infos is None:
            raise ValueError("Invalid value for `ml_model_infos`, must not be `None`")  # noqa: E501
        if ml_model_infos is not None and len(ml_model_infos) < 1:
            raise ValueError("Invalid value for `ml_model_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ml_model_infos = ml_model_infos
