# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.network_area_info import NetworkAreaInfo
from openapi_server.models.redundant_transmission_exp_per_ts import RedundantTransmissionExpPerTS
from openapi_server import util

from openapi_server.models.network_area_info import NetworkAreaInfo  # noqa: E501
from openapi_server.models.redundant_transmission_exp_per_ts import RedundantTransmissionExpPerTS  # noqa: E501

class RedundantTransmissionExpInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, spatial_valid_con=None, dnn=None, red_trans_exps=None):  # noqa: E501
        """RedundantTransmissionExpInfo - a model defined in OpenAPI

        :param spatial_valid_con: The spatial_valid_con of this RedundantTransmissionExpInfo.  # noqa: E501
        :type spatial_valid_con: NetworkAreaInfo
        :param dnn: The dnn of this RedundantTransmissionExpInfo.  # noqa: E501
        :type dnn: str
        :param red_trans_exps: The red_trans_exps of this RedundantTransmissionExpInfo.  # noqa: E501
        :type red_trans_exps: List[RedundantTransmissionExpPerTS]
        """
        self.openapi_types = {
            'spatial_valid_con': NetworkAreaInfo,
            'dnn': str,
            'red_trans_exps': List[RedundantTransmissionExpPerTS]
        }

        self.attribute_map = {
            'spatial_valid_con': 'spatialValidCon',
            'dnn': 'dnn',
            'red_trans_exps': 'redTransExps'
        }

        self.spatial_valid_con = spatial_valid_con
        self.dnn = dnn
        self.red_trans_exps = red_trans_exps

    @classmethod
    def from_dict(cls, dikt) -> 'RedundantTransmissionExpInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RedundantTransmissionExpInfo of this RedundantTransmissionExpInfo.  # noqa: E501
        :rtype: RedundantTransmissionExpInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def spatial_valid_con(self):
        """Gets the spatial_valid_con of this RedundantTransmissionExpInfo.


        :return: The spatial_valid_con of this RedundantTransmissionExpInfo.
        :rtype: NetworkAreaInfo
        """
        return self._spatial_valid_con

    @spatial_valid_con.setter
    def spatial_valid_con(self, spatial_valid_con):
        """Sets the spatial_valid_con of this RedundantTransmissionExpInfo.


        :param spatial_valid_con: The spatial_valid_con of this RedundantTransmissionExpInfo.
        :type spatial_valid_con: NetworkAreaInfo
        """

        self._spatial_valid_con = spatial_valid_con

    @property
    def dnn(self):
        """Gets the dnn of this RedundantTransmissionExpInfo.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :return: The dnn of this RedundantTransmissionExpInfo.
        :rtype: str
        """
        return self._dnn

    @dnn.setter
    def dnn(self, dnn):
        """Sets the dnn of this RedundantTransmissionExpInfo.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :param dnn: The dnn of this RedundantTransmissionExpInfo.
        :type dnn: str
        """

        self._dnn = dnn

    @property
    def red_trans_exps(self):
        """Gets the red_trans_exps of this RedundantTransmissionExpInfo.


        :return: The red_trans_exps of this RedundantTransmissionExpInfo.
        :rtype: List[RedundantTransmissionExpPerTS]
        """
        return self._red_trans_exps

    @red_trans_exps.setter
    def red_trans_exps(self, red_trans_exps):
        """Sets the red_trans_exps of this RedundantTransmissionExpInfo.


        :param red_trans_exps: The red_trans_exps of this RedundantTransmissionExpInfo.
        :type red_trans_exps: List[RedundantTransmissionExpPerTS]
        """
#        if red_trans_exps is None:
#            raise ValueError("Invalid value for `red_trans_exps`, must not be `None`")  # noqa: E501
#        if red_trans_exps is not None and len(red_trans_exps) < 1:
#            raise ValueError("Invalid value for `red_trans_exps`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._red_trans_exps = red_trans_exps
