# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.collective_behaviour_filter import CollectiveBehaviourFilter
from openapi_server.models.network_area_info import NetworkAreaInfo
from openapi_server.models.target_ue_identification import TargetUeIdentification
from openapi_server import util

from openapi_server.models.collective_behaviour_filter import CollectiveBehaviourFilter  # noqa: E501
from openapi_server.models.network_area_info import NetworkAreaInfo  # noqa: E501
from openapi_server.models.target_ue_identification import TargetUeIdentification  # noqa: E501

class NefEventFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tgt_ue=None, app_ids=None, loc_area=None, coll_attrs=None):  # noqa: E501
        """NefEventFilter - a model defined in OpenAPI

        :param tgt_ue: The tgt_ue of this NefEventFilter.  # noqa: E501
        :type tgt_ue: TargetUeIdentification
        :param app_ids: The app_ids of this NefEventFilter.  # noqa: E501
        :type app_ids: List[str]
        :param loc_area: The loc_area of this NefEventFilter.  # noqa: E501
        :type loc_area: NetworkAreaInfo
        :param coll_attrs: The coll_attrs of this NefEventFilter.  # noqa: E501
        :type coll_attrs: List[CollectiveBehaviourFilter]
        """
        self.openapi_types = {
            'tgt_ue': TargetUeIdentification,
            'app_ids': List[str],
            'loc_area': NetworkAreaInfo,
            'coll_attrs': List[CollectiveBehaviourFilter]
        }

        self.attribute_map = {
            'tgt_ue': 'tgtUe',
            'app_ids': 'appIds',
            'loc_area': 'locArea',
            'coll_attrs': 'collAttrs'
        }

        self.tgt_ue = tgt_ue
        self.app_ids = app_ids
        self.loc_area = loc_area
        self.coll_attrs = coll_attrs

    @classmethod
    def from_dict(cls, dikt) -> 'NefEventFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NefEventFilter of this NefEventFilter.  # noqa: E501
        :rtype: NefEventFilter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tgt_ue(self):
        """Gets the tgt_ue of this NefEventFilter.


        :return: The tgt_ue of this NefEventFilter.
        :rtype: TargetUeIdentification
        """
        return self._tgt_ue

    @tgt_ue.setter
    def tgt_ue(self, tgt_ue):
        """Sets the tgt_ue of this NefEventFilter.


        :param tgt_ue: The tgt_ue of this NefEventFilter.
        :type tgt_ue: TargetUeIdentification
        """
        if tgt_ue is None:
            raise ValueError("Invalid value for `tgt_ue`, must not be `None`")  # noqa: E501

        self._tgt_ue = tgt_ue

    @property
    def app_ids(self):
        """Gets the app_ids of this NefEventFilter.


        :return: The app_ids of this NefEventFilter.
        :rtype: List[str]
        """
        return self._app_ids

    @app_ids.setter
    def app_ids(self, app_ids):
        """Sets the app_ids of this NefEventFilter.


        :param app_ids: The app_ids of this NefEventFilter.
        :type app_ids: List[str]
        """
        if app_ids is not None and len(app_ids) < 1:
            raise ValueError("Invalid value for `app_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._app_ids = app_ids

    @property
    def loc_area(self):
        """Gets the loc_area of this NefEventFilter.


        :return: The loc_area of this NefEventFilter.
        :rtype: NetworkAreaInfo
        """
        return self._loc_area

    @loc_area.setter
    def loc_area(self, loc_area):
        """Sets the loc_area of this NefEventFilter.


        :param loc_area: The loc_area of this NefEventFilter.
        :type loc_area: NetworkAreaInfo
        """

        self._loc_area = loc_area

    @property
    def coll_attrs(self):
        """Gets the coll_attrs of this NefEventFilter.


        :return: The coll_attrs of this NefEventFilter.
        :rtype: List[CollectiveBehaviourFilter]
        """
        return self._coll_attrs

    @coll_attrs.setter
    def coll_attrs(self, coll_attrs):
        """Sets the coll_attrs of this NefEventFilter.


        :param coll_attrs: The coll_attrs of this NefEventFilter.
        :type coll_attrs: List[CollectiveBehaviourFilter]
        """
        if coll_attrs is not None and len(coll_attrs) < 1:
            raise ValueError("Invalid value for `coll_attrs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._coll_attrs = coll_attrs
