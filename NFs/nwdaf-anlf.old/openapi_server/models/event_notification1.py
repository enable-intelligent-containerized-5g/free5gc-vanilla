# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.access_type import AccessType
from openapi_server.models.communication_failure import CommunicationFailure
from openapi_server.models.ddd_traffic_descriptor import DddTrafficDescriptor
from openapi_server.models.dl_data_delivery_status import DlDataDeliveryStatus
from openapi_server.models.dnai_change_type import DnaiChangeType
from openapi_server.models.eth_flow_description import EthFlowDescription
from openapi_server.models.ip_addr import IpAddr
from openapi_server.models.ipv6_addr import Ipv6Addr
from openapi_server.models.ipv6_prefix import Ipv6Prefix
from openapi_server.models.pdu_session_information import PduSessionInformation
from openapi_server.models.pdu_session_type import PduSessionType
from openapi_server.models.plmn_id import PlmnId
from openapi_server.models.rat_type import RatType
from openapi_server.models.route_to_location import RouteToLocation
from openapi_server.models.sm_nas_from_smf import SmNasFromSmf
from openapi_server.models.sm_nas_from_ue import SmNasFromUe
from openapi_server.models.smf_event import SmfEvent
from openapi_server.models.snssai import Snssai
from openapi_server.models.time_window import TimeWindow
from openapi_server.models.transaction_info import TransactionInfo
from openapi_server.models.upf_information import UpfInformation
import re
from openapi_server import util

from openapi_server.models.access_type import AccessType  # noqa: E501
from openapi_server.models.communication_failure import CommunicationFailure  # noqa: E501
from openapi_server.models.ddd_traffic_descriptor import DddTrafficDescriptor  # noqa: E501
from openapi_server.models.dl_data_delivery_status import DlDataDeliveryStatus  # noqa: E501
from openapi_server.models.dnai_change_type import DnaiChangeType  # noqa: E501
from openapi_server.models.eth_flow_description import EthFlowDescription  # noqa: E501
from openapi_server.models.ip_addr import IpAddr  # noqa: E501
from openapi_server.models.ipv6_addr import Ipv6Addr  # noqa: E501
from openapi_server.models.ipv6_prefix import Ipv6Prefix  # noqa: E501
from openapi_server.models.pdu_session_information import PduSessionInformation  # noqa: E501
from openapi_server.models.pdu_session_type import PduSessionType  # noqa: E501
from openapi_server.models.plmn_id import PlmnId  # noqa: E501
from openapi_server.models.rat_type import RatType  # noqa: E501
from openapi_server.models.route_to_location import RouteToLocation  # noqa: E501
from openapi_server.models.sm_nas_from_smf import SmNasFromSmf  # noqa: E501
from openapi_server.models.sm_nas_from_ue import SmNasFromUe  # noqa: E501
from openapi_server.models.smf_event import SmfEvent  # noqa: E501
from openapi_server.models.snssai import Snssai  # noqa: E501
from openapi_server.models.time_window import TimeWindow  # noqa: E501
from openapi_server.models.transaction_info import TransactionInfo  # noqa: E501
from openapi_server.models.upf_information import UpfInformation  # noqa: E501
import re  # noqa: E501

class EventNotification1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event=None, time_stamp=None, supi=None, gpsi=None, ue_ip_addr=None, transac_infos=None, source_dnai=None, target_dnai=None, dnai_chg_type=None, source_ue_ipv4_addr=None, source_ue_ipv6_prefix=None, target_ue_ipv4_addr=None, target_ue_ipv6_prefix=None, source_tra_routing=None, target_tra_routing=None, ue_mac=None, ad_ipv4_addr=None, ad_ipv6_prefix=None, re_ipv4_addr=None, re_ipv6_prefix=None, plmn_id=None, acc_type=None, pdu_se_id=None, rat_type=None, ddd_status=None, ddd_tra_descriptor=None, max_wait_time=None, comm_failure=None, ipv4_addr=None, ipv6_prefixes=None, ipv6_addrs=None, pdu_sess_type=None, qfi=None, app_id=None, eth_flow_descs=None, ethf_descs=None, flow_descs=None, f_descs=None, dnn=None, snssai=None, ul_delays=None, dl_delays=None, rt_delays=None, time_window=None, sm_nas_from_ue=None, sm_nas_from_smf=None, up_red_trans=None, ss_id=None, bss_id=None, start_wlan=None, end_wlan=None, pdu_sess_infos=None, upf_info=None):  # noqa: E501
        """EventNotification1 - a model defined in OpenAPI

        :param event: The event of this EventNotification1.  # noqa: E501
        :type event: SmfEvent
        :param time_stamp: The time_stamp of this EventNotification1.  # noqa: E501
        :type time_stamp: datetime
        :param supi: The supi of this EventNotification1.  # noqa: E501
        :type supi: str
        :param gpsi: The gpsi of this EventNotification1.  # noqa: E501
        :type gpsi: str
        :param ue_ip_addr: The ue_ip_addr of this EventNotification1.  # noqa: E501
        :type ue_ip_addr: IpAddr
        :param transac_infos: The transac_infos of this EventNotification1.  # noqa: E501
        :type transac_infos: List[TransactionInfo]
        :param source_dnai: The source_dnai of this EventNotification1.  # noqa: E501
        :type source_dnai: str
        :param target_dnai: The target_dnai of this EventNotification1.  # noqa: E501
        :type target_dnai: str
        :param dnai_chg_type: The dnai_chg_type of this EventNotification1.  # noqa: E501
        :type dnai_chg_type: DnaiChangeType
        :param source_ue_ipv4_addr: The source_ue_ipv4_addr of this EventNotification1.  # noqa: E501
        :type source_ue_ipv4_addr: str
        :param source_ue_ipv6_prefix: The source_ue_ipv6_prefix of this EventNotification1.  # noqa: E501
        :type source_ue_ipv6_prefix: Ipv6Prefix
        :param target_ue_ipv4_addr: The target_ue_ipv4_addr of this EventNotification1.  # noqa: E501
        :type target_ue_ipv4_addr: str
        :param target_ue_ipv6_prefix: The target_ue_ipv6_prefix of this EventNotification1.  # noqa: E501
        :type target_ue_ipv6_prefix: Ipv6Prefix
        :param source_tra_routing: The source_tra_routing of this EventNotification1.  # noqa: E501
        :type source_tra_routing: RouteToLocation
        :param target_tra_routing: The target_tra_routing of this EventNotification1.  # noqa: E501
        :type target_tra_routing: RouteToLocation
        :param ue_mac: The ue_mac of this EventNotification1.  # noqa: E501
        :type ue_mac: str
        :param ad_ipv4_addr: The ad_ipv4_addr of this EventNotification1.  # noqa: E501
        :type ad_ipv4_addr: str
        :param ad_ipv6_prefix: The ad_ipv6_prefix of this EventNotification1.  # noqa: E501
        :type ad_ipv6_prefix: Ipv6Prefix
        :param re_ipv4_addr: The re_ipv4_addr of this EventNotification1.  # noqa: E501
        :type re_ipv4_addr: str
        :param re_ipv6_prefix: The re_ipv6_prefix of this EventNotification1.  # noqa: E501
        :type re_ipv6_prefix: Ipv6Prefix
        :param plmn_id: The plmn_id of this EventNotification1.  # noqa: E501
        :type plmn_id: PlmnId
        :param acc_type: The acc_type of this EventNotification1.  # noqa: E501
        :type acc_type: AccessType
        :param pdu_se_id: The pdu_se_id of this EventNotification1.  # noqa: E501
        :type pdu_se_id: int
        :param rat_type: The rat_type of this EventNotification1.  # noqa: E501
        :type rat_type: RatType
        :param ddd_status: The ddd_status of this EventNotification1.  # noqa: E501
        :type ddd_status: DlDataDeliveryStatus
        :param ddd_tra_descriptor: The ddd_tra_descriptor of this EventNotification1.  # noqa: E501
        :type ddd_tra_descriptor: DddTrafficDescriptor
        :param max_wait_time: The max_wait_time of this EventNotification1.  # noqa: E501
        :type max_wait_time: datetime
        :param comm_failure: The comm_failure of this EventNotification1.  # noqa: E501
        :type comm_failure: CommunicationFailure
        :param ipv4_addr: The ipv4_addr of this EventNotification1.  # noqa: E501
        :type ipv4_addr: str
        :param ipv6_prefixes: The ipv6_prefixes of this EventNotification1.  # noqa: E501
        :type ipv6_prefixes: List[Ipv6Prefix]
        :param ipv6_addrs: The ipv6_addrs of this EventNotification1.  # noqa: E501
        :type ipv6_addrs: List[Ipv6Addr]
        :param pdu_sess_type: The pdu_sess_type of this EventNotification1.  # noqa: E501
        :type pdu_sess_type: PduSessionType
        :param qfi: The qfi of this EventNotification1.  # noqa: E501
        :type qfi: int
        :param app_id: The app_id of this EventNotification1.  # noqa: E501
        :type app_id: str
        :param eth_flow_descs: The eth_flow_descs of this EventNotification1.  # noqa: E501
        :type eth_flow_descs: List[EthFlowDescription]
        :param ethf_descs: The ethf_descs of this EventNotification1.  # noqa: E501
        :type ethf_descs: List[EthFlowDescription]
        :param flow_descs: The flow_descs of this EventNotification1.  # noqa: E501
        :type flow_descs: List[str]
        :param f_descs: The f_descs of this EventNotification1.  # noqa: E501
        :type f_descs: List[str]
        :param dnn: The dnn of this EventNotification1.  # noqa: E501
        :type dnn: str
        :param snssai: The snssai of this EventNotification1.  # noqa: E501
        :type snssai: Snssai
        :param ul_delays: The ul_delays of this EventNotification1.  # noqa: E501
        :type ul_delays: List[int]
        :param dl_delays: The dl_delays of this EventNotification1.  # noqa: E501
        :type dl_delays: List[int]
        :param rt_delays: The rt_delays of this EventNotification1.  # noqa: E501
        :type rt_delays: List[int]
        :param time_window: The time_window of this EventNotification1.  # noqa: E501
        :type time_window: TimeWindow
        :param sm_nas_from_ue: The sm_nas_from_ue of this EventNotification1.  # noqa: E501
        :type sm_nas_from_ue: SmNasFromUe
        :param sm_nas_from_smf: The sm_nas_from_smf of this EventNotification1.  # noqa: E501
        :type sm_nas_from_smf: SmNasFromSmf
        :param up_red_trans: The up_red_trans of this EventNotification1.  # noqa: E501
        :type up_red_trans: bool
        :param ss_id: The ss_id of this EventNotification1.  # noqa: E501
        :type ss_id: str
        :param bss_id: The bss_id of this EventNotification1.  # noqa: E501
        :type bss_id: str
        :param start_wlan: The start_wlan of this EventNotification1.  # noqa: E501
        :type start_wlan: datetime
        :param end_wlan: The end_wlan of this EventNotification1.  # noqa: E501
        :type end_wlan: datetime
        :param pdu_sess_infos: The pdu_sess_infos of this EventNotification1.  # noqa: E501
        :type pdu_sess_infos: List[PduSessionInformation]
        :param upf_info: The upf_info of this EventNotification1.  # noqa: E501
        :type upf_info: UpfInformation
        """
        self.openapi_types = {
            'event': SmfEvent,
            'time_stamp': datetime,
            'supi': str,
            'gpsi': str,
            'ue_ip_addr': IpAddr,
            'transac_infos': List[TransactionInfo],
            'source_dnai': str,
            'target_dnai': str,
            'dnai_chg_type': DnaiChangeType,
            'source_ue_ipv4_addr': str,
            'source_ue_ipv6_prefix': Ipv6Prefix,
            'target_ue_ipv4_addr': str,
            'target_ue_ipv6_prefix': Ipv6Prefix,
            'source_tra_routing': RouteToLocation,
            'target_tra_routing': RouteToLocation,
            'ue_mac': str,
            'ad_ipv4_addr': str,
            'ad_ipv6_prefix': Ipv6Prefix,
            're_ipv4_addr': str,
            're_ipv6_prefix': Ipv6Prefix,
            'plmn_id': PlmnId,
            'acc_type': AccessType,
            'pdu_se_id': int,
            'rat_type': RatType,
            'ddd_status': DlDataDeliveryStatus,
            'ddd_tra_descriptor': DddTrafficDescriptor,
            'max_wait_time': datetime,
            'comm_failure': CommunicationFailure,
            'ipv4_addr': str,
            'ipv6_prefixes': List[Ipv6Prefix],
            'ipv6_addrs': List[Ipv6Addr],
            'pdu_sess_type': PduSessionType,
            'qfi': int,
            'app_id': str,
            'eth_flow_descs': List[EthFlowDescription],
            'ethf_descs': List[EthFlowDescription],
            'flow_descs': List[str],
            'f_descs': List[str],
            'dnn': str,
            'snssai': Snssai,
            'ul_delays': List[int],
            'dl_delays': List[int],
            'rt_delays': List[int],
            'time_window': TimeWindow,
            'sm_nas_from_ue': SmNasFromUe,
            'sm_nas_from_smf': SmNasFromSmf,
            'up_red_trans': bool,
            'ss_id': str,
            'bss_id': str,
            'start_wlan': datetime,
            'end_wlan': datetime,
            'pdu_sess_infos': List[PduSessionInformation],
            'upf_info': UpfInformation
        }

        self.attribute_map = {
            'event': 'event',
            'time_stamp': 'timeStamp',
            'supi': 'supi',
            'gpsi': 'gpsi',
            'ue_ip_addr': 'ueIpAddr',
            'transac_infos': 'transacInfos',
            'source_dnai': 'sourceDnai',
            'target_dnai': 'targetDnai',
            'dnai_chg_type': 'dnaiChgType',
            'source_ue_ipv4_addr': 'sourceUeIpv4Addr',
            'source_ue_ipv6_prefix': 'sourceUeIpv6Prefix',
            'target_ue_ipv4_addr': 'targetUeIpv4Addr',
            'target_ue_ipv6_prefix': 'targetUeIpv6Prefix',
            'source_tra_routing': 'sourceTraRouting',
            'target_tra_routing': 'targetTraRouting',
            'ue_mac': 'ueMac',
            'ad_ipv4_addr': 'adIpv4Addr',
            'ad_ipv6_prefix': 'adIpv6Prefix',
            're_ipv4_addr': 'reIpv4Addr',
            're_ipv6_prefix': 'reIpv6Prefix',
            'plmn_id': 'plmnId',
            'acc_type': 'accType',
            'pdu_se_id': 'pduSeId',
            'rat_type': 'ratType',
            'ddd_status': 'dddStatus',
            'ddd_tra_descriptor': 'dddTraDescriptor',
            'max_wait_time': 'maxWaitTime',
            'comm_failure': 'commFailure',
            'ipv4_addr': 'ipv4Addr',
            'ipv6_prefixes': 'ipv6Prefixes',
            'ipv6_addrs': 'ipv6Addrs',
            'pdu_sess_type': 'pduSessType',
            'qfi': 'qfi',
            'app_id': 'appId',
            'eth_flow_descs': 'ethFlowDescs',
            'ethf_descs': 'ethfDescs',
            'flow_descs': 'flowDescs',
            'f_descs': 'fDescs',
            'dnn': 'dnn',
            'snssai': 'snssai',
            'ul_delays': 'ulDelays',
            'dl_delays': 'dlDelays',
            'rt_delays': 'rtDelays',
            'time_window': 'timeWindow',
            'sm_nas_from_ue': 'smNasFromUe',
            'sm_nas_from_smf': 'smNasFromSmf',
            'up_red_trans': 'upRedTrans',
            'ss_id': 'ssId',
            'bss_id': 'bssId',
            'start_wlan': 'startWlan',
            'end_wlan': 'endWlan',
            'pdu_sess_infos': 'pduSessInfos',
            'upf_info': 'upfInfo'
        }

        self.event = event
        self.time_stamp = time_stamp
        self.supi = supi
        self.gpsi = gpsi
        self.ue_ip_addr = ue_ip_addr
        self.transac_infos = transac_infos
        self.source_dnai = source_dnai
        self.target_dnai = target_dnai
        self.dnai_chg_type = dnai_chg_type
        self.source_ue_ipv4_addr = source_ue_ipv4_addr
        self.source_ue_ipv6_prefix = source_ue_ipv6_prefix
        self.target_ue_ipv4_addr = target_ue_ipv4_addr
        self.target_ue_ipv6_prefix = target_ue_ipv6_prefix
        self.source_tra_routing = source_tra_routing
        self.target_tra_routing = target_tra_routing
        self.ue_mac = ue_mac
        self.ad_ipv4_addr = ad_ipv4_addr
        self.ad_ipv6_prefix = ad_ipv6_prefix
        self.re_ipv4_addr = re_ipv4_addr
        self.re_ipv6_prefix = re_ipv6_prefix
        self.plmn_id = plmn_id
        self.acc_type = acc_type
        self.pdu_se_id = pdu_se_id
        self.rat_type = rat_type
        self.ddd_status = ddd_status
        self.ddd_tra_descriptor = ddd_tra_descriptor
        self.max_wait_time = max_wait_time
        self.comm_failure = comm_failure
        self.ipv4_addr = ipv4_addr
        self.ipv6_prefixes = ipv6_prefixes
        self.ipv6_addrs = ipv6_addrs
        self.pdu_sess_type = pdu_sess_type
        self.qfi = qfi
        self.app_id = app_id
        self.eth_flow_descs = eth_flow_descs
        self.ethf_descs = ethf_descs
        self.flow_descs = flow_descs
        self.f_descs = f_descs
        self.dnn = dnn
        self.snssai = snssai
        self.ul_delays = ul_delays
        self.dl_delays = dl_delays
        self.rt_delays = rt_delays
        self.time_window = time_window
        self.sm_nas_from_ue = sm_nas_from_ue
        self.sm_nas_from_smf = sm_nas_from_smf
        self.up_red_trans = up_red_trans
        self.ss_id = ss_id
        self.bss_id = bss_id
        self.start_wlan = start_wlan
        self.end_wlan = end_wlan
        self.pdu_sess_infos = pdu_sess_infos
        self.upf_info = upf_info

    @classmethod
    def from_dict(cls, dikt) -> 'EventNotification1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventNotification_1 of this EventNotification1.  # noqa: E501
        :rtype: EventNotification1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this EventNotification1.


        :return: The event of this EventNotification1.
        :rtype: SmfEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this EventNotification1.


        :param event: The event of this EventNotification1.
        :type event: SmfEvent
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501

        self._event = event

    @property
    def time_stamp(self):
        """Gets the time_stamp of this EventNotification1.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The time_stamp of this EventNotification1.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this EventNotification1.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param time_stamp: The time_stamp of this EventNotification1.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")  # noqa: E501

        self._time_stamp = time_stamp

    @property
    def supi(self):
        """Gets the supi of this EventNotification1.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :return: The supi of this EventNotification1.
        :rtype: str
        """
        return self._supi

    @supi.setter
    def supi(self, supi):
        """Sets the supi of this EventNotification1.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :param supi: The supi of this EventNotification1.
        :type supi: str
        """
        if supi is not None and not re.search(r'^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$', supi):  # noqa: E501
            raise ValueError("Invalid value for `supi`, must be a follow pattern or equal to `/^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$/`")  # noqa: E501

        self._supi = supi

    @property
    def gpsi(self):
        """Gets the gpsi of this EventNotification1.

        String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.    # noqa: E501

        :return: The gpsi of this EventNotification1.
        :rtype: str
        """
        return self._gpsi

    @gpsi.setter
    def gpsi(self, gpsi):
        """Sets the gpsi of this EventNotification1.

        String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.    # noqa: E501

        :param gpsi: The gpsi of this EventNotification1.
        :type gpsi: str
        """
        if gpsi is not None and not re.search(r'^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$', gpsi):  # noqa: E501
            raise ValueError("Invalid value for `gpsi`, must be a follow pattern or equal to `/^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$/`")  # noqa: E501

        self._gpsi = gpsi

    @property
    def ue_ip_addr(self):
        """Gets the ue_ip_addr of this EventNotification1.


        :return: The ue_ip_addr of this EventNotification1.
        :rtype: IpAddr
        """
        return self._ue_ip_addr

    @ue_ip_addr.setter
    def ue_ip_addr(self, ue_ip_addr):
        """Sets the ue_ip_addr of this EventNotification1.


        :param ue_ip_addr: The ue_ip_addr of this EventNotification1.
        :type ue_ip_addr: IpAddr
        """

        self._ue_ip_addr = ue_ip_addr

    @property
    def transac_infos(self):
        """Gets the transac_infos of this EventNotification1.

        Transaction Information.  # noqa: E501

        :return: The transac_infos of this EventNotification1.
        :rtype: List[TransactionInfo]
        """
        return self._transac_infos

    @transac_infos.setter
    def transac_infos(self, transac_infos):
        """Sets the transac_infos of this EventNotification1.

        Transaction Information.  # noqa: E501

        :param transac_infos: The transac_infos of this EventNotification1.
        :type transac_infos: List[TransactionInfo]
        """
        if transac_infos is not None and len(transac_infos) < 1:
            raise ValueError("Invalid value for `transac_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._transac_infos = transac_infos

    @property
    def source_dnai(self):
        """Gets the source_dnai of this EventNotification1.

        DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.  # noqa: E501

        :return: The source_dnai of this EventNotification1.
        :rtype: str
        """
        return self._source_dnai

    @source_dnai.setter
    def source_dnai(self, source_dnai):
        """Sets the source_dnai of this EventNotification1.

        DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.  # noqa: E501

        :param source_dnai: The source_dnai of this EventNotification1.
        :type source_dnai: str
        """

        self._source_dnai = source_dnai

    @property
    def target_dnai(self):
        """Gets the target_dnai of this EventNotification1.

        DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.  # noqa: E501

        :return: The target_dnai of this EventNotification1.
        :rtype: str
        """
        return self._target_dnai

    @target_dnai.setter
    def target_dnai(self, target_dnai):
        """Sets the target_dnai of this EventNotification1.

        DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.  # noqa: E501

        :param target_dnai: The target_dnai of this EventNotification1.
        :type target_dnai: str
        """

        self._target_dnai = target_dnai

    @property
    def dnai_chg_type(self):
        """Gets the dnai_chg_type of this EventNotification1.


        :return: The dnai_chg_type of this EventNotification1.
        :rtype: DnaiChangeType
        """
        return self._dnai_chg_type

    @dnai_chg_type.setter
    def dnai_chg_type(self, dnai_chg_type):
        """Sets the dnai_chg_type of this EventNotification1.


        :param dnai_chg_type: The dnai_chg_type of this EventNotification1.
        :type dnai_chg_type: DnaiChangeType
        """

        self._dnai_chg_type = dnai_chg_type

    @property
    def source_ue_ipv4_addr(self):
        """Gets the source_ue_ipv4_addr of this EventNotification1.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :return: The source_ue_ipv4_addr of this EventNotification1.
        :rtype: str
        """
        return self._source_ue_ipv4_addr

    @source_ue_ipv4_addr.setter
    def source_ue_ipv4_addr(self, source_ue_ipv4_addr):
        """Sets the source_ue_ipv4_addr of this EventNotification1.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :param source_ue_ipv4_addr: The source_ue_ipv4_addr of this EventNotification1.
        :type source_ue_ipv4_addr: str
        """
        if source_ue_ipv4_addr is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', source_ue_ipv4_addr):  # noqa: E501
            raise ValueError("Invalid value for `source_ue_ipv4_addr`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/`")  # noqa: E501

        self._source_ue_ipv4_addr = source_ue_ipv4_addr

    @property
    def source_ue_ipv6_prefix(self):
        """Gets the source_ue_ipv6_prefix of this EventNotification1.


        :return: The source_ue_ipv6_prefix of this EventNotification1.
        :rtype: Ipv6Prefix
        """
        return self._source_ue_ipv6_prefix

    @source_ue_ipv6_prefix.setter
    def source_ue_ipv6_prefix(self, source_ue_ipv6_prefix):
        """Sets the source_ue_ipv6_prefix of this EventNotification1.


        :param source_ue_ipv6_prefix: The source_ue_ipv6_prefix of this EventNotification1.
        :type source_ue_ipv6_prefix: Ipv6Prefix
        """

        self._source_ue_ipv6_prefix = source_ue_ipv6_prefix

    @property
    def target_ue_ipv4_addr(self):
        """Gets the target_ue_ipv4_addr of this EventNotification1.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :return: The target_ue_ipv4_addr of this EventNotification1.
        :rtype: str
        """
        return self._target_ue_ipv4_addr

    @target_ue_ipv4_addr.setter
    def target_ue_ipv4_addr(self, target_ue_ipv4_addr):
        """Sets the target_ue_ipv4_addr of this EventNotification1.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :param target_ue_ipv4_addr: The target_ue_ipv4_addr of this EventNotification1.
        :type target_ue_ipv4_addr: str
        """
        if target_ue_ipv4_addr is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', target_ue_ipv4_addr):  # noqa: E501
            raise ValueError("Invalid value for `target_ue_ipv4_addr`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/`")  # noqa: E501

        self._target_ue_ipv4_addr = target_ue_ipv4_addr

    @property
    def target_ue_ipv6_prefix(self):
        """Gets the target_ue_ipv6_prefix of this EventNotification1.


        :return: The target_ue_ipv6_prefix of this EventNotification1.
        :rtype: Ipv6Prefix
        """
        return self._target_ue_ipv6_prefix

    @target_ue_ipv6_prefix.setter
    def target_ue_ipv6_prefix(self, target_ue_ipv6_prefix):
        """Sets the target_ue_ipv6_prefix of this EventNotification1.


        :param target_ue_ipv6_prefix: The target_ue_ipv6_prefix of this EventNotification1.
        :type target_ue_ipv6_prefix: Ipv6Prefix
        """

        self._target_ue_ipv6_prefix = target_ue_ipv6_prefix

    @property
    def source_tra_routing(self):
        """Gets the source_tra_routing of this EventNotification1.


        :return: The source_tra_routing of this EventNotification1.
        :rtype: RouteToLocation
        """
        return self._source_tra_routing

    @source_tra_routing.setter
    def source_tra_routing(self, source_tra_routing):
        """Sets the source_tra_routing of this EventNotification1.


        :param source_tra_routing: The source_tra_routing of this EventNotification1.
        :type source_tra_routing: RouteToLocation
        """

        self._source_tra_routing = source_tra_routing

    @property
    def target_tra_routing(self):
        """Gets the target_tra_routing of this EventNotification1.


        :return: The target_tra_routing of this EventNotification1.
        :rtype: RouteToLocation
        """
        return self._target_tra_routing

    @target_tra_routing.setter
    def target_tra_routing(self, target_tra_routing):
        """Sets the target_tra_routing of this EventNotification1.


        :param target_tra_routing: The target_tra_routing of this EventNotification1.
        :type target_tra_routing: RouteToLocation
        """

        self._target_tra_routing = target_tra_routing

    @property
    def ue_mac(self):
        """Gets the ue_mac of this EventNotification1.

        String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042.   # noqa: E501

        :return: The ue_mac of this EventNotification1.
        :rtype: str
        """
        return self._ue_mac

    @ue_mac.setter
    def ue_mac(self, ue_mac):
        """Sets the ue_mac of this EventNotification1.

        String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042.   # noqa: E501

        :param ue_mac: The ue_mac of this EventNotification1.
        :type ue_mac: str
        """
        if ue_mac is not None and not re.search(r'^([0-9a-fA-F]{2})((-[0-9a-fA-F]{2}){5})$', ue_mac):  # noqa: E501
            raise ValueError("Invalid value for `ue_mac`, must be a follow pattern or equal to `/^([0-9a-fA-F]{2})((-[0-9a-fA-F]{2}){5})$/`")  # noqa: E501

        self._ue_mac = ue_mac

    @property
    def ad_ipv4_addr(self):
        """Gets the ad_ipv4_addr of this EventNotification1.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :return: The ad_ipv4_addr of this EventNotification1.
        :rtype: str
        """
        return self._ad_ipv4_addr

    @ad_ipv4_addr.setter
    def ad_ipv4_addr(self, ad_ipv4_addr):
        """Sets the ad_ipv4_addr of this EventNotification1.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :param ad_ipv4_addr: The ad_ipv4_addr of this EventNotification1.
        :type ad_ipv4_addr: str
        """
        if ad_ipv4_addr is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', ad_ipv4_addr):  # noqa: E501
            raise ValueError("Invalid value for `ad_ipv4_addr`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/`")  # noqa: E501

        self._ad_ipv4_addr = ad_ipv4_addr

    @property
    def ad_ipv6_prefix(self):
        """Gets the ad_ipv6_prefix of this EventNotification1.


        :return: The ad_ipv6_prefix of this EventNotification1.
        :rtype: Ipv6Prefix
        """
        return self._ad_ipv6_prefix

    @ad_ipv6_prefix.setter
    def ad_ipv6_prefix(self, ad_ipv6_prefix):
        """Sets the ad_ipv6_prefix of this EventNotification1.


        :param ad_ipv6_prefix: The ad_ipv6_prefix of this EventNotification1.
        :type ad_ipv6_prefix: Ipv6Prefix
        """

        self._ad_ipv6_prefix = ad_ipv6_prefix

    @property
    def re_ipv4_addr(self):
        """Gets the re_ipv4_addr of this EventNotification1.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :return: The re_ipv4_addr of this EventNotification1.
        :rtype: str
        """
        return self._re_ipv4_addr

    @re_ipv4_addr.setter
    def re_ipv4_addr(self, re_ipv4_addr):
        """Sets the re_ipv4_addr of this EventNotification1.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :param re_ipv4_addr: The re_ipv4_addr of this EventNotification1.
        :type re_ipv4_addr: str
        """
        if re_ipv4_addr is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', re_ipv4_addr):  # noqa: E501
            raise ValueError("Invalid value for `re_ipv4_addr`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/`")  # noqa: E501

        self._re_ipv4_addr = re_ipv4_addr

    @property
    def re_ipv6_prefix(self):
        """Gets the re_ipv6_prefix of this EventNotification1.


        :return: The re_ipv6_prefix of this EventNotification1.
        :rtype: Ipv6Prefix
        """
        return self._re_ipv6_prefix

    @re_ipv6_prefix.setter
    def re_ipv6_prefix(self, re_ipv6_prefix):
        """Sets the re_ipv6_prefix of this EventNotification1.


        :param re_ipv6_prefix: The re_ipv6_prefix of this EventNotification1.
        :type re_ipv6_prefix: Ipv6Prefix
        """

        self._re_ipv6_prefix = re_ipv6_prefix

    @property
    def plmn_id(self):
        """Gets the plmn_id of this EventNotification1.


        :return: The plmn_id of this EventNotification1.
        :rtype: PlmnId
        """
        return self._plmn_id

    @plmn_id.setter
    def plmn_id(self, plmn_id):
        """Sets the plmn_id of this EventNotification1.


        :param plmn_id: The plmn_id of this EventNotification1.
        :type plmn_id: PlmnId
        """

        self._plmn_id = plmn_id

    @property
    def acc_type(self):
        """Gets the acc_type of this EventNotification1.


        :return: The acc_type of this EventNotification1.
        :rtype: AccessType
        """
        return self._acc_type

    @acc_type.setter
    def acc_type(self, acc_type):
        """Sets the acc_type of this EventNotification1.


        :param acc_type: The acc_type of this EventNotification1.
        :type acc_type: AccessType
        """

        self._acc_type = acc_type

    @property
    def pdu_se_id(self):
        """Gets the pdu_se_id of this EventNotification1.

        Unsigned integer identifying a PDU session, within the range 0 to 255, as specified in  clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU Session ID is allocated by the  Core Network for UEs not supporting N1 mode, reserved range 64 to 95 is used. PDU Session ID  within the reserved range is only visible in the Core Network.    # noqa: E501

        :return: The pdu_se_id of this EventNotification1.
        :rtype: int
        """
        return self._pdu_se_id

    @pdu_se_id.setter
    def pdu_se_id(self, pdu_se_id):
        """Sets the pdu_se_id of this EventNotification1.

        Unsigned integer identifying a PDU session, within the range 0 to 255, as specified in  clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU Session ID is allocated by the  Core Network for UEs not supporting N1 mode, reserved range 64 to 95 is used. PDU Session ID  within the reserved range is only visible in the Core Network.    # noqa: E501

        :param pdu_se_id: The pdu_se_id of this EventNotification1.
        :type pdu_se_id: int
        """
        if pdu_se_id is not None and pdu_se_id > 255:  # noqa: E501
            raise ValueError("Invalid value for `pdu_se_id`, must be a value less than or equal to `255`")  # noqa: E501
        if pdu_se_id is not None and pdu_se_id < 0:  # noqa: E501
            raise ValueError("Invalid value for `pdu_se_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pdu_se_id = pdu_se_id

    @property
    def rat_type(self):
        """Gets the rat_type of this EventNotification1.


        :return: The rat_type of this EventNotification1.
        :rtype: RatType
        """
        return self._rat_type

    @rat_type.setter
    def rat_type(self, rat_type):
        """Sets the rat_type of this EventNotification1.


        :param rat_type: The rat_type of this EventNotification1.
        :type rat_type: RatType
        """

        self._rat_type = rat_type

    @property
    def ddd_status(self):
        """Gets the ddd_status of this EventNotification1.


        :return: The ddd_status of this EventNotification1.
        :rtype: DlDataDeliveryStatus
        """
        return self._ddd_status

    @ddd_status.setter
    def ddd_status(self, ddd_status):
        """Sets the ddd_status of this EventNotification1.


        :param ddd_status: The ddd_status of this EventNotification1.
        :type ddd_status: DlDataDeliveryStatus
        """

        self._ddd_status = ddd_status

    @property
    def ddd_tra_descriptor(self):
        """Gets the ddd_tra_descriptor of this EventNotification1.


        :return: The ddd_tra_descriptor of this EventNotification1.
        :rtype: DddTrafficDescriptor
        """
        return self._ddd_tra_descriptor

    @ddd_tra_descriptor.setter
    def ddd_tra_descriptor(self, ddd_tra_descriptor):
        """Sets the ddd_tra_descriptor of this EventNotification1.


        :param ddd_tra_descriptor: The ddd_tra_descriptor of this EventNotification1.
        :type ddd_tra_descriptor: DddTrafficDescriptor
        """

        self._ddd_tra_descriptor = ddd_tra_descriptor

    @property
    def max_wait_time(self):
        """Gets the max_wait_time of this EventNotification1.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The max_wait_time of this EventNotification1.
        :rtype: datetime
        """
        return self._max_wait_time

    @max_wait_time.setter
    def max_wait_time(self, max_wait_time):
        """Sets the max_wait_time of this EventNotification1.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param max_wait_time: The max_wait_time of this EventNotification1.
        :type max_wait_time: datetime
        """

        self._max_wait_time = max_wait_time

    @property
    def comm_failure(self):
        """Gets the comm_failure of this EventNotification1.


        :return: The comm_failure of this EventNotification1.
        :rtype: CommunicationFailure
        """
        return self._comm_failure

    @comm_failure.setter
    def comm_failure(self, comm_failure):
        """Sets the comm_failure of this EventNotification1.


        :param comm_failure: The comm_failure of this EventNotification1.
        :type comm_failure: CommunicationFailure
        """

        self._comm_failure = comm_failure

    @property
    def ipv4_addr(self):
        """Gets the ipv4_addr of this EventNotification1.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :return: The ipv4_addr of this EventNotification1.
        :rtype: str
        """
        return self._ipv4_addr

    @ipv4_addr.setter
    def ipv4_addr(self, ipv4_addr):
        """Sets the ipv4_addr of this EventNotification1.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :param ipv4_addr: The ipv4_addr of this EventNotification1.
        :type ipv4_addr: str
        """
        if ipv4_addr is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', ipv4_addr):  # noqa: E501
            raise ValueError("Invalid value for `ipv4_addr`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/`")  # noqa: E501

        self._ipv4_addr = ipv4_addr

    @property
    def ipv6_prefixes(self):
        """Gets the ipv6_prefixes of this EventNotification1.


        :return: The ipv6_prefixes of this EventNotification1.
        :rtype: List[Ipv6Prefix]
        """
        return self._ipv6_prefixes

    @ipv6_prefixes.setter
    def ipv6_prefixes(self, ipv6_prefixes):
        """Sets the ipv6_prefixes of this EventNotification1.


        :param ipv6_prefixes: The ipv6_prefixes of this EventNotification1.
        :type ipv6_prefixes: List[Ipv6Prefix]
        """
        if ipv6_prefixes is not None and len(ipv6_prefixes) < 1:
            raise ValueError("Invalid value for `ipv6_prefixes`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ipv6_prefixes = ipv6_prefixes

    @property
    def ipv6_addrs(self):
        """Gets the ipv6_addrs of this EventNotification1.


        :return: The ipv6_addrs of this EventNotification1.
        :rtype: List[Ipv6Addr]
        """
        return self._ipv6_addrs

    @ipv6_addrs.setter
    def ipv6_addrs(self, ipv6_addrs):
        """Sets the ipv6_addrs of this EventNotification1.


        :param ipv6_addrs: The ipv6_addrs of this EventNotification1.
        :type ipv6_addrs: List[Ipv6Addr]
        """
        if ipv6_addrs is not None and len(ipv6_addrs) < 1:
            raise ValueError("Invalid value for `ipv6_addrs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ipv6_addrs = ipv6_addrs

    @property
    def pdu_sess_type(self):
        """Gets the pdu_sess_type of this EventNotification1.


        :return: The pdu_sess_type of this EventNotification1.
        :rtype: PduSessionType
        """
        return self._pdu_sess_type

    @pdu_sess_type.setter
    def pdu_sess_type(self, pdu_sess_type):
        """Sets the pdu_sess_type of this EventNotification1.


        :param pdu_sess_type: The pdu_sess_type of this EventNotification1.
        :type pdu_sess_type: PduSessionType
        """

        self._pdu_sess_type = pdu_sess_type

    @property
    def qfi(self):
        """Gets the qfi of this EventNotification1.

        Unsigned integer identifying a QoS flow, within the range 0 to 63.  # noqa: E501

        :return: The qfi of this EventNotification1.
        :rtype: int
        """
        return self._qfi

    @qfi.setter
    def qfi(self, qfi):
        """Sets the qfi of this EventNotification1.

        Unsigned integer identifying a QoS flow, within the range 0 to 63.  # noqa: E501

        :param qfi: The qfi of this EventNotification1.
        :type qfi: int
        """
        if qfi is not None and qfi > 63:  # noqa: E501
            raise ValueError("Invalid value for `qfi`, must be a value less than or equal to `63`")  # noqa: E501
        if qfi is not None and qfi < 0:  # noqa: E501
            raise ValueError("Invalid value for `qfi`, must be a value greater than or equal to `0`")  # noqa: E501

        self._qfi = qfi

    @property
    def app_id(self):
        """Gets the app_id of this EventNotification1.

        String providing an application identifier.  # noqa: E501

        :return: The app_id of this EventNotification1.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this EventNotification1.

        String providing an application identifier.  # noqa: E501

        :param app_id: The app_id of this EventNotification1.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def eth_flow_descs(self):
        """Gets the eth_flow_descs of this EventNotification1.

        Descriptor(s) for non-IP traffic. It allows the encoding of multiple UL and/or DL flows. Each entry of the array describes a single Ethernet flow.   # noqa: E501

        :return: The eth_flow_descs of this EventNotification1.
        :rtype: List[EthFlowDescription]
        """
        return self._eth_flow_descs

    @eth_flow_descs.setter
    def eth_flow_descs(self, eth_flow_descs):
        """Sets the eth_flow_descs of this EventNotification1.

        Descriptor(s) for non-IP traffic. It allows the encoding of multiple UL and/or DL flows. Each entry of the array describes a single Ethernet flow.   # noqa: E501

        :param eth_flow_descs: The eth_flow_descs of this EventNotification1.
        :type eth_flow_descs: List[EthFlowDescription]
        """
        if eth_flow_descs is not None and len(eth_flow_descs) < 1:
            raise ValueError("Invalid value for `eth_flow_descs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._eth_flow_descs = eth_flow_descs

    @property
    def ethf_descs(self):
        """Gets the ethf_descs of this EventNotification1.

        Contains the UL and/or DL Ethernet flows. Each entry of the array describes a single Ethernet flow.   # noqa: E501

        :return: The ethf_descs of this EventNotification1.
        :rtype: List[EthFlowDescription]
        """
        return self._ethf_descs

    @ethf_descs.setter
    def ethf_descs(self, ethf_descs):
        """Sets the ethf_descs of this EventNotification1.

        Contains the UL and/or DL Ethernet flows. Each entry of the array describes a single Ethernet flow.   # noqa: E501

        :param ethf_descs: The ethf_descs of this EventNotification1.
        :type ethf_descs: List[EthFlowDescription]
        """
        if ethf_descs is not None and len(ethf_descs) > 2:
            raise ValueError("Invalid value for `ethf_descs`, number of items must be less than or equal to `2`")  # noqa: E501
        if ethf_descs is not None and len(ethf_descs) < 1:
            raise ValueError("Invalid value for `ethf_descs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ethf_descs = ethf_descs

    @property
    def flow_descs(self):
        """Gets the flow_descs of this EventNotification1.

        Descriptor(s) for IP traffic. It allows the encoding of multiple UL and/or DL flows. Each entry of the array describes a single IP flow.   # noqa: E501

        :return: The flow_descs of this EventNotification1.
        :rtype: List[str]
        """
        return self._flow_descs

    @flow_descs.setter
    def flow_descs(self, flow_descs):
        """Sets the flow_descs of this EventNotification1.

        Descriptor(s) for IP traffic. It allows the encoding of multiple UL and/or DL flows. Each entry of the array describes a single IP flow.   # noqa: E501

        :param flow_descs: The flow_descs of this EventNotification1.
        :type flow_descs: List[str]
        """
        if flow_descs is not None and len(flow_descs) < 1:
            raise ValueError("Invalid value for `flow_descs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._flow_descs = flow_descs

    @property
    def f_descs(self):
        """Gets the f_descs of this EventNotification1.

        Contains the UL and/or DL IP flows. Each entry of the array describes a single IP flow.   # noqa: E501

        :return: The f_descs of this EventNotification1.
        :rtype: List[str]
        """
        return self._f_descs

    @f_descs.setter
    def f_descs(self, f_descs):
        """Sets the f_descs of this EventNotification1.

        Contains the UL and/or DL IP flows. Each entry of the array describes a single IP flow.   # noqa: E501

        :param f_descs: The f_descs of this EventNotification1.
        :type f_descs: List[str]
        """
        if f_descs is not None and len(f_descs) > 2:
            raise ValueError("Invalid value for `f_descs`, number of items must be less than or equal to `2`")  # noqa: E501
        if f_descs is not None and len(f_descs) < 1:
            raise ValueError("Invalid value for `f_descs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._f_descs = f_descs

    @property
    def dnn(self):
        """Gets the dnn of this EventNotification1.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :return: The dnn of this EventNotification1.
        :rtype: str
        """
        return self._dnn

    @dnn.setter
    def dnn(self, dnn):
        """Sets the dnn of this EventNotification1.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :param dnn: The dnn of this EventNotification1.
        :type dnn: str
        """

        self._dnn = dnn

    @property
    def snssai(self):
        """Gets the snssai of this EventNotification1.


        :return: The snssai of this EventNotification1.
        :rtype: Snssai
        """
        return self._snssai

    @snssai.setter
    def snssai(self, snssai):
        """Sets the snssai of this EventNotification1.


        :param snssai: The snssai of this EventNotification1.
        :type snssai: Snssai
        """

        self._snssai = snssai

    @property
    def ul_delays(self):
        """Gets the ul_delays of this EventNotification1.


        :return: The ul_delays of this EventNotification1.
        :rtype: List[int]
        """
        return self._ul_delays

    @ul_delays.setter
    def ul_delays(self, ul_delays):
        """Sets the ul_delays of this EventNotification1.


        :param ul_delays: The ul_delays of this EventNotification1.
        :type ul_delays: List[int]
        """
        if ul_delays is not None and len(ul_delays) < 1:
            raise ValueError("Invalid value for `ul_delays`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ul_delays = ul_delays

    @property
    def dl_delays(self):
        """Gets the dl_delays of this EventNotification1.


        :return: The dl_delays of this EventNotification1.
        :rtype: List[int]
        """
        return self._dl_delays

    @dl_delays.setter
    def dl_delays(self, dl_delays):
        """Sets the dl_delays of this EventNotification1.


        :param dl_delays: The dl_delays of this EventNotification1.
        :type dl_delays: List[int]
        """
        if dl_delays is not None and len(dl_delays) < 1:
            raise ValueError("Invalid value for `dl_delays`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._dl_delays = dl_delays

    @property
    def rt_delays(self):
        """Gets the rt_delays of this EventNotification1.


        :return: The rt_delays of this EventNotification1.
        :rtype: List[int]
        """
        return self._rt_delays

    @rt_delays.setter
    def rt_delays(self, rt_delays):
        """Sets the rt_delays of this EventNotification1.


        :param rt_delays: The rt_delays of this EventNotification1.
        :type rt_delays: List[int]
        """
        if rt_delays is not None and len(rt_delays) < 1:
            raise ValueError("Invalid value for `rt_delays`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._rt_delays = rt_delays

    @property
    def time_window(self):
        """Gets the time_window of this EventNotification1.


        :return: The time_window of this EventNotification1.
        :rtype: TimeWindow
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window):
        """Sets the time_window of this EventNotification1.


        :param time_window: The time_window of this EventNotification1.
        :type time_window: TimeWindow
        """

        self._time_window = time_window

    @property
    def sm_nas_from_ue(self):
        """Gets the sm_nas_from_ue of this EventNotification1.


        :return: The sm_nas_from_ue of this EventNotification1.
        :rtype: SmNasFromUe
        """
        return self._sm_nas_from_ue

    @sm_nas_from_ue.setter
    def sm_nas_from_ue(self, sm_nas_from_ue):
        """Sets the sm_nas_from_ue of this EventNotification1.


        :param sm_nas_from_ue: The sm_nas_from_ue of this EventNotification1.
        :type sm_nas_from_ue: SmNasFromUe
        """

        self._sm_nas_from_ue = sm_nas_from_ue

    @property
    def sm_nas_from_smf(self):
        """Gets the sm_nas_from_smf of this EventNotification1.


        :return: The sm_nas_from_smf of this EventNotification1.
        :rtype: SmNasFromSmf
        """
        return self._sm_nas_from_smf

    @sm_nas_from_smf.setter
    def sm_nas_from_smf(self, sm_nas_from_smf):
        """Sets the sm_nas_from_smf of this EventNotification1.


        :param sm_nas_from_smf: The sm_nas_from_smf of this EventNotification1.
        :type sm_nas_from_smf: SmNasFromSmf
        """

        self._sm_nas_from_smf = sm_nas_from_smf

    @property
    def up_red_trans(self):
        """Gets the up_red_trans of this EventNotification1.

        Indicates whether the redundant transmission is setup or terminated. Set to \"true\" if  the redundant transmission is setup, otherwise set to \"false\" if the redundant  transmission is terminated. Default value is set to \"false\".   # noqa: E501

        :return: The up_red_trans of this EventNotification1.
        :rtype: bool
        """
        return self._up_red_trans

    @up_red_trans.setter
    def up_red_trans(self, up_red_trans):
        """Sets the up_red_trans of this EventNotification1.

        Indicates whether the redundant transmission is setup or terminated. Set to \"true\" if  the redundant transmission is setup, otherwise set to \"false\" if the redundant  transmission is terminated. Default value is set to \"false\".   # noqa: E501

        :param up_red_trans: The up_red_trans of this EventNotification1.
        :type up_red_trans: bool
        """

        self._up_red_trans = up_red_trans

    @property
    def ss_id(self):
        """Gets the ss_id of this EventNotification1.


        :return: The ss_id of this EventNotification1.
        :rtype: str
        """
        return self._ss_id

    @ss_id.setter
    def ss_id(self, ss_id):
        """Sets the ss_id of this EventNotification1.


        :param ss_id: The ss_id of this EventNotification1.
        :type ss_id: str
        """

        self._ss_id = ss_id

    @property
    def bss_id(self):
        """Gets the bss_id of this EventNotification1.


        :return: The bss_id of this EventNotification1.
        :rtype: str
        """
        return self._bss_id

    @bss_id.setter
    def bss_id(self, bss_id):
        """Sets the bss_id of this EventNotification1.


        :param bss_id: The bss_id of this EventNotification1.
        :type bss_id: str
        """

        self._bss_id = bss_id

    @property
    def start_wlan(self):
        """Gets the start_wlan of this EventNotification1.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The start_wlan of this EventNotification1.
        :rtype: datetime
        """
        return self._start_wlan

    @start_wlan.setter
    def start_wlan(self, start_wlan):
        """Sets the start_wlan of this EventNotification1.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param start_wlan: The start_wlan of this EventNotification1.
        :type start_wlan: datetime
        """

        self._start_wlan = start_wlan

    @property
    def end_wlan(self):
        """Gets the end_wlan of this EventNotification1.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The end_wlan of this EventNotification1.
        :rtype: datetime
        """
        return self._end_wlan

    @end_wlan.setter
    def end_wlan(self, end_wlan):
        """Sets the end_wlan of this EventNotification1.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param end_wlan: The end_wlan of this EventNotification1.
        :type end_wlan: datetime
        """

        self._end_wlan = end_wlan

    @property
    def pdu_sess_infos(self):
        """Gets the pdu_sess_infos of this EventNotification1.


        :return: The pdu_sess_infos of this EventNotification1.
        :rtype: List[PduSessionInformation]
        """
        return self._pdu_sess_infos

    @pdu_sess_infos.setter
    def pdu_sess_infos(self, pdu_sess_infos):
        """Sets the pdu_sess_infos of this EventNotification1.


        :param pdu_sess_infos: The pdu_sess_infos of this EventNotification1.
        :type pdu_sess_infos: List[PduSessionInformation]
        """
        if pdu_sess_infos is not None and len(pdu_sess_infos) < 1:
            raise ValueError("Invalid value for `pdu_sess_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._pdu_sess_infos = pdu_sess_infos

    @property
    def upf_info(self):
        """Gets the upf_info of this EventNotification1.


        :return: The upf_info of this EventNotification1.
        :rtype: UpfInformation
        """
        return self._upf_info

    @upf_info.setter
    def upf_info(self, upf_info):
        """Sets the upf_info of this EventNotification1.


        :param upf_info: The upf_info of this EventNotification1.
        :type upf_info: UpfInformation
        """

        self._upf_info = upf_info
