# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class NumberAverage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number=None, variance=None):  # noqa: E501
        """NumberAverage - a model defined in OpenAPI

        :param number: The number of this NumberAverage.  # noqa: E501
        :type number: int
        :param variance: The variance of this NumberAverage.  # noqa: E501
        :type variance: float
        """
        self.openapi_types = {
            'number': int,
            'variance': float
        }

        self.attribute_map = {
            'number': 'number',
            'variance': 'variance'
        }

        self.number = number
        self.variance = variance

    @classmethod
    def from_dict(cls, dikt) -> 'NumberAverage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NumberAverage of this NumberAverage.  # noqa: E501
        :rtype: NumberAverage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number(self):
        """Gets the number of this NumberAverage.


        :return: The number of this NumberAverage.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this NumberAverage.


        :param number: The number of this NumberAverage.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def variance(self):
        """Gets the variance of this NumberAverage.

        string with format 'float' as defined in OpenAPI.  # noqa: E501

        :return: The variance of this NumberAverage.
        :rtype: float
        """
        return self._variance

    @variance.setter
    def variance(self, variance):
        """Sets the variance of this NumberAverage.

        string with format 'float' as defined in OpenAPI.  # noqa: E501

        :param variance: The variance of this NumberAverage.
        :type variance: float
        """
        if variance is None:
            raise ValueError("Invalid value for `variance`, must not be `None`")  # noqa: E501

        self._variance = variance
