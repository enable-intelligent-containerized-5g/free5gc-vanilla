# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.nnwdaf_events_subscription import NnwdafEventsSubscription
from openapi_server import util

from openapi_server.models.nnwdaf_events_subscription import NnwdafEventsSubscription  # noqa: E501

class SpecificAnalyticsSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscription_id=None, producer_id=None, producer_set_id=None, nwdaf_ev_sub=None):  # noqa: E501
        """SpecificAnalyticsSubscription - a model defined in OpenAPI

        :param subscription_id: The subscription_id of this SpecificAnalyticsSubscription.  # noqa: E501
        :type subscription_id: str
        :param producer_id: The producer_id of this SpecificAnalyticsSubscription.  # noqa: E501
        :type producer_id: str
        :param producer_set_id: The producer_set_id of this SpecificAnalyticsSubscription.  # noqa: E501
        :type producer_set_id: str
        :param nwdaf_ev_sub: The nwdaf_ev_sub of this SpecificAnalyticsSubscription.  # noqa: E501
        :type nwdaf_ev_sub: NnwdafEventsSubscription
        """
        self.openapi_types = {
            'subscription_id': str,
            'producer_id': str,
            'producer_set_id': str,
            'nwdaf_ev_sub': NnwdafEventsSubscription
        }

        self.attribute_map = {
            'subscription_id': 'subscriptionId',
            'producer_id': 'producerId',
            'producer_set_id': 'producerSetId',
            'nwdaf_ev_sub': 'nwdafEvSub'
        }

        self.subscription_id = subscription_id
        self.producer_id = producer_id
        self.producer_set_id = producer_set_id
        self.nwdaf_ev_sub = nwdaf_ev_sub

    @classmethod
    def from_dict(cls, dikt) -> 'SpecificAnalyticsSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SpecificAnalyticsSubscription of this SpecificAnalyticsSubscription.  # noqa: E501
        :rtype: SpecificAnalyticsSubscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SpecificAnalyticsSubscription.


        :return: The subscription_id of this SpecificAnalyticsSubscription.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SpecificAnalyticsSubscription.


        :param subscription_id: The subscription_id of this SpecificAnalyticsSubscription.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def producer_id(self):
        """Gets the producer_id of this SpecificAnalyticsSubscription.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :return: The producer_id of this SpecificAnalyticsSubscription.
        :rtype: str
        """
        return self._producer_id

    @producer_id.setter
    def producer_id(self, producer_id):
        """Sets the producer_id of this SpecificAnalyticsSubscription.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :param producer_id: The producer_id of this SpecificAnalyticsSubscription.
        :type producer_id: str
        """

        self._producer_id = producer_id

    @property
    def producer_set_id(self):
        """Gets the producer_set_id of this SpecificAnalyticsSubscription.

        NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.    # noqa: E501

        :return: The producer_set_id of this SpecificAnalyticsSubscription.
        :rtype: str
        """
        return self._producer_set_id

    @producer_set_id.setter
    def producer_set_id(self, producer_set_id):
        """Sets the producer_set_id of this SpecificAnalyticsSubscription.

        NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.    # noqa: E501

        :param producer_set_id: The producer_set_id of this SpecificAnalyticsSubscription.
        :type producer_set_id: str
        """

        self._producer_set_id = producer_set_id

    @property
    def nwdaf_ev_sub(self):
        """Gets the nwdaf_ev_sub of this SpecificAnalyticsSubscription.


        :return: The nwdaf_ev_sub of this SpecificAnalyticsSubscription.
        :rtype: NnwdafEventsSubscription
        """
        return self._nwdaf_ev_sub

    @nwdaf_ev_sub.setter
    def nwdaf_ev_sub(self, nwdaf_ev_sub):
        """Sets the nwdaf_ev_sub of this SpecificAnalyticsSubscription.


        :param nwdaf_ev_sub: The nwdaf_ev_sub of this SpecificAnalyticsSubscription.
        :type nwdaf_ev_sub: NnwdafEventsSubscription
        """

        self._nwdaf_ev_sub = nwdaf_ev_sub
