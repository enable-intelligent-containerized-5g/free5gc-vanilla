# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UsageThreshold(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration=None, total_volume=None, downlink_volume=None, uplink_volume=None):  # noqa: E501
        """UsageThreshold - a model defined in OpenAPI

        :param duration: The duration of this UsageThreshold.  # noqa: E501
        :type duration: int
        :param total_volume: The total_volume of this UsageThreshold.  # noqa: E501
        :type total_volume: int
        :param downlink_volume: The downlink_volume of this UsageThreshold.  # noqa: E501
        :type downlink_volume: int
        :param uplink_volume: The uplink_volume of this UsageThreshold.  # noqa: E501
        :type uplink_volume: int
        """
        self.openapi_types = {
            'duration': int,
            'total_volume': int,
            'downlink_volume': int,
            'uplink_volume': int
        }

        self.attribute_map = {
            'duration': 'duration',
            'total_volume': 'totalVolume',
            'downlink_volume': 'downlinkVolume',
            'uplink_volume': 'uplinkVolume'
        }

        self.duration = duration
        self.total_volume = total_volume
        self.downlink_volume = downlink_volume
        self.uplink_volume = uplink_volume

    @classmethod
    def from_dict(cls, dikt) -> 'UsageThreshold':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UsageThreshold of this UsageThreshold.  # noqa: E501
        :rtype: UsageThreshold
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this UsageThreshold.

        Unsigned integer identifying a period of time in units of seconds.  # noqa: E501

        :return: The duration of this UsageThreshold.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this UsageThreshold.

        Unsigned integer identifying a period of time in units of seconds.  # noqa: E501

        :param duration: The duration of this UsageThreshold.
        :type duration: int
        """
        if duration is not None and duration < 0:  # noqa: E501
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `0`")  # noqa: E501

        self._duration = duration

    @property
    def total_volume(self):
        """Gets the total_volume of this UsageThreshold.

        Unsigned integer identifying a volume in units of bytes.  # noqa: E501

        :return: The total_volume of this UsageThreshold.
        :rtype: int
        """
        return self._total_volume

    @total_volume.setter
    def total_volume(self, total_volume):
        """Sets the total_volume of this UsageThreshold.

        Unsigned integer identifying a volume in units of bytes.  # noqa: E501

        :param total_volume: The total_volume of this UsageThreshold.
        :type total_volume: int
        """
        if total_volume is not None and total_volume < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_volume`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_volume = total_volume

    @property
    def downlink_volume(self):
        """Gets the downlink_volume of this UsageThreshold.

        Unsigned integer identifying a volume in units of bytes.  # noqa: E501

        :return: The downlink_volume of this UsageThreshold.
        :rtype: int
        """
        return self._downlink_volume

    @downlink_volume.setter
    def downlink_volume(self, downlink_volume):
        """Sets the downlink_volume of this UsageThreshold.

        Unsigned integer identifying a volume in units of bytes.  # noqa: E501

        :param downlink_volume: The downlink_volume of this UsageThreshold.
        :type downlink_volume: int
        """
        if downlink_volume is not None and downlink_volume < 0:  # noqa: E501
            raise ValueError("Invalid value for `downlink_volume`, must be a value greater than or equal to `0`")  # noqa: E501

        self._downlink_volume = downlink_volume

    @property
    def uplink_volume(self):
        """Gets the uplink_volume of this UsageThreshold.

        Unsigned integer identifying a volume in units of bytes.  # noqa: E501

        :return: The uplink_volume of this UsageThreshold.
        :rtype: int
        """
        return self._uplink_volume

    @uplink_volume.setter
    def uplink_volume(self, uplink_volume):
        """Sets the uplink_volume of this UsageThreshold.

        Unsigned integer identifying a volume in units of bytes.  # noqa: E501

        :param uplink_volume: The uplink_volume of this UsageThreshold.
        :type uplink_volume: int
        """
        if uplink_volume is not None and uplink_volume < 0:  # noqa: E501
            raise ValueError("Invalid value for `uplink_volume`, must be a value greater than or equal to `0`")  # noqa: E501

        self._uplink_volume = uplink_volume
