# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AmfEventSubscriptionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sub_id=None, notify_correlation_id=None, ref_id_list=None, old_sub_id=None):  # noqa: E501
        """AmfEventSubscriptionInfo - a model defined in OpenAPI

        :param sub_id: The sub_id of this AmfEventSubscriptionInfo.  # noqa: E501
        :type sub_id: str
        :param notify_correlation_id: The notify_correlation_id of this AmfEventSubscriptionInfo.  # noqa: E501
        :type notify_correlation_id: str
        :param ref_id_list: The ref_id_list of this AmfEventSubscriptionInfo.  # noqa: E501
        :type ref_id_list: List[int]
        :param old_sub_id: The old_sub_id of this AmfEventSubscriptionInfo.  # noqa: E501
        :type old_sub_id: str
        """
        self.openapi_types = {
            'sub_id': str,
            'notify_correlation_id': str,
            'ref_id_list': List[int],
            'old_sub_id': str
        }

        self.attribute_map = {
            'sub_id': 'subId',
            'notify_correlation_id': 'notifyCorrelationId',
            'ref_id_list': 'refIdList',
            'old_sub_id': 'oldSubId'
        }

        self.sub_id = sub_id
        self.notify_correlation_id = notify_correlation_id
        self.ref_id_list = ref_id_list
        self.old_sub_id = old_sub_id

    @classmethod
    def from_dict(cls, dikt) -> 'AmfEventSubscriptionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AmfEventSubscriptionInfo of this AmfEventSubscriptionInfo.  # noqa: E501
        :rtype: AmfEventSubscriptionInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sub_id(self):
        """Gets the sub_id of this AmfEventSubscriptionInfo.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The sub_id of this AmfEventSubscriptionInfo.
        :rtype: str
        """
        return self._sub_id

    @sub_id.setter
    def sub_id(self, sub_id):
        """Sets the sub_id of this AmfEventSubscriptionInfo.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param sub_id: The sub_id of this AmfEventSubscriptionInfo.
        :type sub_id: str
        """
        if sub_id is None:
            raise ValueError("Invalid value for `sub_id`, must not be `None`")  # noqa: E501

        self._sub_id = sub_id

    @property
    def notify_correlation_id(self):
        """Gets the notify_correlation_id of this AmfEventSubscriptionInfo.


        :return: The notify_correlation_id of this AmfEventSubscriptionInfo.
        :rtype: str
        """
        return self._notify_correlation_id

    @notify_correlation_id.setter
    def notify_correlation_id(self, notify_correlation_id):
        """Sets the notify_correlation_id of this AmfEventSubscriptionInfo.


        :param notify_correlation_id: The notify_correlation_id of this AmfEventSubscriptionInfo.
        :type notify_correlation_id: str
        """

        self._notify_correlation_id = notify_correlation_id

    @property
    def ref_id_list(self):
        """Gets the ref_id_list of this AmfEventSubscriptionInfo.


        :return: The ref_id_list of this AmfEventSubscriptionInfo.
        :rtype: List[int]
        """
        return self._ref_id_list

    @ref_id_list.setter
    def ref_id_list(self, ref_id_list):
        """Sets the ref_id_list of this AmfEventSubscriptionInfo.


        :param ref_id_list: The ref_id_list of this AmfEventSubscriptionInfo.
        :type ref_id_list: List[int]
        """
        if ref_id_list is None:
            raise ValueError("Invalid value for `ref_id_list`, must not be `None`")  # noqa: E501
        if ref_id_list is not None and len(ref_id_list) < 1:
            raise ValueError("Invalid value for `ref_id_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ref_id_list = ref_id_list

    @property
    def old_sub_id(self):
        """Gets the old_sub_id of this AmfEventSubscriptionInfo.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The old_sub_id of this AmfEventSubscriptionInfo.
        :rtype: str
        """
        return self._old_sub_id

    @old_sub_id.setter
    def old_sub_id(self, old_sub_id):
        """Sets the old_sub_id of this AmfEventSubscriptionInfo.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param old_sub_id: The old_sub_id of this AmfEventSubscriptionInfo.
        :type old_sub_id: str
        """

        self._old_sub_id = old_sub_id
