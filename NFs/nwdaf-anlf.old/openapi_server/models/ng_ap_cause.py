# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class NgApCause(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group=None, value=None):  # noqa: E501
        """NgApCause - a model defined in OpenAPI

        :param group: The group of this NgApCause.  # noqa: E501
        :type group: int
        :param value: The value of this NgApCause.  # noqa: E501
        :type value: int
        """
        self.openapi_types = {
            'group': int,
            'value': int
        }

        self.attribute_map = {
            'group': 'group',
            'value': 'value'
        }

        self.group = group
        self.value = value

    @classmethod
    def from_dict(cls, dikt) -> 'NgApCause':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NgApCause of this NgApCause.  # noqa: E501
        :rtype: NgApCause
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self):
        """Gets the group of this NgApCause.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The group of this NgApCause.
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this NgApCause.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param group: The group of this NgApCause.
        :type group: int
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")  # noqa: E501
        if group is not None and group < 0:  # noqa: E501
            raise ValueError("Invalid value for `group`, must be a value greater than or equal to `0`")  # noqa: E501

        self._group = group

    @property
    def value(self):
        """Gets the value of this NgApCause.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The value of this NgApCause.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this NgApCause.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param value: The value of this NgApCause.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        if value is not None and value < 0:  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a value greater than or equal to `0`")  # noqa: E501

        self._value = value
