# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.addr_fqdn import AddrFqdn
from openapi_server.models.service_experience_info_per_flow import ServiceExperienceInfoPerFlow
from openapi_server import util

from openapi_server.models.addr_fqdn import AddrFqdn  # noqa: E501
from openapi_server.models.service_experience_info_per_flow import ServiceExperienceInfoPerFlow  # noqa: E501

class ServiceExperienceInfoPerApp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id=None, app_server_ins=None, svc_exp_per_flows=None, gpsis=None, supis=None):  # noqa: E501
        """ServiceExperienceInfoPerApp - a model defined in OpenAPI

        :param app_id: The app_id of this ServiceExperienceInfoPerApp.  # noqa: E501
        :type app_id: str
        :param app_server_ins: The app_server_ins of this ServiceExperienceInfoPerApp.  # noqa: E501
        :type app_server_ins: AddrFqdn
        :param svc_exp_per_flows: The svc_exp_per_flows of this ServiceExperienceInfoPerApp.  # noqa: E501
        :type svc_exp_per_flows: List[ServiceExperienceInfoPerFlow]
        :param gpsis: The gpsis of this ServiceExperienceInfoPerApp.  # noqa: E501
        :type gpsis: List[str]
        :param supis: The supis of this ServiceExperienceInfoPerApp.  # noqa: E501
        :type supis: List[str]
        """
        self.openapi_types = {
            'app_id': str,
            'app_server_ins': AddrFqdn,
            'svc_exp_per_flows': List[ServiceExperienceInfoPerFlow],
            'gpsis': List[str],
            'supis': List[str]
        }

        self.attribute_map = {
            'app_id': 'appId',
            'app_server_ins': 'appServerIns',
            'svc_exp_per_flows': 'svcExpPerFlows',
            'gpsis': 'gpsis',
            'supis': 'supis'
        }

        self.app_id = app_id
        self.app_server_ins = app_server_ins
        self.svc_exp_per_flows = svc_exp_per_flows
        self.gpsis = gpsis
        self.supis = supis

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceExperienceInfoPerApp':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceExperienceInfoPerApp of this ServiceExperienceInfoPerApp.  # noqa: E501
        :rtype: ServiceExperienceInfoPerApp
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this ServiceExperienceInfoPerApp.

        String providing an application identifier.  # noqa: E501

        :return: The app_id of this ServiceExperienceInfoPerApp.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ServiceExperienceInfoPerApp.

        String providing an application identifier.  # noqa: E501

        :param app_id: The app_id of this ServiceExperienceInfoPerApp.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def app_server_ins(self):
        """Gets the app_server_ins of this ServiceExperienceInfoPerApp.


        :return: The app_server_ins of this ServiceExperienceInfoPerApp.
        :rtype: AddrFqdn
        """
        return self._app_server_ins

    @app_server_ins.setter
    def app_server_ins(self, app_server_ins):
        """Sets the app_server_ins of this ServiceExperienceInfoPerApp.


        :param app_server_ins: The app_server_ins of this ServiceExperienceInfoPerApp.
        :type app_server_ins: AddrFqdn
        """

        self._app_server_ins = app_server_ins

    @property
    def svc_exp_per_flows(self):
        """Gets the svc_exp_per_flows of this ServiceExperienceInfoPerApp.


        :return: The svc_exp_per_flows of this ServiceExperienceInfoPerApp.
        :rtype: List[ServiceExperienceInfoPerFlow]
        """
        return self._svc_exp_per_flows

    @svc_exp_per_flows.setter
    def svc_exp_per_flows(self, svc_exp_per_flows):
        """Sets the svc_exp_per_flows of this ServiceExperienceInfoPerApp.


        :param svc_exp_per_flows: The svc_exp_per_flows of this ServiceExperienceInfoPerApp.
        :type svc_exp_per_flows: List[ServiceExperienceInfoPerFlow]
        """
        if svc_exp_per_flows is None:
            raise ValueError("Invalid value for `svc_exp_per_flows`, must not be `None`")  # noqa: E501
        if svc_exp_per_flows is not None and len(svc_exp_per_flows) < 1:
            raise ValueError("Invalid value for `svc_exp_per_flows`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._svc_exp_per_flows = svc_exp_per_flows

    @property
    def gpsis(self):
        """Gets the gpsis of this ServiceExperienceInfoPerApp.


        :return: The gpsis of this ServiceExperienceInfoPerApp.
        :rtype: List[str]
        """
        return self._gpsis

    @gpsis.setter
    def gpsis(self, gpsis):
        """Sets the gpsis of this ServiceExperienceInfoPerApp.


        :param gpsis: The gpsis of this ServiceExperienceInfoPerApp.
        :type gpsis: List[str]
        """
        if gpsis is not None and len(gpsis) < 1:
            raise ValueError("Invalid value for `gpsis`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._gpsis = gpsis

    @property
    def supis(self):
        """Gets the supis of this ServiceExperienceInfoPerApp.


        :return: The supis of this ServiceExperienceInfoPerApp.
        :rtype: List[str]
        """
        return self._supis

    @supis.setter
    def supis(self, supis):
        """Sets the supis of this ServiceExperienceInfoPerApp.


        :param supis: The supis of this ServiceExperienceInfoPerApp.
        :type supis: List[str]
        """
        if supis is not None and len(supis) < 1:
            raise ValueError("Invalid value for `supis`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supis = supis
