# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.global_ran_node_id import GlobalRanNodeId
from openapi_server.models.ncgi import Ncgi
from openapi_server.models.tai import Tai
import re
from openapi_server import util

from openapi_server.models.global_ran_node_id import GlobalRanNodeId  # noqa: E501
from openapi_server.models.ncgi import Ncgi  # noqa: E501
from openapi_server.models.tai import Tai  # noqa: E501
import re  # noqa: E501

class NrLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tai=None, ncgi=None, ignore_ncgi=False, age_of_location_information=None, ue_location_timestamp=None, geographical_information=None, geodetic_information=None, global_gnb_id=None):  # noqa: E501
        """NrLocation - a model defined in OpenAPI

        :param tai: The tai of this NrLocation.  # noqa: E501
        :type tai: Tai
        :param ncgi: The ncgi of this NrLocation.  # noqa: E501
        :type ncgi: Ncgi
        :param ignore_ncgi: The ignore_ncgi of this NrLocation.  # noqa: E501
        :type ignore_ncgi: bool
        :param age_of_location_information: The age_of_location_information of this NrLocation.  # noqa: E501
        :type age_of_location_information: int
        :param ue_location_timestamp: The ue_location_timestamp of this NrLocation.  # noqa: E501
        :type ue_location_timestamp: datetime
        :param geographical_information: The geographical_information of this NrLocation.  # noqa: E501
        :type geographical_information: str
        :param geodetic_information: The geodetic_information of this NrLocation.  # noqa: E501
        :type geodetic_information: str
        :param global_gnb_id: The global_gnb_id of this NrLocation.  # noqa: E501
        :type global_gnb_id: GlobalRanNodeId
        """
        self.openapi_types = {
            'tai': Tai,
            'ncgi': Ncgi,
            'ignore_ncgi': bool,
            'age_of_location_information': int,
            'ue_location_timestamp': datetime,
            'geographical_information': str,
            'geodetic_information': str,
            'global_gnb_id': GlobalRanNodeId
        }

        self.attribute_map = {
            'tai': 'tai',
            'ncgi': 'ncgi',
            'ignore_ncgi': 'ignoreNcgi',
            'age_of_location_information': 'ageOfLocationInformation',
            'ue_location_timestamp': 'ueLocationTimestamp',
            'geographical_information': 'geographicalInformation',
            'geodetic_information': 'geodeticInformation',
            'global_gnb_id': 'globalGnbId'
        }

        self.tai = tai
        self.ncgi = ncgi
        self.ignore_ncgi = ignore_ncgi
        self.age_of_location_information = age_of_location_information
        self.ue_location_timestamp = ue_location_timestamp
        self.geographical_information = geographical_information
        self.geodetic_information = geodetic_information
        self.global_gnb_id = global_gnb_id

    @classmethod
    def from_dict(cls, dikt) -> 'NrLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NrLocation of this NrLocation.  # noqa: E501
        :rtype: NrLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tai(self):
        """Gets the tai of this NrLocation.


        :return: The tai of this NrLocation.
        :rtype: Tai
        """
        return self._tai

    @tai.setter
    def tai(self, tai):
        """Sets the tai of this NrLocation.


        :param tai: The tai of this NrLocation.
        :type tai: Tai
        """
        if tai is None:
            raise ValueError("Invalid value for `tai`, must not be `None`")  # noqa: E501

        self._tai = tai

    @property
    def ncgi(self):
        """Gets the ncgi of this NrLocation.


        :return: The ncgi of this NrLocation.
        :rtype: Ncgi
        """
        return self._ncgi

    @ncgi.setter
    def ncgi(self, ncgi):
        """Sets the ncgi of this NrLocation.


        :param ncgi: The ncgi of this NrLocation.
        :type ncgi: Ncgi
        """
        if ncgi is None:
            raise ValueError("Invalid value for `ncgi`, must not be `None`")  # noqa: E501

        self._ncgi = ncgi

    @property
    def ignore_ncgi(self):
        """Gets the ignore_ncgi of this NrLocation.


        :return: The ignore_ncgi of this NrLocation.
        :rtype: bool
        """
        return self._ignore_ncgi

    @ignore_ncgi.setter
    def ignore_ncgi(self, ignore_ncgi):
        """Sets the ignore_ncgi of this NrLocation.


        :param ignore_ncgi: The ignore_ncgi of this NrLocation.
        :type ignore_ncgi: bool
        """

        self._ignore_ncgi = ignore_ncgi

    @property
    def age_of_location_information(self):
        """Gets the age_of_location_information of this NrLocation.

        The value represents the elapsed time in minutes since the last network contact of the mobile station. Value \"0\" indicates that the location information was obtained after a successful paging procedure for Active Location Retrieval when the UE is in idle mode or after a successful  NG-RAN location reporting procedure with the eNB when the UE is in connected mode. Any other value than \"0\" indicates that the location information is the last known one. See 3GPP TS 29.002 clause 17.7.8.   # noqa: E501

        :return: The age_of_location_information of this NrLocation.
        :rtype: int
        """
        return self._age_of_location_information

    @age_of_location_information.setter
    def age_of_location_information(self, age_of_location_information):
        """Sets the age_of_location_information of this NrLocation.

        The value represents the elapsed time in minutes since the last network contact of the mobile station. Value \"0\" indicates that the location information was obtained after a successful paging procedure for Active Location Retrieval when the UE is in idle mode or after a successful  NG-RAN location reporting procedure with the eNB when the UE is in connected mode. Any other value than \"0\" indicates that the location information is the last known one. See 3GPP TS 29.002 clause 17.7.8.   # noqa: E501

        :param age_of_location_information: The age_of_location_information of this NrLocation.
        :type age_of_location_information: int
        """
        if age_of_location_information is not None and age_of_location_information > 32767:  # noqa: E501
            raise ValueError("Invalid value for `age_of_location_information`, must be a value less than or equal to `32767`")  # noqa: E501
        if age_of_location_information is not None and age_of_location_information < 0:  # noqa: E501
            raise ValueError("Invalid value for `age_of_location_information`, must be a value greater than or equal to `0`")  # noqa: E501

        self._age_of_location_information = age_of_location_information

    @property
    def ue_location_timestamp(self):
        """Gets the ue_location_timestamp of this NrLocation.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The ue_location_timestamp of this NrLocation.
        :rtype: datetime
        """
        return self._ue_location_timestamp

    @ue_location_timestamp.setter
    def ue_location_timestamp(self, ue_location_timestamp):
        """Sets the ue_location_timestamp of this NrLocation.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param ue_location_timestamp: The ue_location_timestamp of this NrLocation.
        :type ue_location_timestamp: datetime
        """

        self._ue_location_timestamp = ue_location_timestamp

    @property
    def geographical_information(self):
        """Gets the geographical_information of this NrLocation.

        Refer to geographical Information. See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.   # noqa: E501

        :return: The geographical_information of this NrLocation.
        :rtype: str
        """
        return self._geographical_information

    @geographical_information.setter
    def geographical_information(self, geographical_information):
        """Sets the geographical_information of this NrLocation.

        Refer to geographical Information. See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.   # noqa: E501

        :param geographical_information: The geographical_information of this NrLocation.
        :type geographical_information: str
        """
        if geographical_information is not None and not re.search(r'^[0-9A-F]{16}$', geographical_information):  # noqa: E501
            raise ValueError("Invalid value for `geographical_information`, must be a follow pattern or equal to `/^[0-9A-F]{16}$/`")  # noqa: E501

        self._geographical_information = geographical_information

    @property
    def geodetic_information(self):
        """Gets the geodetic_information of this NrLocation.

        Refers to Calling Geodetic Location. See ITU-T Recommendation Q.763 (1999) [24] clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.   # noqa: E501

        :return: The geodetic_information of this NrLocation.
        :rtype: str
        """
        return self._geodetic_information

    @geodetic_information.setter
    def geodetic_information(self, geodetic_information):
        """Sets the geodetic_information of this NrLocation.

        Refers to Calling Geodetic Location. See ITU-T Recommendation Q.763 (1999) [24] clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.   # noqa: E501

        :param geodetic_information: The geodetic_information of this NrLocation.
        :type geodetic_information: str
        """
        if geodetic_information is not None and not re.search(r'^[0-9A-F]{20}$', geodetic_information):  # noqa: E501
            raise ValueError("Invalid value for `geodetic_information`, must be a follow pattern or equal to `/^[0-9A-F]{20}$/`")  # noqa: E501

        self._geodetic_information = geodetic_information

    @property
    def global_gnb_id(self):
        """Gets the global_gnb_id of this NrLocation.


        :return: The global_gnb_id of this NrLocation.
        :rtype: GlobalRanNodeId
        """
        return self._global_gnb_id

    @global_gnb_id.setter
    def global_gnb_id(self, global_gnb_id):
        """Sets the global_gnb_id of this NrLocation.


        :param global_gnb_id: The global_gnb_id of this NrLocation.
        :type global_gnb_id: GlobalRanNodeId
        """

        self._global_gnb_id = global_gnb_id
