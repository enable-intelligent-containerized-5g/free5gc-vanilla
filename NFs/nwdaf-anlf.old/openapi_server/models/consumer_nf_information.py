# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.tai import Tai
from openapi_server import util

from openapi_server.models.tai import Tai  # noqa: E501

class ConsumerNfInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nf_id=None, nf_set_id=None, tai_list=None):  # noqa: E501
        """ConsumerNfInformation - a model defined in OpenAPI

        :param nf_id: The nf_id of this ConsumerNfInformation.  # noqa: E501
        :type nf_id: str
        :param nf_set_id: The nf_set_id of this ConsumerNfInformation.  # noqa: E501
        :type nf_set_id: str
        :param tai_list: The tai_list of this ConsumerNfInformation.  # noqa: E501
        :type tai_list: List[Tai]
        """
        self.openapi_types = {
            'nf_id': str,
            'nf_set_id': str,
            'tai_list': List[Tai]
        }

        self.attribute_map = {
            'nf_id': 'nfId',
            'nf_set_id': 'nfSetId',
            'tai_list': 'taiList'
        }

        self.nf_id = nf_id
        self.nf_set_id = nf_set_id
        self.tai_list = tai_list

    @classmethod
    def from_dict(cls, dikt) -> 'ConsumerNfInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConsumerNfInformation of this ConsumerNfInformation.  # noqa: E501
        :rtype: ConsumerNfInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nf_id(self):
        """Gets the nf_id of this ConsumerNfInformation.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :return: The nf_id of this ConsumerNfInformation.
        :rtype: str
        """
        return self._nf_id

    @nf_id.setter
    def nf_id(self, nf_id):
        """Sets the nf_id of this ConsumerNfInformation.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :param nf_id: The nf_id of this ConsumerNfInformation.
        :type nf_id: str
        """

        self._nf_id = nf_id

    @property
    def nf_set_id(self):
        """Gets the nf_set_id of this ConsumerNfInformation.

        NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.    # noqa: E501

        :return: The nf_set_id of this ConsumerNfInformation.
        :rtype: str
        """
        return self._nf_set_id

    @nf_set_id.setter
    def nf_set_id(self, nf_set_id):
        """Sets the nf_set_id of this ConsumerNfInformation.

        NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.    # noqa: E501

        :param nf_set_id: The nf_set_id of this ConsumerNfInformation.
        :type nf_set_id: str
        """

        self._nf_set_id = nf_set_id

    @property
    def tai_list(self):
        """Gets the tai_list of this ConsumerNfInformation.


        :return: The tai_list of this ConsumerNfInformation.
        :rtype: List[Tai]
        """
        return self._tai_list

    @tai_list.setter
    def tai_list(self, tai_list):
        """Sets the tai_list of this ConsumerNfInformation.


        :param tai_list: The tai_list of this ConsumerNfInformation.
        :type tai_list: List[Tai]
        """
        if tai_list is not None and len(tai_list) < 1:
            raise ValueError("Invalid value for `tai_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tai_list = tai_list
