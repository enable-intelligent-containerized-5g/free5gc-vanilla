# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.adrf_data_type import AdrfDataType
from openapi_server.models.analytics_context_identifier import AnalyticsContextIdentifier
from openapi_server.models.event_notification import EventNotification
from openapi_server.models.historical_data import HistoricalData
from openapi_server.models.model_info import ModelInfo
from openapi_server.models.specific_analytics_subscription import SpecificAnalyticsSubscription
from openapi_server import util

from openapi_server.models.adrf_data_type import AdrfDataType  # noqa: E501
from openapi_server.models.analytics_context_identifier import AnalyticsContextIdentifier  # noqa: E501
from openapi_server.models.event_notification import EventNotification  # noqa: E501
from openapi_server.models.historical_data import HistoricalData  # noqa: E501
from openapi_server.models.model_info import ModelInfo  # noqa: E501
from openapi_server.models.specific_analytics_subscription import SpecificAnalyticsSubscription  # noqa: E501

class ContextElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context_id=None, pend_analytics=None, hist_analytics=None, last_output_time=None, aggr_subs=None, hist_data=None, adrf_id=None, adrf_data_types=None, aggr_nwdaf_ids=None, model_info=None):  # noqa: E501
        """ContextElement - a model defined in OpenAPI

        :param context_id: The context_id of this ContextElement.  # noqa: E501
        :type context_id: AnalyticsContextIdentifier
        :param pend_analytics: The pend_analytics of this ContextElement.  # noqa: E501
        :type pend_analytics: List[EventNotification]
        :param hist_analytics: The hist_analytics of this ContextElement.  # noqa: E501
        :type hist_analytics: List[EventNotification]
        :param last_output_time: The last_output_time of this ContextElement.  # noqa: E501
        :type last_output_time: datetime
        :param aggr_subs: The aggr_subs of this ContextElement.  # noqa: E501
        :type aggr_subs: List[SpecificAnalyticsSubscription]
        :param hist_data: The hist_data of this ContextElement.  # noqa: E501
        :type hist_data: List[HistoricalData]
        :param adrf_id: The adrf_id of this ContextElement.  # noqa: E501
        :type adrf_id: str
        :param adrf_data_types: The adrf_data_types of this ContextElement.  # noqa: E501
        :type adrf_data_types: List[AdrfDataType]
        :param aggr_nwdaf_ids: The aggr_nwdaf_ids of this ContextElement.  # noqa: E501
        :type aggr_nwdaf_ids: List[str]
        :param model_info: The model_info of this ContextElement.  # noqa: E501
        :type model_info: List[ModelInfo]
        """
        self.openapi_types = {
            'context_id': AnalyticsContextIdentifier,
            'pend_analytics': List[EventNotification],
            'hist_analytics': List[EventNotification],
            'last_output_time': datetime,
            'aggr_subs': List[SpecificAnalyticsSubscription],
            'hist_data': List[HistoricalData],
            'adrf_id': str,
            'adrf_data_types': List[AdrfDataType],
            'aggr_nwdaf_ids': List[str],
            'model_info': List[ModelInfo]
        }

        self.attribute_map = {
            'context_id': 'contextId',
            'pend_analytics': 'pendAnalytics',
            'hist_analytics': 'histAnalytics',
            'last_output_time': 'lastOutputTime',
            'aggr_subs': 'aggrSubs',
            'hist_data': 'histData',
            'adrf_id': 'adrfId',
            'adrf_data_types': 'adrfDataTypes',
            'aggr_nwdaf_ids': 'aggrNwdafIds',
            'model_info': 'modelInfo'
        }

        self.context_id = context_id
        self.pend_analytics = pend_analytics
        self.hist_analytics = hist_analytics
        self.last_output_time = last_output_time
        self.aggr_subs = aggr_subs
        self.hist_data = hist_data
        self.adrf_id = adrf_id
        self.adrf_data_types = adrf_data_types
        self.aggr_nwdaf_ids = aggr_nwdaf_ids
        self.model_info = model_info

    @classmethod
    def from_dict(cls, dikt) -> 'ContextElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ContextElement of this ContextElement.  # noqa: E501
        :rtype: ContextElement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context_id(self):
        """Gets the context_id of this ContextElement.


        :return: The context_id of this ContextElement.
        :rtype: AnalyticsContextIdentifier
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this ContextElement.


        :param context_id: The context_id of this ContextElement.
        :type context_id: AnalyticsContextIdentifier
        """
        if context_id is None:
            raise ValueError("Invalid value for `context_id`, must not be `None`")  # noqa: E501

        self._context_id = context_id

    @property
    def pend_analytics(self):
        """Gets the pend_analytics of this ContextElement.

        Output analytics for the analytics subscription which have not yet been sent to the  analytics consumer.   # noqa: E501

        :return: The pend_analytics of this ContextElement.
        :rtype: List[EventNotification]
        """
        return self._pend_analytics

    @pend_analytics.setter
    def pend_analytics(self, pend_analytics):
        """Sets the pend_analytics of this ContextElement.

        Output analytics for the analytics subscription which have not yet been sent to the  analytics consumer.   # noqa: E501

        :param pend_analytics: The pend_analytics of this ContextElement.
        :type pend_analytics: List[EventNotification]
        """
        if pend_analytics is not None and len(pend_analytics) < 1:
            raise ValueError("Invalid value for `pend_analytics`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._pend_analytics = pend_analytics

    @property
    def hist_analytics(self):
        """Gets the hist_analytics of this ContextElement.

        Historical output analytics.  # noqa: E501

        :return: The hist_analytics of this ContextElement.
        :rtype: List[EventNotification]
        """
        return self._hist_analytics

    @hist_analytics.setter
    def hist_analytics(self, hist_analytics):
        """Sets the hist_analytics of this ContextElement.

        Historical output analytics.  # noqa: E501

        :param hist_analytics: The hist_analytics of this ContextElement.
        :type hist_analytics: List[EventNotification]
        """
        if hist_analytics is not None and len(hist_analytics) < 1:
            raise ValueError("Invalid value for `hist_analytics`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._hist_analytics = hist_analytics

    @property
    def last_output_time(self):
        """Gets the last_output_time of this ContextElement.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The last_output_time of this ContextElement.
        :rtype: datetime
        """
        return self._last_output_time

    @last_output_time.setter
    def last_output_time(self, last_output_time):
        """Sets the last_output_time of this ContextElement.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param last_output_time: The last_output_time of this ContextElement.
        :type last_output_time: datetime
        """

        self._last_output_time = last_output_time

    @property
    def aggr_subs(self):
        """Gets the aggr_subs of this ContextElement.

        Information about analytics subscriptions that the NWDAF has with other NWDAFs to perform  aggregation.   # noqa: E501

        :return: The aggr_subs of this ContextElement.
        :rtype: List[SpecificAnalyticsSubscription]
        """
        return self._aggr_subs

    @aggr_subs.setter
    def aggr_subs(self, aggr_subs):
        """Sets the aggr_subs of this ContextElement.

        Information about analytics subscriptions that the NWDAF has with other NWDAFs to perform  aggregation.   # noqa: E501

        :param aggr_subs: The aggr_subs of this ContextElement.
        :type aggr_subs: List[SpecificAnalyticsSubscription]
        """
        if aggr_subs is not None and len(aggr_subs) < 1:
            raise ValueError("Invalid value for `aggr_subs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._aggr_subs = aggr_subs

    @property
    def hist_data(self):
        """Gets the hist_data of this ContextElement.

        Historical data related to the analytics subscription.  # noqa: E501

        :return: The hist_data of this ContextElement.
        :rtype: List[HistoricalData]
        """
        return self._hist_data

    @hist_data.setter
    def hist_data(self, hist_data):
        """Sets the hist_data of this ContextElement.

        Historical data related to the analytics subscription.  # noqa: E501

        :param hist_data: The hist_data of this ContextElement.
        :type hist_data: List[HistoricalData]
        """
        if hist_data is not None and len(hist_data) < 1:
            raise ValueError("Invalid value for `hist_data`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._hist_data = hist_data

    @property
    def adrf_id(self):
        """Gets the adrf_id of this ContextElement.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :return: The adrf_id of this ContextElement.
        :rtype: str
        """
        return self._adrf_id

    @adrf_id.setter
    def adrf_id(self, adrf_id):
        """Sets the adrf_id of this ContextElement.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :param adrf_id: The adrf_id of this ContextElement.
        :type adrf_id: str
        """

        self._adrf_id = adrf_id

    @property
    def adrf_data_types(self):
        """Gets the adrf_data_types of this ContextElement.

        Type(s) of data stored in the ADRF by the NWDAF.  # noqa: E501

        :return: The adrf_data_types of this ContextElement.
        :rtype: List[AdrfDataType]
        """
        return self._adrf_data_types

    @adrf_data_types.setter
    def adrf_data_types(self, adrf_data_types):
        """Sets the adrf_data_types of this ContextElement.

        Type(s) of data stored in the ADRF by the NWDAF.  # noqa: E501

        :param adrf_data_types: The adrf_data_types of this ContextElement.
        :type adrf_data_types: List[AdrfDataType]
        """
        if adrf_data_types is not None and len(adrf_data_types) < 1:
            raise ValueError("Invalid value for `adrf_data_types`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._adrf_data_types = adrf_data_types

    @property
    def aggr_nwdaf_ids(self):
        """Gets the aggr_nwdaf_ids of this ContextElement.

        NWDAF identifiers of NWDAF instances used by the NWDAF service consumer when aggregating  multiple analytics subscriptions.   # noqa: E501

        :return: The aggr_nwdaf_ids of this ContextElement.
        :rtype: List[str]
        """
        return self._aggr_nwdaf_ids

    @aggr_nwdaf_ids.setter
    def aggr_nwdaf_ids(self, aggr_nwdaf_ids):
        """Sets the aggr_nwdaf_ids of this ContextElement.

        NWDAF identifiers of NWDAF instances used by the NWDAF service consumer when aggregating  multiple analytics subscriptions.   # noqa: E501

        :param aggr_nwdaf_ids: The aggr_nwdaf_ids of this ContextElement.
        :type aggr_nwdaf_ids: List[str]
        """
        if aggr_nwdaf_ids is not None and len(aggr_nwdaf_ids) < 1:
            raise ValueError("Invalid value for `aggr_nwdaf_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._aggr_nwdaf_ids = aggr_nwdaf_ids

    @property
    def model_info(self):
        """Gets the model_info of this ContextElement.

        Contains information identifying the ML model(s) that the consumer NWDAF is currently subscribing for the analytics.   # noqa: E501

        :return: The model_info of this ContextElement.
        :rtype: List[ModelInfo]
        """
        return self._model_info

    @model_info.setter
    def model_info(self, model_info):
        """Sets the model_info of this ContextElement.

        Contains information identifying the ML model(s) that the consumer NWDAF is currently subscribing for the analytics.   # noqa: E501

        :param model_info: The model_info of this ContextElement.
        :type model_info: List[ModelInfo]
        """
        if model_info is not None and len(model_info) < 1:
            raise ValueError("Invalid value for `model_info`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._model_info = model_info
