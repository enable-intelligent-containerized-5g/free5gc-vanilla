# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.access_type import AccessType
from openapi_server.models.ue_reachability import UeReachability
from openapi_server import util

from openapi_server.models.access_type import AccessType  # noqa: E501
from openapi_server.models.ue_reachability import UeReachability  # noqa: E501

class ReachabilityReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amf_instance_id=None, access_type_list=None, reachability=None, max_availability_time=None):  # noqa: E501
        """ReachabilityReport - a model defined in OpenAPI

        :param amf_instance_id: The amf_instance_id of this ReachabilityReport.  # noqa: E501
        :type amf_instance_id: str
        :param access_type_list: The access_type_list of this ReachabilityReport.  # noqa: E501
        :type access_type_list: List[AccessType]
        :param reachability: The reachability of this ReachabilityReport.  # noqa: E501
        :type reachability: UeReachability
        :param max_availability_time: The max_availability_time of this ReachabilityReport.  # noqa: E501
        :type max_availability_time: datetime
        """
        self.openapi_types = {
            'amf_instance_id': str,
            'access_type_list': List[AccessType],
            'reachability': UeReachability,
            'max_availability_time': datetime
        }

        self.attribute_map = {
            'amf_instance_id': 'amfInstanceId',
            'access_type_list': 'accessTypeList',
            'reachability': 'reachability',
            'max_availability_time': 'maxAvailabilityTime'
        }

        self.amf_instance_id = amf_instance_id
        self.access_type_list = access_type_list
        self.reachability = reachability
        self.max_availability_time = max_availability_time

    @classmethod
    def from_dict(cls, dikt) -> 'ReachabilityReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReachabilityReport of this ReachabilityReport.  # noqa: E501
        :rtype: ReachabilityReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amf_instance_id(self):
        """Gets the amf_instance_id of this ReachabilityReport.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :return: The amf_instance_id of this ReachabilityReport.
        :rtype: str
        """
        return self._amf_instance_id

    @amf_instance_id.setter
    def amf_instance_id(self, amf_instance_id):
        """Sets the amf_instance_id of this ReachabilityReport.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :param amf_instance_id: The amf_instance_id of this ReachabilityReport.
        :type amf_instance_id: str
        """

        self._amf_instance_id = amf_instance_id

    @property
    def access_type_list(self):
        """Gets the access_type_list of this ReachabilityReport.


        :return: The access_type_list of this ReachabilityReport.
        :rtype: List[AccessType]
        """
        return self._access_type_list

    @access_type_list.setter
    def access_type_list(self, access_type_list):
        """Sets the access_type_list of this ReachabilityReport.


        :param access_type_list: The access_type_list of this ReachabilityReport.
        :type access_type_list: List[AccessType]
        """
        if access_type_list is not None and len(access_type_list) < 1:
            raise ValueError("Invalid value for `access_type_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._access_type_list = access_type_list

    @property
    def reachability(self):
        """Gets the reachability of this ReachabilityReport.


        :return: The reachability of this ReachabilityReport.
        :rtype: UeReachability
        """
        return self._reachability

    @reachability.setter
    def reachability(self, reachability):
        """Sets the reachability of this ReachabilityReport.


        :param reachability: The reachability of this ReachabilityReport.
        :type reachability: UeReachability
        """

        self._reachability = reachability

    @property
    def max_availability_time(self):
        """Gets the max_availability_time of this ReachabilityReport.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The max_availability_time of this ReachabilityReport.
        :rtype: datetime
        """
        return self._max_availability_time

    @max_availability_time.setter
    def max_availability_time(self, max_availability_time):
        """Sets the max_availability_time of this ReachabilityReport.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param max_availability_time: The max_availability_time of this ReachabilityReport.
        :type max_availability_time: datetime
        """

        self._max_availability_time = max_availability_time
