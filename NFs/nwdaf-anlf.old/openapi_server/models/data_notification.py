# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.af_event_exposure_notif import AfEventExposureNotif
from openapi_server.models.amf_event_notification import AmfEventNotification
from openapi_server.models.monitoring_report import MonitoringReport
from openapi_server.models.nef_event_exposure_notif import NefEventExposureNotif
from openapi_server.models.nsmf_event_exposure_notification import NsmfEventExposureNotification
from openapi_server import util

from openapi_server.models.af_event_exposure_notif import AfEventExposureNotif  # noqa: E501
from openapi_server.models.amf_event_notification import AmfEventNotification  # noqa: E501
from openapi_server.models.monitoring_report import MonitoringReport  # noqa: E501
from openapi_server.models.nef_event_exposure_notif import NefEventExposureNotif  # noqa: E501
from openapi_server.models.nsmf_event_exposure_notification import NsmfEventExposureNotification  # noqa: E501

class DataNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amf_event_notifs=None, smf_event_notifs=None, udm_event_notifs=None, nef_event_notifs=None, af_event_notifs=None):  # noqa: E501
        """DataNotification - a model defined in OpenAPI

        :param amf_event_notifs: The amf_event_notifs of this DataNotification.  # noqa: E501
        :type amf_event_notifs: List[AmfEventNotification]
        :param smf_event_notifs: The smf_event_notifs of this DataNotification.  # noqa: E501
        :type smf_event_notifs: List[NsmfEventExposureNotification]
        :param udm_event_notifs: The udm_event_notifs of this DataNotification.  # noqa: E501
        :type udm_event_notifs: List[MonitoringReport]
        :param nef_event_notifs: The nef_event_notifs of this DataNotification.  # noqa: E501
        :type nef_event_notifs: List[NefEventExposureNotif]
        :param af_event_notifs: The af_event_notifs of this DataNotification.  # noqa: E501
        :type af_event_notifs: List[AfEventExposureNotif]
        """
        self.openapi_types = {
            'amf_event_notifs': List[AmfEventNotification],
            'smf_event_notifs': List[NsmfEventExposureNotification],
            'udm_event_notifs': List[MonitoringReport],
            'nef_event_notifs': List[NefEventExposureNotif],
            'af_event_notifs': List[AfEventExposureNotif]
        }

        self.attribute_map = {
            'amf_event_notifs': 'amfEventNotifs',
            'smf_event_notifs': 'smfEventNotifs',
            'udm_event_notifs': 'udmEventNotifs',
            'nef_event_notifs': 'nefEventNotifs',
            'af_event_notifs': 'afEventNotifs'
        }

        self.amf_event_notifs = amf_event_notifs
        self.smf_event_notifs = smf_event_notifs
        self.udm_event_notifs = udm_event_notifs
        self.nef_event_notifs = nef_event_notifs
        self.af_event_notifs = af_event_notifs

    @classmethod
    def from_dict(cls, dikt) -> 'DataNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataNotification of this DataNotification.  # noqa: E501
        :rtype: DataNotification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amf_event_notifs(self):
        """Gets the amf_event_notifs of this DataNotification.

        List of notifications of AMF events.  # noqa: E501

        :return: The amf_event_notifs of this DataNotification.
        :rtype: List[AmfEventNotification]
        """
        return self._amf_event_notifs

    @amf_event_notifs.setter
    def amf_event_notifs(self, amf_event_notifs):
        """Sets the amf_event_notifs of this DataNotification.

        List of notifications of AMF events.  # noqa: E501

        :param amf_event_notifs: The amf_event_notifs of this DataNotification.
        :type amf_event_notifs: List[AmfEventNotification]
        """
        if amf_event_notifs is not None and len(amf_event_notifs) < 1:
            raise ValueError("Invalid value for `amf_event_notifs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._amf_event_notifs = amf_event_notifs

    @property
    def smf_event_notifs(self):
        """Gets the smf_event_notifs of this DataNotification.

        List of notifications of SMF events.  # noqa: E501

        :return: The smf_event_notifs of this DataNotification.
        :rtype: List[NsmfEventExposureNotification]
        """
        return self._smf_event_notifs

    @smf_event_notifs.setter
    def smf_event_notifs(self, smf_event_notifs):
        """Sets the smf_event_notifs of this DataNotification.

        List of notifications of SMF events.  # noqa: E501

        :param smf_event_notifs: The smf_event_notifs of this DataNotification.
        :type smf_event_notifs: List[NsmfEventExposureNotification]
        """
        if smf_event_notifs is not None and len(smf_event_notifs) < 1:
            raise ValueError("Invalid value for `smf_event_notifs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._smf_event_notifs = smf_event_notifs

    @property
    def udm_event_notifs(self):
        """Gets the udm_event_notifs of this DataNotification.

        List of notifications of UDM events.  # noqa: E501

        :return: The udm_event_notifs of this DataNotification.
        :rtype: List[MonitoringReport]
        """
        return self._udm_event_notifs

    @udm_event_notifs.setter
    def udm_event_notifs(self, udm_event_notifs):
        """Sets the udm_event_notifs of this DataNotification.

        List of notifications of UDM events.  # noqa: E501

        :param udm_event_notifs: The udm_event_notifs of this DataNotification.
        :type udm_event_notifs: List[MonitoringReport]
        """
        if udm_event_notifs is not None and len(udm_event_notifs) < 1:
            raise ValueError("Invalid value for `udm_event_notifs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._udm_event_notifs = udm_event_notifs

    @property
    def nef_event_notifs(self):
        """Gets the nef_event_notifs of this DataNotification.

        List of notifications of NEF events.  # noqa: E501

        :return: The nef_event_notifs of this DataNotification.
        :rtype: List[NefEventExposureNotif]
        """
        return self._nef_event_notifs

    @nef_event_notifs.setter
    def nef_event_notifs(self, nef_event_notifs):
        """Sets the nef_event_notifs of this DataNotification.

        List of notifications of NEF events.  # noqa: E501

        :param nef_event_notifs: The nef_event_notifs of this DataNotification.
        :type nef_event_notifs: List[NefEventExposureNotif]
        """
        if nef_event_notifs is not None and len(nef_event_notifs) < 1:
            raise ValueError("Invalid value for `nef_event_notifs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nef_event_notifs = nef_event_notifs

    @property
    def af_event_notifs(self):
        """Gets the af_event_notifs of this DataNotification.

        List of notifications of AF events.  # noqa: E501

        :return: The af_event_notifs of this DataNotification.
        :rtype: List[AfEventExposureNotif]
        """
        return self._af_event_notifs

    @af_event_notifs.setter
    def af_event_notifs(self, af_event_notifs):
        """Sets the af_event_notifs of this DataNotification.

        List of notifications of AF events.  # noqa: E501

        :param af_event_notifs: The af_event_notifs of this DataNotification.
        :type af_event_notifs: List[AfEventExposureNotif]
        """
        if af_event_notifs is not None and len(af_event_notifs) < 1:
            raise ValueError("Invalid value for `af_event_notifs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._af_event_notifs = af_event_notifs
