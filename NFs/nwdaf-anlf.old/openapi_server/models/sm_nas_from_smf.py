# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.applied_smcc_type import AppliedSmccType
from openapi_server import util

from openapi_server.models.applied_smcc_type import AppliedSmccType  # noqa: E501

class SmNasFromSmf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sm_nas_type=None, time_stamp=None, backoff_timer=None, applied_smcc_type=None):  # noqa: E501
        """SmNasFromSmf - a model defined in OpenAPI

        :param sm_nas_type: The sm_nas_type of this SmNasFromSmf.  # noqa: E501
        :type sm_nas_type: str
        :param time_stamp: The time_stamp of this SmNasFromSmf.  # noqa: E501
        :type time_stamp: datetime
        :param backoff_timer: The backoff_timer of this SmNasFromSmf.  # noqa: E501
        :type backoff_timer: int
        :param applied_smcc_type: The applied_smcc_type of this SmNasFromSmf.  # noqa: E501
        :type applied_smcc_type: AppliedSmccType
        """
        self.openapi_types = {
            'sm_nas_type': str,
            'time_stamp': datetime,
            'backoff_timer': int,
            'applied_smcc_type': AppliedSmccType
        }

        self.attribute_map = {
            'sm_nas_type': 'smNasType',
            'time_stamp': 'timeStamp',
            'backoff_timer': 'backoffTimer',
            'applied_smcc_type': 'appliedSmccType'
        }

        self.sm_nas_type = sm_nas_type
        self.time_stamp = time_stamp
        self.backoff_timer = backoff_timer
        self.applied_smcc_type = applied_smcc_type

    @classmethod
    def from_dict(cls, dikt) -> 'SmNasFromSmf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SmNasFromSmf of this SmNasFromSmf.  # noqa: E501
        :rtype: SmNasFromSmf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sm_nas_type(self):
        """Gets the sm_nas_type of this SmNasFromSmf.


        :return: The sm_nas_type of this SmNasFromSmf.
        :rtype: str
        """
        return self._sm_nas_type

    @sm_nas_type.setter
    def sm_nas_type(self, sm_nas_type):
        """Sets the sm_nas_type of this SmNasFromSmf.


        :param sm_nas_type: The sm_nas_type of this SmNasFromSmf.
        :type sm_nas_type: str
        """
        if sm_nas_type is None:
            raise ValueError("Invalid value for `sm_nas_type`, must not be `None`")  # noqa: E501

        self._sm_nas_type = sm_nas_type

    @property
    def time_stamp(self):
        """Gets the time_stamp of this SmNasFromSmf.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The time_stamp of this SmNasFromSmf.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this SmNasFromSmf.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param time_stamp: The time_stamp of this SmNasFromSmf.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")  # noqa: E501

        self._time_stamp = time_stamp

    @property
    def backoff_timer(self):
        """Gets the backoff_timer of this SmNasFromSmf.

        indicating a time in seconds.  # noqa: E501

        :return: The backoff_timer of this SmNasFromSmf.
        :rtype: int
        """
        return self._backoff_timer

    @backoff_timer.setter
    def backoff_timer(self, backoff_timer):
        """Sets the backoff_timer of this SmNasFromSmf.

        indicating a time in seconds.  # noqa: E501

        :param backoff_timer: The backoff_timer of this SmNasFromSmf.
        :type backoff_timer: int
        """
        if backoff_timer is None:
            raise ValueError("Invalid value for `backoff_timer`, must not be `None`")  # noqa: E501

        self._backoff_timer = backoff_timer

    @property
    def applied_smcc_type(self):
        """Gets the applied_smcc_type of this SmNasFromSmf.


        :return: The applied_smcc_type of this SmNasFromSmf.
        :rtype: AppliedSmccType
        """
        return self._applied_smcc_type

    @applied_smcc_type.setter
    def applied_smcc_type(self, applied_smcc_type):
        """Sets the applied_smcc_type of this SmNasFromSmf.


        :param applied_smcc_type: The applied_smcc_type of this SmNasFromSmf.
        :type applied_smcc_type: AppliedSmccType
        """
        if applied_smcc_type is None:
            raise ValueError("Invalid value for `applied_smcc_type`, must not be `None`")  # noqa: E501

        self._applied_smcc_type = applied_smcc_type
