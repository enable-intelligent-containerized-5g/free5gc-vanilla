# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.network_area_info import NetworkAreaInfo
from openapi_server import util

from openapi_server.models.network_area_info import NetworkAreaInfo  # noqa: E501

class AppListForUeComm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id=None, start_time=None, app_dur=None, occur_ratio=None, spatial_validity=None):  # noqa: E501
        """AppListForUeComm - a model defined in OpenAPI

        :param app_id: The app_id of this AppListForUeComm.  # noqa: E501
        :type app_id: str
        :param start_time: The start_time of this AppListForUeComm.  # noqa: E501
        :type start_time: datetime
        :param app_dur: The app_dur of this AppListForUeComm.  # noqa: E501
        :type app_dur: int
        :param occur_ratio: The occur_ratio of this AppListForUeComm.  # noqa: E501
        :type occur_ratio: int
        :param spatial_validity: The spatial_validity of this AppListForUeComm.  # noqa: E501
        :type spatial_validity: NetworkAreaInfo
        """
        self.openapi_types = {
            'app_id': str,
            'start_time': datetime,
            'app_dur': int,
            'occur_ratio': int,
            'spatial_validity': NetworkAreaInfo
        }

        self.attribute_map = {
            'app_id': 'appId',
            'start_time': 'startTime',
            'app_dur': 'appDur',
            'occur_ratio': 'occurRatio',
            'spatial_validity': 'spatialValidity'
        }

        self.app_id = app_id
        self.start_time = start_time
        self.app_dur = app_dur
        self.occur_ratio = occur_ratio
        self.spatial_validity = spatial_validity

    @classmethod
    def from_dict(cls, dikt) -> 'AppListForUeComm':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppListForUeComm of this AppListForUeComm.  # noqa: E501
        :rtype: AppListForUeComm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this AppListForUeComm.

        String providing an application identifier.  # noqa: E501

        :return: The app_id of this AppListForUeComm.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AppListForUeComm.

        String providing an application identifier.  # noqa: E501

        :param app_id: The app_id of this AppListForUeComm.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def start_time(self):
        """Gets the start_time of this AppListForUeComm.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The start_time of this AppListForUeComm.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AppListForUeComm.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param start_time: The start_time of this AppListForUeComm.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def app_dur(self):
        """Gets the app_dur of this AppListForUeComm.

        indicating a time in seconds.  # noqa: E501

        :return: The app_dur of this AppListForUeComm.
        :rtype: int
        """
        return self._app_dur

    @app_dur.setter
    def app_dur(self, app_dur):
        """Sets the app_dur of this AppListForUeComm.

        indicating a time in seconds.  # noqa: E501

        :param app_dur: The app_dur of this AppListForUeComm.
        :type app_dur: int
        """

        self._app_dur = app_dur

    @property
    def occur_ratio(self):
        """Gets the occur_ratio of this AppListForUeComm.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :return: The occur_ratio of this AppListForUeComm.
        :rtype: int
        """
        return self._occur_ratio

    @occur_ratio.setter
    def occur_ratio(self, occur_ratio):
        """Sets the occur_ratio of this AppListForUeComm.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :param occur_ratio: The occur_ratio of this AppListForUeComm.
        :type occur_ratio: int
        """
        if occur_ratio is not None and occur_ratio > 100:  # noqa: E501
            raise ValueError("Invalid value for `occur_ratio`, must be a value less than or equal to `100`")  # noqa: E501
        if occur_ratio is not None and occur_ratio < 1:  # noqa: E501
            raise ValueError("Invalid value for `occur_ratio`, must be a value greater than or equal to `1`")  # noqa: E501

        self._occur_ratio = occur_ratio

    @property
    def spatial_validity(self):
        """Gets the spatial_validity of this AppListForUeComm.


        :return: The spatial_validity of this AppListForUeComm.
        :rtype: NetworkAreaInfo
        """
        return self._spatial_validity

    @spatial_validity.setter
    def spatial_validity(self, spatial_validity):
        """Sets the spatial_validity of this AppListForUeComm.


        :param spatial_validity: The spatial_validity of this AppListForUeComm.
        :type spatial_validity: NetworkAreaInfo
        """

        self._spatial_validity = spatial_validity
