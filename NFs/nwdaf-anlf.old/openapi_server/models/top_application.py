# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.flow_info import FlowInfo
from openapi_server import util

from openapi_server.models.flow_info import FlowInfo  # noqa: E501

class TopApplication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id=None, ip_traffic_filter=None, ratio=None):  # noqa: E501
        """TopApplication - a model defined in OpenAPI

        :param app_id: The app_id of this TopApplication.  # noqa: E501
        :type app_id: str
        :param ip_traffic_filter: The ip_traffic_filter of this TopApplication.  # noqa: E501
        :type ip_traffic_filter: FlowInfo
        :param ratio: The ratio of this TopApplication.  # noqa: E501
        :type ratio: int
        """
        self.openapi_types = {
            'app_id': str,
            'ip_traffic_filter': FlowInfo,
            'ratio': int
        }

        self.attribute_map = {
            'app_id': 'appId',
            'ip_traffic_filter': 'ipTrafficFilter',
            'ratio': 'ratio'
        }

        self.app_id = app_id
        self.ip_traffic_filter = ip_traffic_filter
        self.ratio = ratio

    @classmethod
    def from_dict(cls, dikt) -> 'TopApplication':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TopApplication of this TopApplication.  # noqa: E501
        :rtype: TopApplication
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this TopApplication.

        String providing an application identifier.  # noqa: E501

        :return: The app_id of this TopApplication.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this TopApplication.

        String providing an application identifier.  # noqa: E501

        :param app_id: The app_id of this TopApplication.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def ip_traffic_filter(self):
        """Gets the ip_traffic_filter of this TopApplication.


        :return: The ip_traffic_filter of this TopApplication.
        :rtype: FlowInfo
        """
        return self._ip_traffic_filter

    @ip_traffic_filter.setter
    def ip_traffic_filter(self, ip_traffic_filter):
        """Sets the ip_traffic_filter of this TopApplication.


        :param ip_traffic_filter: The ip_traffic_filter of this TopApplication.
        :type ip_traffic_filter: FlowInfo
        """

        self._ip_traffic_filter = ip_traffic_filter

    @property
    def ratio(self):
        """Gets the ratio of this TopApplication.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :return: The ratio of this TopApplication.
        :rtype: int
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this TopApplication.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :param ratio: The ratio of this TopApplication.
        :type ratio: int
        """
        if ratio is not None and ratio > 100:  # noqa: E501
            raise ValueError("Invalid value for `ratio`, must be a value less than or equal to `100`")  # noqa: E501
        if ratio is not None and ratio < 1:  # noqa: E501
            raise ValueError("Invalid value for `ratio`, must be a value greater than or equal to `1`")  # noqa: E501

        self._ratio = ratio
