# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CommunicationCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_time=None, end_time=None, ul_vol=None, dl_vol=None):  # noqa: E501
        """CommunicationCollection - a model defined in OpenAPI

        :param start_time: The start_time of this CommunicationCollection.  # noqa: E501
        :type start_time: datetime
        :param end_time: The end_time of this CommunicationCollection.  # noqa: E501
        :type end_time: datetime
        :param ul_vol: The ul_vol of this CommunicationCollection.  # noqa: E501
        :type ul_vol: int
        :param dl_vol: The dl_vol of this CommunicationCollection.  # noqa: E501
        :type dl_vol: int
        """
        self.openapi_types = {
            'start_time': datetime,
            'end_time': datetime,
            'ul_vol': int,
            'dl_vol': int
        }

        self.attribute_map = {
            'start_time': 'startTime',
            'end_time': 'endTime',
            'ul_vol': 'ulVol',
            'dl_vol': 'dlVol'
        }

        self.start_time = start_time
        self.end_time = end_time
        self.ul_vol = ul_vol
        self.dl_vol = dl_vol

    @classmethod
    def from_dict(cls, dikt) -> 'CommunicationCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CommunicationCollection of this CommunicationCollection.  # noqa: E501
        :rtype: CommunicationCollection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_time(self):
        """Gets the start_time of this CommunicationCollection.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The start_time of this CommunicationCollection.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CommunicationCollection.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param start_time: The start_time of this CommunicationCollection.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this CommunicationCollection.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The end_time of this CommunicationCollection.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CommunicationCollection.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param end_time: The end_time of this CommunicationCollection.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def ul_vol(self):
        """Gets the ul_vol of this CommunicationCollection.

        Unsigned integer identifying a volume in units of bytes.  # noqa: E501

        :return: The ul_vol of this CommunicationCollection.
        :rtype: int
        """
        return self._ul_vol

    @ul_vol.setter
    def ul_vol(self, ul_vol):
        """Sets the ul_vol of this CommunicationCollection.

        Unsigned integer identifying a volume in units of bytes.  # noqa: E501

        :param ul_vol: The ul_vol of this CommunicationCollection.
        :type ul_vol: int
        """
        if ul_vol is None:
            raise ValueError("Invalid value for `ul_vol`, must not be `None`")  # noqa: E501
        if ul_vol is not None and ul_vol < 0:  # noqa: E501
            raise ValueError("Invalid value for `ul_vol`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ul_vol = ul_vol

    @property
    def dl_vol(self):
        """Gets the dl_vol of this CommunicationCollection.

        Unsigned integer identifying a volume in units of bytes.  # noqa: E501

        :return: The dl_vol of this CommunicationCollection.
        :rtype: int
        """
        return self._dl_vol

    @dl_vol.setter
    def dl_vol(self, dl_vol):
        """Sets the dl_vol of this CommunicationCollection.

        Unsigned integer identifying a volume in units of bytes.  # noqa: E501

        :param dl_vol: The dl_vol of this CommunicationCollection.
        :type dl_vol: int
        """
        if dl_vol is None:
            raise ValueError("Invalid value for `dl_vol`, must not be `None`")  # noqa: E501
        if dl_vol is not None and dl_vol < 0:  # noqa: E501
            raise ValueError("Invalid value for `dl_vol`, must be a value greater than or equal to `0`")  # noqa: E501

        self._dl_vol = dl_vol
