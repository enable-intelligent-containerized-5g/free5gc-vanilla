# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.service_experience_info_per_flow import ServiceExperienceInfoPerFlow
from openapi_server import util

from openapi_server.models.service_experience_info_per_flow import ServiceExperienceInfoPerFlow  # noqa: E501

class ServiceExperienceInfo1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id=None, supis=None, svc_exp_per_flows=None):  # noqa: E501
        """ServiceExperienceInfo1 - a model defined in OpenAPI

        :param app_id: The app_id of this ServiceExperienceInfo1.  # noqa: E501
        :type app_id: str
        :param supis: The supis of this ServiceExperienceInfo1.  # noqa: E501
        :type supis: List[str]
        :param svc_exp_per_flows: The svc_exp_per_flows of this ServiceExperienceInfo1.  # noqa: E501
        :type svc_exp_per_flows: List[ServiceExperienceInfoPerFlow]
        """
        self.openapi_types = {
            'app_id': str,
            'supis': List[str],
            'svc_exp_per_flows': List[ServiceExperienceInfoPerFlow]
        }

        self.attribute_map = {
            'app_id': 'appId',
            'supis': 'supis',
            'svc_exp_per_flows': 'svcExpPerFlows'
        }

        self.app_id = app_id
        self.supis = supis
        self.svc_exp_per_flows = svc_exp_per_flows

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceExperienceInfo1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceExperienceInfo_1 of this ServiceExperienceInfo1.  # noqa: E501
        :rtype: ServiceExperienceInfo1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this ServiceExperienceInfo1.

        String providing an application identifier.  # noqa: E501

        :return: The app_id of this ServiceExperienceInfo1.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ServiceExperienceInfo1.

        String providing an application identifier.  # noqa: E501

        :param app_id: The app_id of this ServiceExperienceInfo1.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def supis(self):
        """Gets the supis of this ServiceExperienceInfo1.


        :return: The supis of this ServiceExperienceInfo1.
        :rtype: List[str]
        """
        return self._supis

    @supis.setter
    def supis(self, supis):
        """Sets the supis of this ServiceExperienceInfo1.


        :param supis: The supis of this ServiceExperienceInfo1.
        :type supis: List[str]
        """
        if supis is not None and len(supis) < 1:
            raise ValueError("Invalid value for `supis`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supis = supis

    @property
    def svc_exp_per_flows(self):
        """Gets the svc_exp_per_flows of this ServiceExperienceInfo1.


        :return: The svc_exp_per_flows of this ServiceExperienceInfo1.
        :rtype: List[ServiceExperienceInfoPerFlow]
        """
        return self._svc_exp_per_flows

    @svc_exp_per_flows.setter
    def svc_exp_per_flows(self, svc_exp_per_flows):
        """Sets the svc_exp_per_flows of this ServiceExperienceInfo1.


        :param svc_exp_per_flows: The svc_exp_per_flows of this ServiceExperienceInfo1.
        :type svc_exp_per_flows: List[ServiceExperienceInfoPerFlow]
        """
        if svc_exp_per_flows is None:
            raise ValueError("Invalid value for `svc_exp_per_flows`, must not be `None`")  # noqa: E501
        if svc_exp_per_flows is not None and len(svc_exp_per_flows) < 1:
            raise ValueError("Invalid value for `svc_exp_per_flows`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._svc_exp_per_flows = svc_exp_per_flows
