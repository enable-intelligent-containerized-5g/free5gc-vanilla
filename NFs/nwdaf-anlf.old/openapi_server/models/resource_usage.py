# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ResourceUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu_usage=None, memory_usage=None, storage_usage=None):  # noqa: E501
        """ResourceUsage - a model defined in OpenAPI

        :param cpu_usage: The cpu_usage of this ResourceUsage.  # noqa: E501
        :type cpu_usage: int
        :param memory_usage: The memory_usage of this ResourceUsage.  # noqa: E501
        :type memory_usage: int
        :param storage_usage: The storage_usage of this ResourceUsage.  # noqa: E501
        :type storage_usage: int
        """
        self.openapi_types = {
            'cpu_usage': int,
            'memory_usage': int,
            'storage_usage': int
        }

        self.attribute_map = {
            'cpu_usage': 'cpuUsage',
            'memory_usage': 'memoryUsage',
            'storage_usage': 'storageUsage'
        }

        self.cpu_usage = cpu_usage
        self.memory_usage = memory_usage
        self.storage_usage = storage_usage

    @classmethod
    def from_dict(cls, dikt) -> 'ResourceUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResourceUsage of this ResourceUsage.  # noqa: E501
        :rtype: ResourceUsage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu_usage(self):
        """Gets the cpu_usage of this ResourceUsage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The cpu_usage of this ResourceUsage.
        :rtype: int
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage):
        """Sets the cpu_usage of this ResourceUsage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param cpu_usage: The cpu_usage of this ResourceUsage.
        :type cpu_usage: int
        """
        if cpu_usage is not None and cpu_usage < 0:  # noqa: E501
            raise ValueError("Invalid value for `cpu_usage`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cpu_usage = cpu_usage

    @property
    def memory_usage(self):
        """Gets the memory_usage of this ResourceUsage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The memory_usage of this ResourceUsage.
        :rtype: int
        """
        return self._memory_usage

    @memory_usage.setter
    def memory_usage(self, memory_usage):
        """Sets the memory_usage of this ResourceUsage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param memory_usage: The memory_usage of this ResourceUsage.
        :type memory_usage: int
        """
        if memory_usage is not None and memory_usage < 0:  # noqa: E501
            raise ValueError("Invalid value for `memory_usage`, must be a value greater than or equal to `0`")  # noqa: E501

        self._memory_usage = memory_usage

    @property
    def storage_usage(self):
        """Gets the storage_usage of this ResourceUsage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The storage_usage of this ResourceUsage.
        :rtype: int
        """
        return self._storage_usage

    @storage_usage.setter
    def storage_usage(self, storage_usage):
        """Sets the storage_usage of this ResourceUsage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param storage_usage: The storage_usage of this ResourceUsage.
        :type storage_usage: int
        """
        if storage_usage is not None and storage_usage < 0:  # noqa: E501
            raise ValueError("Invalid value for `storage_usage`, must be a value greater than or equal to `0`")  # noqa: E501

        self._storage_usage = storage_usage
