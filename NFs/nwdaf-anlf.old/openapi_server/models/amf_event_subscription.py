# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.amf_event import AmfEvent
from openapi_server.models.amf_event_mode import AmfEventMode
from openapi_server.models.nf_type import NFType
import re
from openapi_server import util

from openapi_server.models.amf_event import AmfEvent  # noqa: E501
from openapi_server.models.amf_event_mode import AmfEventMode  # noqa: E501
from openapi_server.models.nf_type import NFType  # noqa: E501
import re  # noqa: E501

class AmfEventSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_list=None, event_notify_uri=None, notify_correlation_id=None, nf_id=None, subs_change_notify_uri=None, subs_change_notify_correlation_id=None, supi=None, group_id=None, exclude_supi_list=None, exclude_gpsi_list=None, include_supi_list=None, include_gpsi_list=None, gpsi=None, pei=None, any_ue=None, options=None, source_nf_type=None):  # noqa: E501
        """AmfEventSubscription - a model defined in OpenAPI

        :param event_list: The event_list of this AmfEventSubscription.  # noqa: E501
        :type event_list: List[AmfEvent]
        :param event_notify_uri: The event_notify_uri of this AmfEventSubscription.  # noqa: E501
        :type event_notify_uri: str
        :param notify_correlation_id: The notify_correlation_id of this AmfEventSubscription.  # noqa: E501
        :type notify_correlation_id: str
        :param nf_id: The nf_id of this AmfEventSubscription.  # noqa: E501
        :type nf_id: str
        :param subs_change_notify_uri: The subs_change_notify_uri of this AmfEventSubscription.  # noqa: E501
        :type subs_change_notify_uri: str
        :param subs_change_notify_correlation_id: The subs_change_notify_correlation_id of this AmfEventSubscription.  # noqa: E501
        :type subs_change_notify_correlation_id: str
        :param supi: The supi of this AmfEventSubscription.  # noqa: E501
        :type supi: str
        :param group_id: The group_id of this AmfEventSubscription.  # noqa: E501
        :type group_id: str
        :param exclude_supi_list: The exclude_supi_list of this AmfEventSubscription.  # noqa: E501
        :type exclude_supi_list: List[str]
        :param exclude_gpsi_list: The exclude_gpsi_list of this AmfEventSubscription.  # noqa: E501
        :type exclude_gpsi_list: List[str]
        :param include_supi_list: The include_supi_list of this AmfEventSubscription.  # noqa: E501
        :type include_supi_list: List[str]
        :param include_gpsi_list: The include_gpsi_list of this AmfEventSubscription.  # noqa: E501
        :type include_gpsi_list: List[str]
        :param gpsi: The gpsi of this AmfEventSubscription.  # noqa: E501
        :type gpsi: str
        :param pei: The pei of this AmfEventSubscription.  # noqa: E501
        :type pei: str
        :param any_ue: The any_ue of this AmfEventSubscription.  # noqa: E501
        :type any_ue: bool
        :param options: The options of this AmfEventSubscription.  # noqa: E501
        :type options: AmfEventMode
        :param source_nf_type: The source_nf_type of this AmfEventSubscription.  # noqa: E501
        :type source_nf_type: NFType
        """
        self.openapi_types = {
            'event_list': List[AmfEvent],
            'event_notify_uri': str,
            'notify_correlation_id': str,
            'nf_id': str,
            'subs_change_notify_uri': str,
            'subs_change_notify_correlation_id': str,
            'supi': str,
            'group_id': str,
            'exclude_supi_list': List[str],
            'exclude_gpsi_list': List[str],
            'include_supi_list': List[str],
            'include_gpsi_list': List[str],
            'gpsi': str,
            'pei': str,
            'any_ue': bool,
            'options': AmfEventMode,
            'source_nf_type': NFType
        }

        self.attribute_map = {
            'event_list': 'eventList',
            'event_notify_uri': 'eventNotifyUri',
            'notify_correlation_id': 'notifyCorrelationId',
            'nf_id': 'nfId',
            'subs_change_notify_uri': 'subsChangeNotifyUri',
            'subs_change_notify_correlation_id': 'subsChangeNotifyCorrelationId',
            'supi': 'supi',
            'group_id': 'groupId',
            'exclude_supi_list': 'excludeSupiList',
            'exclude_gpsi_list': 'excludeGpsiList',
            'include_supi_list': 'includeSupiList',
            'include_gpsi_list': 'includeGpsiList',
            'gpsi': 'gpsi',
            'pei': 'pei',
            'any_ue': 'anyUE',
            'options': 'options',
            'source_nf_type': 'sourceNfType'
        }

        self.event_list = event_list
        self.event_notify_uri = event_notify_uri
        self.notify_correlation_id = notify_correlation_id
        self.nf_id = nf_id
        self.subs_change_notify_uri = subs_change_notify_uri
        self.subs_change_notify_correlation_id = subs_change_notify_correlation_id
        self.supi = supi
        self.group_id = group_id
        self.exclude_supi_list = exclude_supi_list
        self.exclude_gpsi_list = exclude_gpsi_list
        self.include_supi_list = include_supi_list
        self.include_gpsi_list = include_gpsi_list
        self.gpsi = gpsi
        self.pei = pei
        self.any_ue = any_ue
        self.options = options
        self.source_nf_type = source_nf_type

    @classmethod
    def from_dict(cls, dikt) -> 'AmfEventSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AmfEventSubscription of this AmfEventSubscription.  # noqa: E501
        :rtype: AmfEventSubscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_list(self):
        """Gets the event_list of this AmfEventSubscription.


        :return: The event_list of this AmfEventSubscription.
        :rtype: List[AmfEvent]
        """
        return self._event_list

    @event_list.setter
    def event_list(self, event_list):
        """Sets the event_list of this AmfEventSubscription.


        :param event_list: The event_list of this AmfEventSubscription.
        :type event_list: List[AmfEvent]
        """
        if event_list is None:
            raise ValueError("Invalid value for `event_list`, must not be `None`")  # noqa: E501
        if event_list is not None and len(event_list) < 1:
            raise ValueError("Invalid value for `event_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._event_list = event_list

    @property
    def event_notify_uri(self):
        """Gets the event_notify_uri of this AmfEventSubscription.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The event_notify_uri of this AmfEventSubscription.
        :rtype: str
        """
        return self._event_notify_uri

    @event_notify_uri.setter
    def event_notify_uri(self, event_notify_uri):
        """Sets the event_notify_uri of this AmfEventSubscription.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param event_notify_uri: The event_notify_uri of this AmfEventSubscription.
        :type event_notify_uri: str
        """
        if event_notify_uri is None:
            raise ValueError("Invalid value for `event_notify_uri`, must not be `None`")  # noqa: E501

        self._event_notify_uri = event_notify_uri

    @property
    def notify_correlation_id(self):
        """Gets the notify_correlation_id of this AmfEventSubscription.


        :return: The notify_correlation_id of this AmfEventSubscription.
        :rtype: str
        """
        return self._notify_correlation_id

    @notify_correlation_id.setter
    def notify_correlation_id(self, notify_correlation_id):
        """Sets the notify_correlation_id of this AmfEventSubscription.


        :param notify_correlation_id: The notify_correlation_id of this AmfEventSubscription.
        :type notify_correlation_id: str
        """
        if notify_correlation_id is None:
            raise ValueError("Invalid value for `notify_correlation_id`, must not be `None`")  # noqa: E501

        self._notify_correlation_id = notify_correlation_id

    @property
    def nf_id(self):
        """Gets the nf_id of this AmfEventSubscription.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :return: The nf_id of this AmfEventSubscription.
        :rtype: str
        """
        return self._nf_id

    @nf_id.setter
    def nf_id(self, nf_id):
        """Sets the nf_id of this AmfEventSubscription.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :param nf_id: The nf_id of this AmfEventSubscription.
        :type nf_id: str
        """
        if nf_id is None:
            raise ValueError("Invalid value for `nf_id`, must not be `None`")  # noqa: E501

        self._nf_id = nf_id

    @property
    def subs_change_notify_uri(self):
        """Gets the subs_change_notify_uri of this AmfEventSubscription.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The subs_change_notify_uri of this AmfEventSubscription.
        :rtype: str
        """
        return self._subs_change_notify_uri

    @subs_change_notify_uri.setter
    def subs_change_notify_uri(self, subs_change_notify_uri):
        """Sets the subs_change_notify_uri of this AmfEventSubscription.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param subs_change_notify_uri: The subs_change_notify_uri of this AmfEventSubscription.
        :type subs_change_notify_uri: str
        """

        self._subs_change_notify_uri = subs_change_notify_uri

    @property
    def subs_change_notify_correlation_id(self):
        """Gets the subs_change_notify_correlation_id of this AmfEventSubscription.


        :return: The subs_change_notify_correlation_id of this AmfEventSubscription.
        :rtype: str
        """
        return self._subs_change_notify_correlation_id

    @subs_change_notify_correlation_id.setter
    def subs_change_notify_correlation_id(self, subs_change_notify_correlation_id):
        """Sets the subs_change_notify_correlation_id of this AmfEventSubscription.


        :param subs_change_notify_correlation_id: The subs_change_notify_correlation_id of this AmfEventSubscription.
        :type subs_change_notify_correlation_id: str
        """

        self._subs_change_notify_correlation_id = subs_change_notify_correlation_id

    @property
    def supi(self):
        """Gets the supi of this AmfEventSubscription.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :return: The supi of this AmfEventSubscription.
        :rtype: str
        """
        return self._supi

    @supi.setter
    def supi(self, supi):
        """Sets the supi of this AmfEventSubscription.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :param supi: The supi of this AmfEventSubscription.
        :type supi: str
        """
        if supi is not None and not re.search(r'^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$', supi):  # noqa: E501
            raise ValueError("Invalid value for `supi`, must be a follow pattern or equal to `/^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$/`")  # noqa: E501

        self._supi = supi

    @property
    def group_id(self):
        """Gets the group_id of this AmfEventSubscription.

        String identifying a group of devices network internal globally unique ID which identifies a set of IMSIs, as specified in clause 19.9 of 3GPP TS 23.003.    # noqa: E501

        :return: The group_id of this AmfEventSubscription.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AmfEventSubscription.

        String identifying a group of devices network internal globally unique ID which identifies a set of IMSIs, as specified in clause 19.9 of 3GPP TS 23.003.    # noqa: E501

        :param group_id: The group_id of this AmfEventSubscription.
        :type group_id: str
        """
        if group_id is not None and not re.search(r'^[A-Fa-f0-9]{8}-[0-9]{3}-[0-9]{2,3}-([A-Fa-f0-9][A-Fa-f0-9]){1,10}$', group_id):  # noqa: E501
            raise ValueError("Invalid value for `group_id`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{8}-[0-9]{3}-[0-9]{2,3}-([A-Fa-f0-9][A-Fa-f0-9]){1,10}$/`")  # noqa: E501

        self._group_id = group_id

    @property
    def exclude_supi_list(self):
        """Gets the exclude_supi_list of this AmfEventSubscription.


        :return: The exclude_supi_list of this AmfEventSubscription.
        :rtype: List[str]
        """
        return self._exclude_supi_list

    @exclude_supi_list.setter
    def exclude_supi_list(self, exclude_supi_list):
        """Sets the exclude_supi_list of this AmfEventSubscription.


        :param exclude_supi_list: The exclude_supi_list of this AmfEventSubscription.
        :type exclude_supi_list: List[str]
        """
        if exclude_supi_list is not None and len(exclude_supi_list) < 1:
            raise ValueError("Invalid value for `exclude_supi_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._exclude_supi_list = exclude_supi_list

    @property
    def exclude_gpsi_list(self):
        """Gets the exclude_gpsi_list of this AmfEventSubscription.


        :return: The exclude_gpsi_list of this AmfEventSubscription.
        :rtype: List[str]
        """
        return self._exclude_gpsi_list

    @exclude_gpsi_list.setter
    def exclude_gpsi_list(self, exclude_gpsi_list):
        """Sets the exclude_gpsi_list of this AmfEventSubscription.


        :param exclude_gpsi_list: The exclude_gpsi_list of this AmfEventSubscription.
        :type exclude_gpsi_list: List[str]
        """
        if exclude_gpsi_list is not None and len(exclude_gpsi_list) < 1:
            raise ValueError("Invalid value for `exclude_gpsi_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._exclude_gpsi_list = exclude_gpsi_list

    @property
    def include_supi_list(self):
        """Gets the include_supi_list of this AmfEventSubscription.


        :return: The include_supi_list of this AmfEventSubscription.
        :rtype: List[str]
        """
        return self._include_supi_list

    @include_supi_list.setter
    def include_supi_list(self, include_supi_list):
        """Sets the include_supi_list of this AmfEventSubscription.


        :param include_supi_list: The include_supi_list of this AmfEventSubscription.
        :type include_supi_list: List[str]
        """
        if include_supi_list is not None and len(include_supi_list) < 1:
            raise ValueError("Invalid value for `include_supi_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._include_supi_list = include_supi_list

    @property
    def include_gpsi_list(self):
        """Gets the include_gpsi_list of this AmfEventSubscription.


        :return: The include_gpsi_list of this AmfEventSubscription.
        :rtype: List[str]
        """
        return self._include_gpsi_list

    @include_gpsi_list.setter
    def include_gpsi_list(self, include_gpsi_list):
        """Sets the include_gpsi_list of this AmfEventSubscription.


        :param include_gpsi_list: The include_gpsi_list of this AmfEventSubscription.
        :type include_gpsi_list: List[str]
        """
        if include_gpsi_list is not None and len(include_gpsi_list) < 1:
            raise ValueError("Invalid value for `include_gpsi_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._include_gpsi_list = include_gpsi_list

    @property
    def gpsi(self):
        """Gets the gpsi of this AmfEventSubscription.

        String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.    # noqa: E501

        :return: The gpsi of this AmfEventSubscription.
        :rtype: str
        """
        return self._gpsi

    @gpsi.setter
    def gpsi(self, gpsi):
        """Sets the gpsi of this AmfEventSubscription.

        String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.    # noqa: E501

        :param gpsi: The gpsi of this AmfEventSubscription.
        :type gpsi: str
        """
        if gpsi is not None and not re.search(r'^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$', gpsi):  # noqa: E501
            raise ValueError("Invalid value for `gpsi`, must be a follow pattern or equal to `/^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$/`")  # noqa: E501

        self._gpsi = gpsi

    @property
    def pei(self):
        """Gets the pei of this AmfEventSubscription.

        String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.    # noqa: E501

        :return: The pei of this AmfEventSubscription.
        :rtype: str
        """
        return self._pei

    @pei.setter
    def pei(self, pei):
        """Sets the pei of this AmfEventSubscription.

        String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.    # noqa: E501

        :param pei: The pei of this AmfEventSubscription.
        :type pei: str
        """
        if pei is not None and not re.search(r'^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$', pei):  # noqa: E501
            raise ValueError("Invalid value for `pei`, must be a follow pattern or equal to `/^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$/`")  # noqa: E501

        self._pei = pei

    @property
    def any_ue(self):
        """Gets the any_ue of this AmfEventSubscription.


        :return: The any_ue of this AmfEventSubscription.
        :rtype: bool
        """
        return self._any_ue

    @any_ue.setter
    def any_ue(self, any_ue):
        """Sets the any_ue of this AmfEventSubscription.


        :param any_ue: The any_ue of this AmfEventSubscription.
        :type any_ue: bool
        """

        self._any_ue = any_ue

    @property
    def options(self):
        """Gets the options of this AmfEventSubscription.


        :return: The options of this AmfEventSubscription.
        :rtype: AmfEventMode
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this AmfEventSubscription.


        :param options: The options of this AmfEventSubscription.
        :type options: AmfEventMode
        """

        self._options = options

    @property
    def source_nf_type(self):
        """Gets the source_nf_type of this AmfEventSubscription.


        :return: The source_nf_type of this AmfEventSubscription.
        :rtype: NFType
        """
        return self._source_nf_type

    @source_nf_type.setter
    def source_nf_type(self, source_nf_type):
        """Sets the source_nf_type of this AmfEventSubscription.


        :param source_nf_type: The source_nf_type of this AmfEventSubscription.
        :type source_nf_type: NFType
        """

        self._source_nf_type = source_nf_type
