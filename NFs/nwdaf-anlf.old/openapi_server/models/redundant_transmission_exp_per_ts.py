# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class RedundantTransmissionExpPerTS(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ts_start=None, ts_duration=None, red_trans_exp=None, ue_ratio=None, confidence=None):  # noqa: E501
        """RedundantTransmissionExpPerTS - a model defined in OpenAPI

        :param ts_start: The ts_start of this RedundantTransmissionExpPerTS.  # noqa: E501
        :type ts_start: datetime
        :param ts_duration: The ts_duration of this RedundantTransmissionExpPerTS.  # noqa: E501
        :type ts_duration: int
        :param red_trans_exp: The red_trans_exp of this RedundantTransmissionExpPerTS.  # noqa: E501
        :type red_trans_exp: str
        :param ue_ratio: The ue_ratio of this RedundantTransmissionExpPerTS.  # noqa: E501
        :type ue_ratio: int
        :param confidence: The confidence of this RedundantTransmissionExpPerTS.  # noqa: E501
        :type confidence: int
        """
        self.openapi_types = {
            'ts_start': datetime,
            'ts_duration': int,
            'red_trans_exp': str,
            'ue_ratio': int,
            'confidence': int
        }

        self.attribute_map = {
            'ts_start': 'tsStart',
            'ts_duration': 'tsDuration',
            'red_trans_exp': 'redTransExp',
            'ue_ratio': 'ueRatio',
            'confidence': 'confidence'
        }

        self.ts_start = ts_start
        self.ts_duration = ts_duration
        self.red_trans_exp = red_trans_exp
        self.ue_ratio = ue_ratio
        self.confidence = confidence

    @classmethod
    def from_dict(cls, dikt) -> 'RedundantTransmissionExpPerTS':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RedundantTransmissionExpPerTS of this RedundantTransmissionExpPerTS.  # noqa: E501
        :rtype: RedundantTransmissionExpPerTS
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ts_start(self):
        """Gets the ts_start of this RedundantTransmissionExpPerTS.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The ts_start of this RedundantTransmissionExpPerTS.
        :rtype: datetime
        """
        return self._ts_start

    @ts_start.setter
    def ts_start(self, ts_start):
        """Sets the ts_start of this RedundantTransmissionExpPerTS.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param ts_start: The ts_start of this RedundantTransmissionExpPerTS.
        :type ts_start: datetime
        """
        if ts_start is None:
            raise ValueError("Invalid value for `ts_start`, must not be `None`")  # noqa: E501

        self._ts_start = ts_start

    @property
    def ts_duration(self):
        """Gets the ts_duration of this RedundantTransmissionExpPerTS.

        indicating a time in seconds.  # noqa: E501

        :return: The ts_duration of this RedundantTransmissionExpPerTS.
        :rtype: int
        """
        return self._ts_duration

    @ts_duration.setter
    def ts_duration(self, ts_duration):
        """Sets the ts_duration of this RedundantTransmissionExpPerTS.

        indicating a time in seconds.  # noqa: E501

        :param ts_duration: The ts_duration of this RedundantTransmissionExpPerTS.
        :type ts_duration: int
        """
        if ts_duration is None:
            raise ValueError("Invalid value for `ts_duration`, must not be `None`")  # noqa: E501

        self._ts_duration = ts_duration

    @property
    def red_trans_exp(self):
        """Gets the red_trans_exp of this RedundantTransmissionExpPerTS.


        :return: The red_trans_exp of this RedundantTransmissionExpPerTS.
        :rtype: str
        """
        return self._red_trans_exp

    @red_trans_exp.setter
    def red_trans_exp(self, red_trans_exp):
        """Sets the red_trans_exp of this RedundantTransmissionExpPerTS.


        :param red_trans_exp: The red_trans_exp of this RedundantTransmissionExpPerTS.
        :type red_trans_exp: str
        """
        if red_trans_exp is None:
            raise ValueError("Invalid value for `red_trans_exp`, must not be `None`")  # noqa: E501

        self._red_trans_exp = red_trans_exp

    @property
    def ue_ratio(self):
        """Gets the ue_ratio of this RedundantTransmissionExpPerTS.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :return: The ue_ratio of this RedundantTransmissionExpPerTS.
        :rtype: int
        """
        return self._ue_ratio

    @ue_ratio.setter
    def ue_ratio(self, ue_ratio):
        """Sets the ue_ratio of this RedundantTransmissionExpPerTS.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :param ue_ratio: The ue_ratio of this RedundantTransmissionExpPerTS.
        :type ue_ratio: int
        """
        if ue_ratio is not None and ue_ratio > 100:  # noqa: E501
            raise ValueError("Invalid value for `ue_ratio`, must be a value less than or equal to `100`")  # noqa: E501
        if ue_ratio is not None and ue_ratio < 1:  # noqa: E501
            raise ValueError("Invalid value for `ue_ratio`, must be a value greater than or equal to `1`")  # noqa: E501

        self._ue_ratio = ue_ratio

    @property
    def confidence(self):
        """Gets the confidence of this RedundantTransmissionExpPerTS.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The confidence of this RedundantTransmissionExpPerTS.
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this RedundantTransmissionExpPerTS.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param confidence: The confidence of this RedundantTransmissionExpPerTS.
        :type confidence: int
        """
        if confidence is not None and confidence < 0:  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")  # noqa: E501

        self._confidence = confidence
