# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.accuracy import Accuracy
from openapi_server.models.analytics_metadata import AnalyticsMetadata
from openapi_server.models.analytics_metadata_indication import AnalyticsMetadataIndication
from openapi_server import util

from openapi_server.models.accuracy import Accuracy  # noqa: E501
from openapi_server.models.analytics_metadata import AnalyticsMetadata  # noqa: E501
from openapi_server.models.analytics_metadata_indication import AnalyticsMetadataIndication  # noqa: E501

class EventReportingRequirement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accuracy=None, acc_per_subset=None, start_ts=None, end_ts=None, offset_period=None, samp_ratio=None, max_object_nbr=None, max_supi_nbr=None, time_ana_needed=None, ana_meta=None, ana_meta_ind=None):  # noqa: E501
        """EventReportingRequirement - a model defined in OpenAPI

        :param accuracy: The accuracy of this EventReportingRequirement.  # noqa: E501
        :type accuracy: Accuracy
        :param acc_per_subset: The acc_per_subset of this EventReportingRequirement.  # noqa: E501
        :type acc_per_subset: List[Accuracy]
        :param start_ts: The start_ts of this EventReportingRequirement.  # noqa: E501
        :type start_ts: datetime
        :param end_ts: The end_ts of this EventReportingRequirement.  # noqa: E501
        :type end_ts: datetime
        :param offset_period: The offset_period of this EventReportingRequirement.  # noqa: E501
        :type offset_period: int
        :param samp_ratio: The samp_ratio of this EventReportingRequirement.  # noqa: E501
        :type samp_ratio: int
        :param max_object_nbr: The max_object_nbr of this EventReportingRequirement.  # noqa: E501
        :type max_object_nbr: int
        :param max_supi_nbr: The max_supi_nbr of this EventReportingRequirement.  # noqa: E501
        :type max_supi_nbr: int
        :param time_ana_needed: The time_ana_needed of this EventReportingRequirement.  # noqa: E501
        :type time_ana_needed: datetime
        :param ana_meta: The ana_meta of this EventReportingRequirement.  # noqa: E501
        :type ana_meta: List[AnalyticsMetadata]
        :param ana_meta_ind: The ana_meta_ind of this EventReportingRequirement.  # noqa: E501
        :type ana_meta_ind: AnalyticsMetadataIndication
        """
        self.openapi_types = {
            'accuracy': Accuracy,
            'acc_per_subset': List[Accuracy],
            'start_ts': datetime,
            'end_ts': datetime,
            'offset_period': int,
            'samp_ratio': int,
            'max_object_nbr': int,
            'max_supi_nbr': int,
            'time_ana_needed': datetime,
            'ana_meta': List[AnalyticsMetadata],
            'ana_meta_ind': AnalyticsMetadataIndication
        }

        self.attribute_map = {
            'accuracy': 'accuracy',
            'acc_per_subset': 'accPerSubset',
            'start_ts': 'startTs',
            'end_ts': 'endTs',
            'offset_period': 'offsetPeriod',
            'samp_ratio': 'sampRatio',
            'max_object_nbr': 'maxObjectNbr',
            'max_supi_nbr': 'maxSupiNbr',
            'time_ana_needed': 'timeAnaNeeded',
            'ana_meta': 'anaMeta',
            'ana_meta_ind': 'anaMetaInd'
        }

        self.accuracy = accuracy
        self.acc_per_subset = acc_per_subset
        self.start_ts = start_ts
        self.end_ts = end_ts
        self.offset_period = offset_period
        self.samp_ratio = samp_ratio
        self.max_object_nbr = max_object_nbr
        self.max_supi_nbr = max_supi_nbr
        self.time_ana_needed = time_ana_needed
        self.ana_meta = ana_meta
        self.ana_meta_ind = ana_meta_ind

    @classmethod
    def from_dict(cls, dikt) -> 'EventReportingRequirement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventReportingRequirement of this EventReportingRequirement.  # noqa: E501
        :rtype: EventReportingRequirement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy(self):
        """Gets the accuracy of this EventReportingRequirement.


        :return: The accuracy of this EventReportingRequirement.
        :rtype: Accuracy
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this EventReportingRequirement.


        :param accuracy: The accuracy of this EventReportingRequirement.
        :type accuracy: Accuracy
        """

        self._accuracy = accuracy

    @property
    def acc_per_subset(self):
        """Gets the acc_per_subset of this EventReportingRequirement.

        Each element indicates the preferred accuracy level per analytics subset. It may be present if the \"listOfAnaSubsets\" attribute is present in the subscription request when the subscription event is NF_LOAD, UE_COMM, DISPERSION, NETWORK_PERFORMANCE, WLAN_PERFORMANCE, DN_PERFORMANCE or SERVICE_EXPERIENCE.   # noqa: E501

        :return: The acc_per_subset of this EventReportingRequirement.
        :rtype: List[Accuracy]
        """
        return self._acc_per_subset

    @acc_per_subset.setter
    def acc_per_subset(self, acc_per_subset):
        """Sets the acc_per_subset of this EventReportingRequirement.

        Each element indicates the preferred accuracy level per analytics subset. It may be present if the \"listOfAnaSubsets\" attribute is present in the subscription request when the subscription event is NF_LOAD, UE_COMM, DISPERSION, NETWORK_PERFORMANCE, WLAN_PERFORMANCE, DN_PERFORMANCE or SERVICE_EXPERIENCE.   # noqa: E501

        :param acc_per_subset: The acc_per_subset of this EventReportingRequirement.
        :type acc_per_subset: List[Accuracy]
        """
        if acc_per_subset is not None and len(acc_per_subset) < 1:
            raise ValueError("Invalid value for `acc_per_subset`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._acc_per_subset = acc_per_subset

    @property
    def start_ts(self):
        """Gets the start_ts of this EventReportingRequirement.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The start_ts of this EventReportingRequirement.
        :rtype: datetime
        """
        return self._start_ts

    @start_ts.setter
    def start_ts(self, start_ts):
        """Sets the start_ts of this EventReportingRequirement.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param start_ts: The start_ts of this EventReportingRequirement.
        :type start_ts: datetime
        """

        self._start_ts = start_ts

    @property
    def end_ts(self):
        """Gets the end_ts of this EventReportingRequirement.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The end_ts of this EventReportingRequirement.
        :rtype: datetime
        """
        return self._end_ts

    @end_ts.setter
    def end_ts(self, end_ts):
        """Sets the end_ts of this EventReportingRequirement.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param end_ts: The end_ts of this EventReportingRequirement.
        :type end_ts: datetime
        """

        self._end_ts = end_ts

    @property
    def offset_period(self):
        """Gets the offset_period of this EventReportingRequirement.

        Offset period in units of seconds to the reporting time, if the value is negative means  statistics in the past offset period, otherwise a positive value means prediction in the  future offset period. May be present if the \"repPeriod\" attribute is included within the  \"evtReq\" attribute.   # noqa: E501

        :return: The offset_period of this EventReportingRequirement.
        :rtype: int
        """
        return self._offset_period

    @offset_period.setter
    def offset_period(self, offset_period):
        """Sets the offset_period of this EventReportingRequirement.

        Offset period in units of seconds to the reporting time, if the value is negative means  statistics in the past offset period, otherwise a positive value means prediction in the  future offset period. May be present if the \"repPeriod\" attribute is included within the  \"evtReq\" attribute.   # noqa: E501

        :param offset_period: The offset_period of this EventReportingRequirement.
        :type offset_period: int
        """

        self._offset_period = offset_period

    @property
    def samp_ratio(self):
        """Gets the samp_ratio of this EventReportingRequirement.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :return: The samp_ratio of this EventReportingRequirement.
        :rtype: int
        """
        return self._samp_ratio

    @samp_ratio.setter
    def samp_ratio(self, samp_ratio):
        """Sets the samp_ratio of this EventReportingRequirement.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :param samp_ratio: The samp_ratio of this EventReportingRequirement.
        :type samp_ratio: int
        """
        if samp_ratio is not None and samp_ratio > 100:  # noqa: E501
            raise ValueError("Invalid value for `samp_ratio`, must be a value less than or equal to `100`")  # noqa: E501
        if samp_ratio is not None and samp_ratio < 1:  # noqa: E501
            raise ValueError("Invalid value for `samp_ratio`, must be a value greater than or equal to `1`")  # noqa: E501

        self._samp_ratio = samp_ratio

    @property
    def max_object_nbr(self):
        """Gets the max_object_nbr of this EventReportingRequirement.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The max_object_nbr of this EventReportingRequirement.
        :rtype: int
        """
        return self._max_object_nbr

    @max_object_nbr.setter
    def max_object_nbr(self, max_object_nbr):
        """Sets the max_object_nbr of this EventReportingRequirement.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param max_object_nbr: The max_object_nbr of this EventReportingRequirement.
        :type max_object_nbr: int
        """
        if max_object_nbr is not None and max_object_nbr < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_object_nbr`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_object_nbr = max_object_nbr

    @property
    def max_supi_nbr(self):
        """Gets the max_supi_nbr of this EventReportingRequirement.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The max_supi_nbr of this EventReportingRequirement.
        :rtype: int
        """
        return self._max_supi_nbr

    @max_supi_nbr.setter
    def max_supi_nbr(self, max_supi_nbr):
        """Sets the max_supi_nbr of this EventReportingRequirement.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param max_supi_nbr: The max_supi_nbr of this EventReportingRequirement.
        :type max_supi_nbr: int
        """
        if max_supi_nbr is not None and max_supi_nbr < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_supi_nbr`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_supi_nbr = max_supi_nbr

    @property
    def time_ana_needed(self):
        """Gets the time_ana_needed of this EventReportingRequirement.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The time_ana_needed of this EventReportingRequirement.
        :rtype: datetime
        """
        return self._time_ana_needed

    @time_ana_needed.setter
    def time_ana_needed(self, time_ana_needed):
        """Sets the time_ana_needed of this EventReportingRequirement.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param time_ana_needed: The time_ana_needed of this EventReportingRequirement.
        :type time_ana_needed: datetime
        """

        self._time_ana_needed = time_ana_needed

    @property
    def ana_meta(self):
        """Gets the ana_meta of this EventReportingRequirement.


        :return: The ana_meta of this EventReportingRequirement.
        :rtype: List[AnalyticsMetadata]
        """
        return self._ana_meta

    @ana_meta.setter
    def ana_meta(self, ana_meta):
        """Sets the ana_meta of this EventReportingRequirement.


        :param ana_meta: The ana_meta of this EventReportingRequirement.
        :type ana_meta: List[AnalyticsMetadata]
        """
        if ana_meta is not None and len(ana_meta) < 1:
            raise ValueError("Invalid value for `ana_meta`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ana_meta = ana_meta

    @property
    def ana_meta_ind(self):
        """Gets the ana_meta_ind of this EventReportingRequirement.


        :return: The ana_meta_ind of this EventReportingRequirement.
        :rtype: AnalyticsMetadataIndication
        """
        return self._ana_meta_ind

    @ana_meta_ind.setter
    def ana_meta_ind(self, ana_meta_ind):
        """Sets the ana_meta_ind of this EventReportingRequirement.


        :param ana_meta_ind: The ana_meta_ind of this EventReportingRequirement.
        :type ana_meta_ind: AnalyticsMetadataIndication
        """

        self._ana_meta_ind = ana_meta_ind
