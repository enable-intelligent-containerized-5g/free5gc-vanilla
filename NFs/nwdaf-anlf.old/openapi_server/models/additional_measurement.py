# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.address_list import AddressList
from openapi_server.models.circumstance_description import CircumstanceDescription
from openapi_server.models.ip_eth_flow_description import IpEthFlowDescription
from openapi_server.models.network_area_info import NetworkAreaInfo
from openapi_server import util

from openapi_server.models.address_list import AddressList  # noqa: E501
from openapi_server.models.circumstance_description import CircumstanceDescription  # noqa: E501
from openapi_server.models.ip_eth_flow_description import IpEthFlowDescription  # noqa: E501
from openapi_server.models.network_area_info import NetworkAreaInfo  # noqa: E501

class AdditionalMeasurement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, unexp_loc=None, unexp_flow_teps=None, unexp_wakes=None, ddos_attack=None, wrg_dest=None, circums=None):  # noqa: E501
        """AdditionalMeasurement - a model defined in OpenAPI

        :param unexp_loc: The unexp_loc of this AdditionalMeasurement.  # noqa: E501
        :type unexp_loc: NetworkAreaInfo
        :param unexp_flow_teps: The unexp_flow_teps of this AdditionalMeasurement.  # noqa: E501
        :type unexp_flow_teps: List[IpEthFlowDescription]
        :param unexp_wakes: The unexp_wakes of this AdditionalMeasurement.  # noqa: E501
        :type unexp_wakes: List[datetime]
        :param ddos_attack: The ddos_attack of this AdditionalMeasurement.  # noqa: E501
        :type ddos_attack: AddressList
        :param wrg_dest: The wrg_dest of this AdditionalMeasurement.  # noqa: E501
        :type wrg_dest: AddressList
        :param circums: The circums of this AdditionalMeasurement.  # noqa: E501
        :type circums: List[CircumstanceDescription]
        """
        self.openapi_types = {
            'unexp_loc': NetworkAreaInfo,
            'unexp_flow_teps': List[IpEthFlowDescription],
            'unexp_wakes': List[datetime],
            'ddos_attack': AddressList,
            'wrg_dest': AddressList,
            'circums': List[CircumstanceDescription]
        }

        self.attribute_map = {
            'unexp_loc': 'unexpLoc',
            'unexp_flow_teps': 'unexpFlowTeps',
            'unexp_wakes': 'unexpWakes',
            'ddos_attack': 'ddosAttack',
            'wrg_dest': 'wrgDest',
            'circums': 'circums'
        }

        self.unexp_loc = unexp_loc
        self.unexp_flow_teps = unexp_flow_teps
        self.unexp_wakes = unexp_wakes
        self.ddos_attack = ddos_attack
        self.wrg_dest = wrg_dest
        self.circums = circums

    @classmethod
    def from_dict(cls, dikt) -> 'AdditionalMeasurement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdditionalMeasurement of this AdditionalMeasurement.  # noqa: E501
        :rtype: AdditionalMeasurement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unexp_loc(self):
        """Gets the unexp_loc of this AdditionalMeasurement.


        :return: The unexp_loc of this AdditionalMeasurement.
        :rtype: NetworkAreaInfo
        """
        return self._unexp_loc

    @unexp_loc.setter
    def unexp_loc(self, unexp_loc):
        """Sets the unexp_loc of this AdditionalMeasurement.


        :param unexp_loc: The unexp_loc of this AdditionalMeasurement.
        :type unexp_loc: NetworkAreaInfo
        """

        self._unexp_loc = unexp_loc

    @property
    def unexp_flow_teps(self):
        """Gets the unexp_flow_teps of this AdditionalMeasurement.


        :return: The unexp_flow_teps of this AdditionalMeasurement.
        :rtype: List[IpEthFlowDescription]
        """
        return self._unexp_flow_teps

    @unexp_flow_teps.setter
    def unexp_flow_teps(self, unexp_flow_teps):
        """Sets the unexp_flow_teps of this AdditionalMeasurement.


        :param unexp_flow_teps: The unexp_flow_teps of this AdditionalMeasurement.
        :type unexp_flow_teps: List[IpEthFlowDescription]
        """
        if unexp_flow_teps is not None and len(unexp_flow_teps) < 1:
            raise ValueError("Invalid value for `unexp_flow_teps`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._unexp_flow_teps = unexp_flow_teps

    @property
    def unexp_wakes(self):
        """Gets the unexp_wakes of this AdditionalMeasurement.


        :return: The unexp_wakes of this AdditionalMeasurement.
        :rtype: List[datetime]
        """
        return self._unexp_wakes

    @unexp_wakes.setter
    def unexp_wakes(self, unexp_wakes):
        """Sets the unexp_wakes of this AdditionalMeasurement.


        :param unexp_wakes: The unexp_wakes of this AdditionalMeasurement.
        :type unexp_wakes: List[datetime]
        """
        if unexp_wakes is not None and len(unexp_wakes) < 1:
            raise ValueError("Invalid value for `unexp_wakes`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._unexp_wakes = unexp_wakes

    @property
    def ddos_attack(self):
        """Gets the ddos_attack of this AdditionalMeasurement.


        :return: The ddos_attack of this AdditionalMeasurement.
        :rtype: AddressList
        """
        return self._ddos_attack

    @ddos_attack.setter
    def ddos_attack(self, ddos_attack):
        """Sets the ddos_attack of this AdditionalMeasurement.


        :param ddos_attack: The ddos_attack of this AdditionalMeasurement.
        :type ddos_attack: AddressList
        """

        self._ddos_attack = ddos_attack

    @property
    def wrg_dest(self):
        """Gets the wrg_dest of this AdditionalMeasurement.


        :return: The wrg_dest of this AdditionalMeasurement.
        :rtype: AddressList
        """
        return self._wrg_dest

    @wrg_dest.setter
    def wrg_dest(self, wrg_dest):
        """Sets the wrg_dest of this AdditionalMeasurement.


        :param wrg_dest: The wrg_dest of this AdditionalMeasurement.
        :type wrg_dest: AddressList
        """

        self._wrg_dest = wrg_dest

    @property
    def circums(self):
        """Gets the circums of this AdditionalMeasurement.


        :return: The circums of this AdditionalMeasurement.
        :rtype: List[CircumstanceDescription]
        """
        return self._circums

    @circums.setter
    def circums(self, circums):
        """Sets the circums of this AdditionalMeasurement.


        :param circums: The circums of this AdditionalMeasurement.
        :type circums: List[CircumstanceDescription]
        """
        if circums is not None and len(circums) < 1:
            raise ValueError("Invalid value for `circums`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._circums = circums
