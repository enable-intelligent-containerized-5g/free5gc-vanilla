# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class PerfData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avg_traffic_rate=None, max_traffic_rate=None, ave_packet_delay=None, max_packet_delay=None, avg_packet_loss_rate=None):  # noqa: E501
        """PerfData - a model defined in OpenAPI

        :param avg_traffic_rate: The avg_traffic_rate of this PerfData.  # noqa: E501
        :type avg_traffic_rate: str
        :param max_traffic_rate: The max_traffic_rate of this PerfData.  # noqa: E501
        :type max_traffic_rate: str
        :param ave_packet_delay: The ave_packet_delay of this PerfData.  # noqa: E501
        :type ave_packet_delay: int
        :param max_packet_delay: The max_packet_delay of this PerfData.  # noqa: E501
        :type max_packet_delay: int
        :param avg_packet_loss_rate: The avg_packet_loss_rate of this PerfData.  # noqa: E501
        :type avg_packet_loss_rate: int
        """
        self.openapi_types = {
            'avg_traffic_rate': str,
            'max_traffic_rate': str,
            'ave_packet_delay': int,
            'max_packet_delay': int,
            'avg_packet_loss_rate': int
        }

        self.attribute_map = {
            'avg_traffic_rate': 'avgTrafficRate',
            'max_traffic_rate': 'maxTrafficRate',
            'ave_packet_delay': 'avePacketDelay',
            'max_packet_delay': 'maxPacketDelay',
            'avg_packet_loss_rate': 'avgPacketLossRate'
        }

        self.avg_traffic_rate = avg_traffic_rate
        self.max_traffic_rate = max_traffic_rate
        self.ave_packet_delay = ave_packet_delay
        self.max_packet_delay = max_packet_delay
        self.avg_packet_loss_rate = avg_packet_loss_rate

    @classmethod
    def from_dict(cls, dikt) -> 'PerfData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PerfData of this PerfData.  # noqa: E501
        :rtype: PerfData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg_traffic_rate(self):
        """Gets the avg_traffic_rate of this PerfData.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :return: The avg_traffic_rate of this PerfData.
        :rtype: str
        """
        return self._avg_traffic_rate

    @avg_traffic_rate.setter
    def avg_traffic_rate(self, avg_traffic_rate):
        """Sets the avg_traffic_rate of this PerfData.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :param avg_traffic_rate: The avg_traffic_rate of this PerfData.
        :type avg_traffic_rate: str
        """
        if avg_traffic_rate is not None and not re.search(r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$', avg_traffic_rate):  # noqa: E501
            raise ValueError("Invalid value for `avg_traffic_rate`, must be a follow pattern or equal to `/^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/`")  # noqa: E501

        self._avg_traffic_rate = avg_traffic_rate

    @property
    def max_traffic_rate(self):
        """Gets the max_traffic_rate of this PerfData.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :return: The max_traffic_rate of this PerfData.
        :rtype: str
        """
        return self._max_traffic_rate

    @max_traffic_rate.setter
    def max_traffic_rate(self, max_traffic_rate):
        """Sets the max_traffic_rate of this PerfData.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :param max_traffic_rate: The max_traffic_rate of this PerfData.
        :type max_traffic_rate: str
        """
        if max_traffic_rate is not None and not re.search(r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$', max_traffic_rate):  # noqa: E501
            raise ValueError("Invalid value for `max_traffic_rate`, must be a follow pattern or equal to `/^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/`")  # noqa: E501

        self._max_traffic_rate = max_traffic_rate

    @property
    def ave_packet_delay(self):
        """Gets the ave_packet_delay of this PerfData.

        Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds.   # noqa: E501

        :return: The ave_packet_delay of this PerfData.
        :rtype: int
        """
        return self._ave_packet_delay

    @ave_packet_delay.setter
    def ave_packet_delay(self, ave_packet_delay):
        """Sets the ave_packet_delay of this PerfData.

        Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds.   # noqa: E501

        :param ave_packet_delay: The ave_packet_delay of this PerfData.
        :type ave_packet_delay: int
        """
        if ave_packet_delay is not None and ave_packet_delay < 1:  # noqa: E501
            raise ValueError("Invalid value for `ave_packet_delay`, must be a value greater than or equal to `1`")  # noqa: E501

        self._ave_packet_delay = ave_packet_delay

    @property
    def max_packet_delay(self):
        """Gets the max_packet_delay of this PerfData.

        Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds.   # noqa: E501

        :return: The max_packet_delay of this PerfData.
        :rtype: int
        """
        return self._max_packet_delay

    @max_packet_delay.setter
    def max_packet_delay(self, max_packet_delay):
        """Sets the max_packet_delay of this PerfData.

        Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds.   # noqa: E501

        :param max_packet_delay: The max_packet_delay of this PerfData.
        :type max_packet_delay: int
        """
        if max_packet_delay is not None and max_packet_delay < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_packet_delay`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_packet_delay = max_packet_delay

    @property
    def avg_packet_loss_rate(self):
        """Gets the avg_packet_loss_rate of this PerfData.

        Unsigned integer indicating Packet Loss Rate (see clauses 5.7.2.8 and 5.7.4 of 3GPP TS 23.501), expressed in tenth of percent.   # noqa: E501

        :return: The avg_packet_loss_rate of this PerfData.
        :rtype: int
        """
        return self._avg_packet_loss_rate

    @avg_packet_loss_rate.setter
    def avg_packet_loss_rate(self, avg_packet_loss_rate):
        """Sets the avg_packet_loss_rate of this PerfData.

        Unsigned integer indicating Packet Loss Rate (see clauses 5.7.2.8 and 5.7.4 of 3GPP TS 23.501), expressed in tenth of percent.   # noqa: E501

        :param avg_packet_loss_rate: The avg_packet_loss_rate of this PerfData.
        :type avg_packet_loss_rate: int
        """
        if avg_packet_loss_rate is not None and avg_packet_loss_rate > 1000:  # noqa: E501
            raise ValueError("Invalid value for `avg_packet_loss_rate`, must be a value less than or equal to `1000`")  # noqa: E501
        if avg_packet_loss_rate is not None and avg_packet_loss_rate < 0:  # noqa: E501
            raise ValueError("Invalid value for `avg_packet_loss_rate`, must be a value greater than or equal to `0`")  # noqa: E501

        self._avg_packet_loss_rate = avg_packet_loss_rate
