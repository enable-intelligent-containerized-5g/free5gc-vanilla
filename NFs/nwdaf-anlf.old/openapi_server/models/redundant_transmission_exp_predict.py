from openapi_server.models.base_model_ import Model
from openapi_server.models.redundant_transmission_exp_info import RedundantTransmissionExpInfo
from openapi_server import util
from typing import List, Dict  # noqa: F401
from AnLF.model_request import analytic_result

class RedTransExpPredict(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, packetdroprate = None, packetdelay = None):  # noqa: E501
        """RedTransExpOrderingCriterion - a model defined in OpenAPI

        """
        self.openapi_types = {
            'packetdroprate': str,
            'packetdelay': str,
        }

        self.attribute_map = {
            'packetdroprate': 'packetdroprate',
            'packetdelay':'packetdelay'
        }

        self.packetdroprate = packetdroprate
        self.packetdelay= packetdelay

    @classmethod
    def from_dict(cls, dikt) -> 'RedundantTransmissionExpInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RedundantTransmissionExpInfo of this RedundantTransmissionExpInfo.  # noqa: E501
        :rtype: RedundantTransmissionExpInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def packetdroprate(self):
        """Gets the dnn of this RedundantTransmissionExpInfo.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :return: The dnn of this RedundantTransmissionExpInfo.
        :rtype: str
        """

        return self._packetdroprate

    @packetdroprate.setter
    def packetdroprate(self, packetdroprate):
        """Sets the dnn of this RedundantTransmissionExpInfo.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :param dnn: The dnn of this RedundantTransmissionExpInfo.
        :type dnn: str
        """

        packetdroprate = analytic_result()
        self._packetdroprate = packetdroprate


    @property
    def packetdelay(self):
        """Gets the dnn of this RedundantTransmissionExpInfo.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :return: The dnn of this RedundantTransmissionExpInfo.
        :rtype: str
        """
        return self._packetdelay

    @packetdelay.setter
    def packetdelay(self, packetdelay):
        """Sets the dnn of this RedundantTransmissionExpInfo.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :param dnn: The dnn of this RedundantTransmissionExpInfo.
        :type dnn: str
        """
       # avg = str(delay_avg)
        #var = str(delay_var) 
        #packetdelay = "Average: " + avg + "\n" + "Variance: " + var
        #packetdelay = analytic_result()
        self._packetdelay= packetdelay
