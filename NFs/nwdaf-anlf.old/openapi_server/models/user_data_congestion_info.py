# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.congestion_info import CongestionInfo
from openapi_server.models.network_area_info import NetworkAreaInfo
from openapi_server.models.snssai import Snssai
from openapi_server import util

from openapi_server.models.congestion_info import CongestionInfo  # noqa: E501
from openapi_server.models.network_area_info import NetworkAreaInfo  # noqa: E501
from openapi_server.models.snssai import Snssai  # noqa: E501

class UserDataCongestionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network_area=None, congestion_info=None, snssai=None):  # noqa: E501
        """UserDataCongestionInfo - a model defined in OpenAPI

        :param network_area: The network_area of this UserDataCongestionInfo.  # noqa: E501
        :type network_area: NetworkAreaInfo
        :param congestion_info: The congestion_info of this UserDataCongestionInfo.  # noqa: E501
        :type congestion_info: CongestionInfo
        :param snssai: The snssai of this UserDataCongestionInfo.  # noqa: E501
        :type snssai: Snssai
        """
        self.openapi_types = {
            'network_area': NetworkAreaInfo,
            'congestion_info': CongestionInfo,
            'snssai': Snssai
        }

        self.attribute_map = {
            'network_area': 'networkArea',
            'congestion_info': 'congestionInfo',
            'snssai': 'snssai'
        }

        self.network_area = network_area
        self.congestion_info = congestion_info
        self.snssai = snssai

    @classmethod
    def from_dict(cls, dikt) -> 'UserDataCongestionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserDataCongestionInfo of this UserDataCongestionInfo.  # noqa: E501
        :rtype: UserDataCongestionInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_area(self):
        """Gets the network_area of this UserDataCongestionInfo.


        :return: The network_area of this UserDataCongestionInfo.
        :rtype: NetworkAreaInfo
        """
        return self._network_area

    @network_area.setter
    def network_area(self, network_area):
        """Sets the network_area of this UserDataCongestionInfo.


        :param network_area: The network_area of this UserDataCongestionInfo.
        :type network_area: NetworkAreaInfo
        """
        if network_area is None:
            raise ValueError("Invalid value for `network_area`, must not be `None`")  # noqa: E501

        self._network_area = network_area

    @property
    def congestion_info(self):
        """Gets the congestion_info of this UserDataCongestionInfo.


        :return: The congestion_info of this UserDataCongestionInfo.
        :rtype: CongestionInfo
        """
        return self._congestion_info

    @congestion_info.setter
    def congestion_info(self, congestion_info):
        """Sets the congestion_info of this UserDataCongestionInfo.


        :param congestion_info: The congestion_info of this UserDataCongestionInfo.
        :type congestion_info: CongestionInfo
        """
        if congestion_info is None:
            raise ValueError("Invalid value for `congestion_info`, must not be `None`")  # noqa: E501

        self._congestion_info = congestion_info

    @property
    def snssai(self):
        """Gets the snssai of this UserDataCongestionInfo.


        :return: The snssai of this UserDataCongestionInfo.
        :rtype: Snssai
        """
        return self._snssai

    @snssai.setter
    def snssai(self, snssai):
        """Sets the snssai of this UserDataCongestionInfo.


        :param snssai: The snssai of this UserDataCongestionInfo.
        :type snssai: Snssai
        """

        self._snssai = snssai
