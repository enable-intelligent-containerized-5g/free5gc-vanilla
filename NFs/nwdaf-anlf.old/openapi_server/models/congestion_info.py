# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.congestion_type import CongestionType
from openapi_server.models.threshold_level import ThresholdLevel
from openapi_server.models.time_window import TimeWindow
from openapi_server.models.top_application import TopApplication
from openapi_server import util

from openapi_server.models.congestion_type import CongestionType  # noqa: E501
from openapi_server.models.threshold_level import ThresholdLevel  # noqa: E501
from openapi_server.models.time_window import TimeWindow  # noqa: E501
from openapi_server.models.top_application import TopApplication  # noqa: E501

class CongestionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cong_type=None, time_intev=None, nsi=None, confidence=None, top_app_list_ul=None, top_app_list_dl=None):  # noqa: E501
        """CongestionInfo - a model defined in OpenAPI

        :param cong_type: The cong_type of this CongestionInfo.  # noqa: E501
        :type cong_type: CongestionType
        :param time_intev: The time_intev of this CongestionInfo.  # noqa: E501
        :type time_intev: TimeWindow
        :param nsi: The nsi of this CongestionInfo.  # noqa: E501
        :type nsi: ThresholdLevel
        :param confidence: The confidence of this CongestionInfo.  # noqa: E501
        :type confidence: int
        :param top_app_list_ul: The top_app_list_ul of this CongestionInfo.  # noqa: E501
        :type top_app_list_ul: List[TopApplication]
        :param top_app_list_dl: The top_app_list_dl of this CongestionInfo.  # noqa: E501
        :type top_app_list_dl: List[TopApplication]
        """
        self.openapi_types = {
            'cong_type': CongestionType,
            'time_intev': TimeWindow,
            'nsi': ThresholdLevel,
            'confidence': int,
            'top_app_list_ul': List[TopApplication],
            'top_app_list_dl': List[TopApplication]
        }

        self.attribute_map = {
            'cong_type': 'congType',
            'time_intev': 'timeIntev',
            'nsi': 'nsi',
            'confidence': 'confidence',
            'top_app_list_ul': 'topAppListUl',
            'top_app_list_dl': 'topAppListDl'
        }

        self.cong_type = cong_type
        self.time_intev = time_intev
        self.nsi = nsi
        self.confidence = confidence
        self.top_app_list_ul = top_app_list_ul
        self.top_app_list_dl = top_app_list_dl

    @classmethod
    def from_dict(cls, dikt) -> 'CongestionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CongestionInfo of this CongestionInfo.  # noqa: E501
        :rtype: CongestionInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cong_type(self):
        """Gets the cong_type of this CongestionInfo.


        :return: The cong_type of this CongestionInfo.
        :rtype: CongestionType
        """
        return self._cong_type

    @cong_type.setter
    def cong_type(self, cong_type):
        """Sets the cong_type of this CongestionInfo.


        :param cong_type: The cong_type of this CongestionInfo.
        :type cong_type: CongestionType
        """
        if cong_type is None:
            raise ValueError("Invalid value for `cong_type`, must not be `None`")  # noqa: E501

        self._cong_type = cong_type

    @property
    def time_intev(self):
        """Gets the time_intev of this CongestionInfo.


        :return: The time_intev of this CongestionInfo.
        :rtype: TimeWindow
        """
        return self._time_intev

    @time_intev.setter
    def time_intev(self, time_intev):
        """Sets the time_intev of this CongestionInfo.


        :param time_intev: The time_intev of this CongestionInfo.
        :type time_intev: TimeWindow
        """
        if time_intev is None:
            raise ValueError("Invalid value for `time_intev`, must not be `None`")  # noqa: E501

        self._time_intev = time_intev

    @property
    def nsi(self):
        """Gets the nsi of this CongestionInfo.


        :return: The nsi of this CongestionInfo.
        :rtype: ThresholdLevel
        """
        return self._nsi

    @nsi.setter
    def nsi(self, nsi):
        """Sets the nsi of this CongestionInfo.


        :param nsi: The nsi of this CongestionInfo.
        :type nsi: ThresholdLevel
        """
        if nsi is None:
            raise ValueError("Invalid value for `nsi`, must not be `None`")  # noqa: E501

        self._nsi = nsi

    @property
    def confidence(self):
        """Gets the confidence of this CongestionInfo.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The confidence of this CongestionInfo.
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this CongestionInfo.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param confidence: The confidence of this CongestionInfo.
        :type confidence: int
        """
        if confidence is not None and confidence < 0:  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")  # noqa: E501

        self._confidence = confidence

    @property
    def top_app_list_ul(self):
        """Gets the top_app_list_ul of this CongestionInfo.


        :return: The top_app_list_ul of this CongestionInfo.
        :rtype: List[TopApplication]
        """
        return self._top_app_list_ul

    @top_app_list_ul.setter
    def top_app_list_ul(self, top_app_list_ul):
        """Sets the top_app_list_ul of this CongestionInfo.


        :param top_app_list_ul: The top_app_list_ul of this CongestionInfo.
        :type top_app_list_ul: List[TopApplication]
        """
        if top_app_list_ul is not None and len(top_app_list_ul) < 1:
            raise ValueError("Invalid value for `top_app_list_ul`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._top_app_list_ul = top_app_list_ul

    @property
    def top_app_list_dl(self):
        """Gets the top_app_list_dl of this CongestionInfo.


        :return: The top_app_list_dl of this CongestionInfo.
        :rtype: List[TopApplication]
        """
        return self._top_app_list_dl

    @top_app_list_dl.setter
    def top_app_list_dl(self, top_app_list_dl):
        """Sets the top_app_list_dl of this CongestionInfo.


        :param top_app_list_dl: The top_app_list_dl of this CongestionInfo.
        :type top_app_list_dl: List[TopApplication]
        """
        if top_app_list_dl is not None and len(top_app_list_dl) < 1:
            raise ValueError("Invalid value for `top_app_list_dl`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._top_app_list_dl = top_app_list_dl
