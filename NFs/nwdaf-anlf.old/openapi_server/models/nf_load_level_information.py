# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.nf_type import NFType
from openapi_server.models.nf_status import NfStatus
from openapi_server.models.snssai import Snssai
from openapi_server import util

from openapi_server.models.nf_status import NfStatus  # noqa: E501
from openapi_server.models.nf_type import NFType  # noqa: E501
from openapi_server.models.snssai import Snssai  # noqa: E501

class NfLoadLevelInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nf_type=None, nf_instance_id=None, nf_set_id=None, nf_status=None, nf_cpu_usage=None, nf_memory_usage=None, nf_storage_usage=None, nf_load_level_average=None, nf_load_levelpeak=None, nf_load_avg_in_aoi=None, snssai=None, confidence=None):  # noqa: E501
        """NfLoadLevelInformation - a model defined in OpenAPI

        :param nf_type: The nf_type of this NfLoadLevelInformation.  # noqa: E501
        :type nf_type: NFType
        :param nf_instance_id: The nf_instance_id of this NfLoadLevelInformation.  # noqa: E501
        :type nf_instance_id: str
        :param nf_set_id: The nf_set_id of this NfLoadLevelInformation.  # noqa: E501
        :type nf_set_id: str
        :param nf_status: The nf_status of this NfLoadLevelInformation.  # noqa: E501
        :type nf_status: NfStatus
        :param nf_cpu_usage: The nf_cpu_usage of this NfLoadLevelInformation.  # noqa: E501
        :type nf_cpu_usage: int
        :param nf_memory_usage: The nf_memory_usage of this NfLoadLevelInformation.  # noqa: E501
        :type nf_memory_usage: int
        :param nf_storage_usage: The nf_storage_usage of this NfLoadLevelInformation.  # noqa: E501
        :type nf_storage_usage: int
        :param nf_load_level_average: The nf_load_level_average of this NfLoadLevelInformation.  # noqa: E501
        :type nf_load_level_average: int
        :param nf_load_levelpeak: The nf_load_levelpeak of this NfLoadLevelInformation.  # noqa: E501
        :type nf_load_levelpeak: int
        :param nf_load_avg_in_aoi: The nf_load_avg_in_aoi of this NfLoadLevelInformation.  # noqa: E501
        :type nf_load_avg_in_aoi: int
        :param snssai: The snssai of this NfLoadLevelInformation.  # noqa: E501
        :type snssai: Snssai
        :param confidence: The confidence of this NfLoadLevelInformation.  # noqa: E501
        :type confidence: int
        """
        self.openapi_types = {
            'nf_type': NFType,
            'nf_instance_id': str,
            'nf_set_id': str,
            'nf_status': NfStatus,
            'nf_cpu_usage': int,
            'nf_memory_usage': int,
            'nf_storage_usage': int,
            'nf_load_level_average': int,
            'nf_load_levelpeak': int,
            'nf_load_avg_in_aoi': int,
            'snssai': Snssai,
            'confidence': int
        }

        self.attribute_map = {
            'nf_type': 'nfType',
            'nf_instance_id': 'nfInstanceId',
            'nf_set_id': 'nfSetId',
            'nf_status': 'nfStatus',
            'nf_cpu_usage': 'nfCpuUsage',
            'nf_memory_usage': 'nfMemoryUsage',
            'nf_storage_usage': 'nfStorageUsage',
            'nf_load_level_average': 'nfLoadLevelAverage',
            'nf_load_levelpeak': 'nfLoadLevelpeak',
            'nf_load_avg_in_aoi': 'nfLoadAvgInAoi',
            'snssai': 'snssai',
            'confidence': 'confidence'
        }

        self.nf_type = nf_type
        self.nf_instance_id = nf_instance_id
        self.nf_set_id = nf_set_id
        self.nf_status = nf_status
        self.nf_cpu_usage = nf_cpu_usage
        self.nf_memory_usage = nf_memory_usage
        self.nf_storage_usage = nf_storage_usage
        self.nf_load_level_average = nf_load_level_average
        self.nf_load_levelpeak = nf_load_levelpeak
        self.nf_load_avg_in_aoi = nf_load_avg_in_aoi
        self.snssai = snssai
        self.confidence = confidence

    @classmethod
    def from_dict(cls, dikt) -> 'NfLoadLevelInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NfLoadLevelInformation of this NfLoadLevelInformation.  # noqa: E501
        :rtype: NfLoadLevelInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nf_type(self):
        """Gets the nf_type of this NfLoadLevelInformation.


        :return: The nf_type of this NfLoadLevelInformation.
        :rtype: NFType
        """
        return self._nf_type

    @nf_type.setter
    def nf_type(self, nf_type):
        """Sets the nf_type of this NfLoadLevelInformation.


        :param nf_type: The nf_type of this NfLoadLevelInformation.
        :type nf_type: NFType
        """

        self._nf_type = nf_type

    @property
    def nf_instance_id(self):
        """Gets the nf_instance_id of this NfLoadLevelInformation.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :return: The nf_instance_id of this NfLoadLevelInformation.
        :rtype: str
        """
        return self._nf_instance_id

    @nf_instance_id.setter
    def nf_instance_id(self, nf_instance_id):
        """Sets the nf_instance_id of this NfLoadLevelInformation.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :param nf_instance_id: The nf_instance_id of this NfLoadLevelInformation.
        :type nf_instance_id: str
        """

        self._nf_instance_id = nf_instance_id

    @property
    def nf_set_id(self):
        """Gets the nf_set_id of this NfLoadLevelInformation.

        NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.    # noqa: E501

        :return: The nf_set_id of this NfLoadLevelInformation.
        :rtype: str
        """
        return self._nf_set_id

    @nf_set_id.setter
    def nf_set_id(self, nf_set_id):
        """Sets the nf_set_id of this NfLoadLevelInformation.

        NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.    # noqa: E501

        :param nf_set_id: The nf_set_id of this NfLoadLevelInformation.
        :type nf_set_id: str
        """

        self._nf_set_id = nf_set_id

    @property
    def nf_status(self):
        """Gets the nf_status of this NfLoadLevelInformation.


        :return: The nf_status of this NfLoadLevelInformation.
        :rtype: NfStatus
        """
        return self._nf_status

    @nf_status.setter
    def nf_status(self, nf_status):
        """Sets the nf_status of this NfLoadLevelInformation.


        :param nf_status: The nf_status of this NfLoadLevelInformation.
        :type nf_status: NfStatus
        """

        self._nf_status = nf_status

    @property
    def nf_cpu_usage(self):
        """Gets the nf_cpu_usage of this NfLoadLevelInformation.


        :return: The nf_cpu_usage of this NfLoadLevelInformation.
        :rtype: int
        """
        return self._nf_cpu_usage

    @nf_cpu_usage.setter
    def nf_cpu_usage(self, nf_cpu_usage):
        """Sets the nf_cpu_usage of this NfLoadLevelInformation.


        :param nf_cpu_usage: The nf_cpu_usage of this NfLoadLevelInformation.
        :type nf_cpu_usage: int
        """

        self._nf_cpu_usage = nf_cpu_usage

    @property
    def nf_memory_usage(self):
        """Gets the nf_memory_usage of this NfLoadLevelInformation.


        :return: The nf_memory_usage of this NfLoadLevelInformation.
        :rtype: int
        """
        return self._nf_memory_usage

    @nf_memory_usage.setter
    def nf_memory_usage(self, nf_memory_usage):
        """Sets the nf_memory_usage of this NfLoadLevelInformation.


        :param nf_memory_usage: The nf_memory_usage of this NfLoadLevelInformation.
        :type nf_memory_usage: int
        """

        self._nf_memory_usage = nf_memory_usage

    @property
    def nf_storage_usage(self):
        """Gets the nf_storage_usage of this NfLoadLevelInformation.


        :return: The nf_storage_usage of this NfLoadLevelInformation.
        :rtype: int
        """
        return self._nf_storage_usage

    @nf_storage_usage.setter
    def nf_storage_usage(self, nf_storage_usage):
        """Sets the nf_storage_usage of this NfLoadLevelInformation.


        :param nf_storage_usage: The nf_storage_usage of this NfLoadLevelInformation.
        :type nf_storage_usage: int
        """

        self._nf_storage_usage = nf_storage_usage

    @property
    def nf_load_level_average(self):
        """Gets the nf_load_level_average of this NfLoadLevelInformation.


        :return: The nf_load_level_average of this NfLoadLevelInformation.
        :rtype: int
        """
        return self._nf_load_level_average

    @nf_load_level_average.setter
    def nf_load_level_average(self, nf_load_level_average):
        """Sets the nf_load_level_average of this NfLoadLevelInformation.


        :param nf_load_level_average: The nf_load_level_average of this NfLoadLevelInformation.
        :type nf_load_level_average: int
        """

        self._nf_load_level_average = nf_load_level_average

    @property
    def nf_load_levelpeak(self):
        """Gets the nf_load_levelpeak of this NfLoadLevelInformation.


        :return: The nf_load_levelpeak of this NfLoadLevelInformation.
        :rtype: int
        """
        return self._nf_load_levelpeak

    @nf_load_levelpeak.setter
    def nf_load_levelpeak(self, nf_load_levelpeak):
        """Sets the nf_load_levelpeak of this NfLoadLevelInformation.


        :param nf_load_levelpeak: The nf_load_levelpeak of this NfLoadLevelInformation.
        :type nf_load_levelpeak: int
        """

        self._nf_load_levelpeak = nf_load_levelpeak

    @property
    def nf_load_avg_in_aoi(self):
        """Gets the nf_load_avg_in_aoi of this NfLoadLevelInformation.


        :return: The nf_load_avg_in_aoi of this NfLoadLevelInformation.
        :rtype: int
        """
        return self._nf_load_avg_in_aoi

    @nf_load_avg_in_aoi.setter
    def nf_load_avg_in_aoi(self, nf_load_avg_in_aoi):
        """Sets the nf_load_avg_in_aoi of this NfLoadLevelInformation.


        :param nf_load_avg_in_aoi: The nf_load_avg_in_aoi of this NfLoadLevelInformation.
        :type nf_load_avg_in_aoi: int
        """

        self._nf_load_avg_in_aoi = nf_load_avg_in_aoi

    @property
    def snssai(self):
        """Gets the snssai of this NfLoadLevelInformation.


        :return: The snssai of this NfLoadLevelInformation.
        :rtype: Snssai
        """
        return self._snssai

    @snssai.setter
    def snssai(self, snssai):
        """Sets the snssai of this NfLoadLevelInformation.


        :param snssai: The snssai of this NfLoadLevelInformation.
        :type snssai: Snssai
        """

        self._snssai = snssai

    @property
    def confidence(self):
        """Gets the confidence of this NfLoadLevelInformation.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The confidence of this NfLoadLevelInformation.
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this NfLoadLevelInformation.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param confidence: The confidence of this NfLoadLevelInformation.
        :type confidence: int
        """
        if confidence is not None and confidence < 0:  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")  # noqa: E501

        self._confidence = confidence
