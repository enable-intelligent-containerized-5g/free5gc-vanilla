# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.tai import Tai
from openapi_server.models.tai_range import TaiRange
from openapi_server import util

from openapi_server.models.tai import Tai  # noqa: E501
from openapi_server.models.tai_range import TaiRange  # noqa: E501

class TargetArea(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ta_list=None, tai_range_list=None, any_ta=False):  # noqa: E501
        """TargetArea - a model defined in OpenAPI

        :param ta_list: The ta_list of this TargetArea.  # noqa: E501
        :type ta_list: List[Tai]
        :param tai_range_list: The tai_range_list of this TargetArea.  # noqa: E501
        :type tai_range_list: List[TaiRange]
        :param any_ta: The any_ta of this TargetArea.  # noqa: E501
        :type any_ta: bool
        """
        self.openapi_types = {
            'ta_list': List[Tai],
            'tai_range_list': List[TaiRange],
            'any_ta': bool
        }

        self.attribute_map = {
            'ta_list': 'taList',
            'tai_range_list': 'taiRangeList',
            'any_ta': 'anyTa'
        }

        self.ta_list = ta_list
        self.tai_range_list = tai_range_list
        self.any_ta = any_ta

    @classmethod
    def from_dict(cls, dikt) -> 'TargetArea':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TargetArea of this TargetArea.  # noqa: E501
        :rtype: TargetArea
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ta_list(self):
        """Gets the ta_list of this TargetArea.


        :return: The ta_list of this TargetArea.
        :rtype: List[Tai]
        """
        return self._ta_list

    @ta_list.setter
    def ta_list(self, ta_list):
        """Sets the ta_list of this TargetArea.


        :param ta_list: The ta_list of this TargetArea.
        :type ta_list: List[Tai]
        """
        if ta_list is not None and len(ta_list) < 1:
            raise ValueError("Invalid value for `ta_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ta_list = ta_list

    @property
    def tai_range_list(self):
        """Gets the tai_range_list of this TargetArea.


        :return: The tai_range_list of this TargetArea.
        :rtype: List[TaiRange]
        """
        return self._tai_range_list

    @tai_range_list.setter
    def tai_range_list(self, tai_range_list):
        """Sets the tai_range_list of this TargetArea.


        :param tai_range_list: The tai_range_list of this TargetArea.
        :type tai_range_list: List[TaiRange]
        """
        if tai_range_list is not None and len(tai_range_list) < 1:
            raise ValueError("Invalid value for `tai_range_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tai_range_list = tai_range_list

    @property
    def any_ta(self):
        """Gets the any_ta of this TargetArea.


        :return: The any_ta of this TargetArea.
        :rtype: bool
        """
        return self._any_ta

    @any_ta.setter
    def any_ta(self, any_ta):
        """Sets the any_ta of this TargetArea.


        :param any_ta: The any_ta of this TargetArea.
        :type any_ta: bool
        """

        self._any_ta = any_ta
