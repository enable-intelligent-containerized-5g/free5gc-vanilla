# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ipv6_addr import Ipv6Addr
from openapi_server import util

from openapi_server.models.ipv6_addr import Ipv6Addr  # noqa: E501

class AddressList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ipv4_addrs=None, ipv6_addrs=None):  # noqa: E501
        """AddressList - a model defined in OpenAPI

        :param ipv4_addrs: The ipv4_addrs of this AddressList.  # noqa: E501
        :type ipv4_addrs: List[str]
        :param ipv6_addrs: The ipv6_addrs of this AddressList.  # noqa: E501
        :type ipv6_addrs: List[Ipv6Addr]
        """
        self.openapi_types = {
            'ipv4_addrs': List[str],
            'ipv6_addrs': List[Ipv6Addr]
        }

        self.attribute_map = {
            'ipv4_addrs': 'ipv4Addrs',
            'ipv6_addrs': 'ipv6Addrs'
        }

        self.ipv4_addrs = ipv4_addrs
        self.ipv6_addrs = ipv6_addrs

    @classmethod
    def from_dict(cls, dikt) -> 'AddressList':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AddressList of this AddressList.  # noqa: E501
        :rtype: AddressList
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ipv4_addrs(self):
        """Gets the ipv4_addrs of this AddressList.


        :return: The ipv4_addrs of this AddressList.
        :rtype: List[str]
        """
        return self._ipv4_addrs

    @ipv4_addrs.setter
    def ipv4_addrs(self, ipv4_addrs):
        """Sets the ipv4_addrs of this AddressList.


        :param ipv4_addrs: The ipv4_addrs of this AddressList.
        :type ipv4_addrs: List[str]
        """
        if ipv4_addrs is not None and len(ipv4_addrs) < 1:
            raise ValueError("Invalid value for `ipv4_addrs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ipv4_addrs = ipv4_addrs

    @property
    def ipv6_addrs(self):
        """Gets the ipv6_addrs of this AddressList.


        :return: The ipv6_addrs of this AddressList.
        :rtype: List[Ipv6Addr]
        """
        return self._ipv6_addrs

    @ipv6_addrs.setter
    def ipv6_addrs(self, ipv6_addrs):
        """Sets the ipv6_addrs of this AddressList.


        :param ipv6_addrs: The ipv6_addrs of this AddressList.
        :type ipv6_addrs: List[Ipv6Addr]
        """
        if ipv6_addrs is not None and len(ipv6_addrs) < 1:
            raise ValueError("Invalid value for `ipv6_addrs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ipv6_addrs = ipv6_addrs
