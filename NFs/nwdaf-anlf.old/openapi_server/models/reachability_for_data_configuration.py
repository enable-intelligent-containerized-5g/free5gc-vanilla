# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.reachability_for_data_report_config import ReachabilityForDataReportConfig
from openapi_server import util

from openapi_server.models.reachability_for_data_report_config import ReachabilityForDataReportConfig  # noqa: E501

class ReachabilityForDataConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_cfg=None, min_interval=None):  # noqa: E501
        """ReachabilityForDataConfiguration - a model defined in OpenAPI

        :param report_cfg: The report_cfg of this ReachabilityForDataConfiguration.  # noqa: E501
        :type report_cfg: ReachabilityForDataReportConfig
        :param min_interval: The min_interval of this ReachabilityForDataConfiguration.  # noqa: E501
        :type min_interval: int
        """
        self.openapi_types = {
            'report_cfg': ReachabilityForDataReportConfig,
            'min_interval': int
        }

        self.attribute_map = {
            'report_cfg': 'reportCfg',
            'min_interval': 'minInterval'
        }

        self.report_cfg = report_cfg
        self.min_interval = min_interval

    @classmethod
    def from_dict(cls, dikt) -> 'ReachabilityForDataConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReachabilityForDataConfiguration of this ReachabilityForDataConfiguration.  # noqa: E501
        :rtype: ReachabilityForDataConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_cfg(self):
        """Gets the report_cfg of this ReachabilityForDataConfiguration.


        :return: The report_cfg of this ReachabilityForDataConfiguration.
        :rtype: ReachabilityForDataReportConfig
        """
        return self._report_cfg

    @report_cfg.setter
    def report_cfg(self, report_cfg):
        """Sets the report_cfg of this ReachabilityForDataConfiguration.


        :param report_cfg: The report_cfg of this ReachabilityForDataConfiguration.
        :type report_cfg: ReachabilityForDataReportConfig
        """
        if report_cfg is None:
            raise ValueError("Invalid value for `report_cfg`, must not be `None`")  # noqa: E501

        self._report_cfg = report_cfg

    @property
    def min_interval(self):
        """Gets the min_interval of this ReachabilityForDataConfiguration.

        indicating a time in seconds.  # noqa: E501

        :return: The min_interval of this ReachabilityForDataConfiguration.
        :rtype: int
        """
        return self._min_interval

    @min_interval.setter
    def min_interval(self, min_interval):
        """Sets the min_interval of this ReachabilityForDataConfiguration.

        indicating a time in seconds.  # noqa: E501

        :param min_interval: The min_interval of this ReachabilityForDataConfiguration.
        :type min_interval: int
        """

        self._min_interval = min_interval
