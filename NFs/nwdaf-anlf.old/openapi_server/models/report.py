# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.access_type import AccessType
from openapi_server.models.change_of_supi_pei_association_report import ChangeOfSupiPeiAssociationReport
from openapi_server.models.cm_info import CmInfo
from openapi_server.models.cm_info_report import CmInfoReport
from openapi_server.models.cn_type import CnType
from openapi_server.models.cn_type_change_report import CnTypeChangeReport
from openapi_server.models.ipv6_addr import Ipv6Addr
from openapi_server.models.ipv6_prefix import Ipv6Prefix
from openapi_server.models.location_report import LocationReport
from openapi_server.models.loss_connectivity_report import LossConnectivityReport
from openapi_server.models.loss_of_connectivity_reason import LossOfConnectivityReason
from openapi_server.models.pdn_connectivity_stat_report import PdnConnectivityStatReport
from openapi_server.models.pdn_connectivity_status import PdnConnectivityStatus
from openapi_server.models.pdu_session_type import PduSessionType
from openapi_server.models.plmn_id import PlmnId
from openapi_server.models.roaming_status_report import RoamingStatusReport
from openapi_server.models.user_location import UserLocation
import re
from openapi_server import util

from openapi_server.models.access_type import AccessType  # noqa: E501
from openapi_server.models.change_of_supi_pei_association_report import ChangeOfSupiPeiAssociationReport  # noqa: E501
from openapi_server.models.cm_info import CmInfo  # noqa: E501
from openapi_server.models.cm_info_report import CmInfoReport  # noqa: E501
from openapi_server.models.cn_type import CnType  # noqa: E501
from openapi_server.models.cn_type_change_report import CnTypeChangeReport  # noqa: E501
from openapi_server.models.ipv6_addr import Ipv6Addr  # noqa: E501
from openapi_server.models.ipv6_prefix import Ipv6Prefix  # noqa: E501
from openapi_server.models.location_report import LocationReport  # noqa: E501
from openapi_server.models.loss_connectivity_report import LossConnectivityReport  # noqa: E501
from openapi_server.models.loss_of_connectivity_reason import LossOfConnectivityReason  # noqa: E501
from openapi_server.models.pdn_connectivity_stat_report import PdnConnectivityStatReport  # noqa: E501
from openapi_server.models.pdn_connectivity_status import PdnConnectivityStatus  # noqa: E501
from openapi_server.models.pdu_session_type import PduSessionType  # noqa: E501
from openapi_server.models.plmn_id import PlmnId  # noqa: E501
from openapi_server.models.roaming_status_report import RoamingStatusReport  # noqa: E501
from openapi_server.models.user_location import UserLocation  # noqa: E501
import re  # noqa: E501

class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_pei=None, roaming=None, new_serving_plmn=None, access_type=None, new_cn_type=None, old_cn_type=None, old_cm_info_list=None, new_cm_info_list=None, loss_of_connect_reason=None, location=None, pdn_conn_stat=None, dnn=None, pdu_se_id=None, ipv4_addr=None, ipv6_prefixes=None, ipv6_addrs=None, pdu_sess_type=None):  # noqa: E501
        """Report - a model defined in OpenAPI

        :param new_pei: The new_pei of this Report.  # noqa: E501
        :type new_pei: str
        :param roaming: The roaming of this Report.  # noqa: E501
        :type roaming: bool
        :param new_serving_plmn: The new_serving_plmn of this Report.  # noqa: E501
        :type new_serving_plmn: PlmnId
        :param access_type: The access_type of this Report.  # noqa: E501
        :type access_type: AccessType
        :param new_cn_type: The new_cn_type of this Report.  # noqa: E501
        :type new_cn_type: CnType
        :param old_cn_type: The old_cn_type of this Report.  # noqa: E501
        :type old_cn_type: CnType
        :param old_cm_info_list: The old_cm_info_list of this Report.  # noqa: E501
        :type old_cm_info_list: List[CmInfo]
        :param new_cm_info_list: The new_cm_info_list of this Report.  # noqa: E501
        :type new_cm_info_list: List[CmInfo]
        :param loss_of_connect_reason: The loss_of_connect_reason of this Report.  # noqa: E501
        :type loss_of_connect_reason: LossOfConnectivityReason
        :param location: The location of this Report.  # noqa: E501
        :type location: UserLocation
        :param pdn_conn_stat: The pdn_conn_stat of this Report.  # noqa: E501
        :type pdn_conn_stat: PdnConnectivityStatus
        :param dnn: The dnn of this Report.  # noqa: E501
        :type dnn: str
        :param pdu_se_id: The pdu_se_id of this Report.  # noqa: E501
        :type pdu_se_id: int
        :param ipv4_addr: The ipv4_addr of this Report.  # noqa: E501
        :type ipv4_addr: str
        :param ipv6_prefixes: The ipv6_prefixes of this Report.  # noqa: E501
        :type ipv6_prefixes: List[Ipv6Prefix]
        :param ipv6_addrs: The ipv6_addrs of this Report.  # noqa: E501
        :type ipv6_addrs: List[Ipv6Addr]
        :param pdu_sess_type: The pdu_sess_type of this Report.  # noqa: E501
        :type pdu_sess_type: PduSessionType
        """
        self.openapi_types = {
            'new_pei': str,
            'roaming': bool,
            'new_serving_plmn': PlmnId,
            'access_type': AccessType,
            'new_cn_type': CnType,
            'old_cn_type': CnType,
            'old_cm_info_list': List[CmInfo],
            'new_cm_info_list': List[CmInfo],
            'loss_of_connect_reason': LossOfConnectivityReason,
            'location': UserLocation,
            'pdn_conn_stat': PdnConnectivityStatus,
            'dnn': str,
            'pdu_se_id': int,
            'ipv4_addr': str,
            'ipv6_prefixes': List[Ipv6Prefix],
            'ipv6_addrs': List[Ipv6Addr],
            'pdu_sess_type': PduSessionType
        }

        self.attribute_map = {
            'new_pei': 'newPei',
            'roaming': 'roaming',
            'new_serving_plmn': 'newServingPlmn',
            'access_type': 'accessType',
            'new_cn_type': 'newCnType',
            'old_cn_type': 'oldCnType',
            'old_cm_info_list': 'oldCmInfoList',
            'new_cm_info_list': 'newCmInfoList',
            'loss_of_connect_reason': 'lossOfConnectReason',
            'location': 'location',
            'pdn_conn_stat': 'pdnConnStat',
            'dnn': 'dnn',
            'pdu_se_id': 'pduSeId',
            'ipv4_addr': 'ipv4Addr',
            'ipv6_prefixes': 'ipv6Prefixes',
            'ipv6_addrs': 'ipv6Addrs',
            'pdu_sess_type': 'pduSessType'
        }

        self.new_pei = new_pei
        self.roaming = roaming
        self.new_serving_plmn = new_serving_plmn
        self.access_type = access_type
        self.new_cn_type = new_cn_type
        self.old_cn_type = old_cn_type
        self.old_cm_info_list = old_cm_info_list
        self.new_cm_info_list = new_cm_info_list
        self.loss_of_connect_reason = loss_of_connect_reason
        self.location = location
        self.pdn_conn_stat = pdn_conn_stat
        self.dnn = dnn
        self.pdu_se_id = pdu_se_id
        self.ipv4_addr = ipv4_addr
        self.ipv6_prefixes = ipv6_prefixes
        self.ipv6_addrs = ipv6_addrs
        self.pdu_sess_type = pdu_sess_type

    @classmethod
    def from_dict(cls, dikt) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Report of this Report.  # noqa: E501
        :rtype: Report
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_pei(self):
        """Gets the new_pei of this Report.

        String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.    # noqa: E501

        :return: The new_pei of this Report.
        :rtype: str
        """
        return self._new_pei

    @new_pei.setter
    def new_pei(self, new_pei):
        """Sets the new_pei of this Report.

        String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.    # noqa: E501

        :param new_pei: The new_pei of this Report.
        :type new_pei: str
        """
        if new_pei is None:
            raise ValueError("Invalid value for `new_pei`, must not be `None`")  # noqa: E501
        if new_pei is not None and not re.search(r'^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$', new_pei):  # noqa: E501
            raise ValueError("Invalid value for `new_pei`, must be a follow pattern or equal to `/^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$/`")  # noqa: E501

        self._new_pei = new_pei

    @property
    def roaming(self):
        """Gets the roaming of this Report.


        :return: The roaming of this Report.
        :rtype: bool
        """
        return self._roaming

    @roaming.setter
    def roaming(self, roaming):
        """Sets the roaming of this Report.


        :param roaming: The roaming of this Report.
        :type roaming: bool
        """
        if roaming is None:
            raise ValueError("Invalid value for `roaming`, must not be `None`")  # noqa: E501

        self._roaming = roaming

    @property
    def new_serving_plmn(self):
        """Gets the new_serving_plmn of this Report.


        :return: The new_serving_plmn of this Report.
        :rtype: PlmnId
        """
        return self._new_serving_plmn

    @new_serving_plmn.setter
    def new_serving_plmn(self, new_serving_plmn):
        """Sets the new_serving_plmn of this Report.


        :param new_serving_plmn: The new_serving_plmn of this Report.
        :type new_serving_plmn: PlmnId
        """
        if new_serving_plmn is None:
            raise ValueError("Invalid value for `new_serving_plmn`, must not be `None`")  # noqa: E501

        self._new_serving_plmn = new_serving_plmn

    @property
    def access_type(self):
        """Gets the access_type of this Report.


        :return: The access_type of this Report.
        :rtype: AccessType
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this Report.


        :param access_type: The access_type of this Report.
        :type access_type: AccessType
        """

        self._access_type = access_type

    @property
    def new_cn_type(self):
        """Gets the new_cn_type of this Report.


        :return: The new_cn_type of this Report.
        :rtype: CnType
        """
        return self._new_cn_type

    @new_cn_type.setter
    def new_cn_type(self, new_cn_type):
        """Sets the new_cn_type of this Report.


        :param new_cn_type: The new_cn_type of this Report.
        :type new_cn_type: CnType
        """
        if new_cn_type is None:
            raise ValueError("Invalid value for `new_cn_type`, must not be `None`")  # noqa: E501

        self._new_cn_type = new_cn_type

    @property
    def old_cn_type(self):
        """Gets the old_cn_type of this Report.


        :return: The old_cn_type of this Report.
        :rtype: CnType
        """
        return self._old_cn_type

    @old_cn_type.setter
    def old_cn_type(self, old_cn_type):
        """Sets the old_cn_type of this Report.


        :param old_cn_type: The old_cn_type of this Report.
        :type old_cn_type: CnType
        """

        self._old_cn_type = old_cn_type

    @property
    def old_cm_info_list(self):
        """Gets the old_cm_info_list of this Report.


        :return: The old_cm_info_list of this Report.
        :rtype: List[CmInfo]
        """
        return self._old_cm_info_list

    @old_cm_info_list.setter
    def old_cm_info_list(self, old_cm_info_list):
        """Sets the old_cm_info_list of this Report.


        :param old_cm_info_list: The old_cm_info_list of this Report.
        :type old_cm_info_list: List[CmInfo]
        """
        if old_cm_info_list is not None and len(old_cm_info_list) > 2:
            raise ValueError("Invalid value for `old_cm_info_list`, number of items must be less than or equal to `2`")  # noqa: E501
        if old_cm_info_list is not None and len(old_cm_info_list) < 1:
            raise ValueError("Invalid value for `old_cm_info_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._old_cm_info_list = old_cm_info_list

    @property
    def new_cm_info_list(self):
        """Gets the new_cm_info_list of this Report.


        :return: The new_cm_info_list of this Report.
        :rtype: List[CmInfo]
        """
        return self._new_cm_info_list

    @new_cm_info_list.setter
    def new_cm_info_list(self, new_cm_info_list):
        """Sets the new_cm_info_list of this Report.


        :param new_cm_info_list: The new_cm_info_list of this Report.
        :type new_cm_info_list: List[CmInfo]
        """
        if new_cm_info_list is None:
            raise ValueError("Invalid value for `new_cm_info_list`, must not be `None`")  # noqa: E501
        if new_cm_info_list is not None and len(new_cm_info_list) > 2:
            raise ValueError("Invalid value for `new_cm_info_list`, number of items must be less than or equal to `2`")  # noqa: E501
        if new_cm_info_list is not None and len(new_cm_info_list) < 1:
            raise ValueError("Invalid value for `new_cm_info_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._new_cm_info_list = new_cm_info_list

    @property
    def loss_of_connect_reason(self):
        """Gets the loss_of_connect_reason of this Report.


        :return: The loss_of_connect_reason of this Report.
        :rtype: LossOfConnectivityReason
        """
        return self._loss_of_connect_reason

    @loss_of_connect_reason.setter
    def loss_of_connect_reason(self, loss_of_connect_reason):
        """Sets the loss_of_connect_reason of this Report.


        :param loss_of_connect_reason: The loss_of_connect_reason of this Report.
        :type loss_of_connect_reason: LossOfConnectivityReason
        """
        if loss_of_connect_reason is None:
            raise ValueError("Invalid value for `loss_of_connect_reason`, must not be `None`")  # noqa: E501

        self._loss_of_connect_reason = loss_of_connect_reason

    @property
    def location(self):
        """Gets the location of this Report.


        :return: The location of this Report.
        :rtype: UserLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Report.


        :param location: The location of this Report.
        :type location: UserLocation
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def pdn_conn_stat(self):
        """Gets the pdn_conn_stat of this Report.


        :return: The pdn_conn_stat of this Report.
        :rtype: PdnConnectivityStatus
        """
        return self._pdn_conn_stat

    @pdn_conn_stat.setter
    def pdn_conn_stat(self, pdn_conn_stat):
        """Sets the pdn_conn_stat of this Report.


        :param pdn_conn_stat: The pdn_conn_stat of this Report.
        :type pdn_conn_stat: PdnConnectivityStatus
        """
        if pdn_conn_stat is None:
            raise ValueError("Invalid value for `pdn_conn_stat`, must not be `None`")  # noqa: E501

        self._pdn_conn_stat = pdn_conn_stat

    @property
    def dnn(self):
        """Gets the dnn of this Report.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :return: The dnn of this Report.
        :rtype: str
        """
        return self._dnn

    @dnn.setter
    def dnn(self, dnn):
        """Sets the dnn of this Report.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :param dnn: The dnn of this Report.
        :type dnn: str
        """

        self._dnn = dnn

    @property
    def pdu_se_id(self):
        """Gets the pdu_se_id of this Report.

        Unsigned integer identifying a PDU session, within the range 0 to 255, as specified in  clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU Session ID is allocated by the  Core Network for UEs not supporting N1 mode, reserved range 64 to 95 is used. PDU Session ID  within the reserved range is only visible in the Core Network.    # noqa: E501

        :return: The pdu_se_id of this Report.
        :rtype: int
        """
        return self._pdu_se_id

    @pdu_se_id.setter
    def pdu_se_id(self, pdu_se_id):
        """Sets the pdu_se_id of this Report.

        Unsigned integer identifying a PDU session, within the range 0 to 255, as specified in  clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU Session ID is allocated by the  Core Network for UEs not supporting N1 mode, reserved range 64 to 95 is used. PDU Session ID  within the reserved range is only visible in the Core Network.    # noqa: E501

        :param pdu_se_id: The pdu_se_id of this Report.
        :type pdu_se_id: int
        """
        if pdu_se_id is not None and pdu_se_id > 255:  # noqa: E501
            raise ValueError("Invalid value for `pdu_se_id`, must be a value less than or equal to `255`")  # noqa: E501
        if pdu_se_id is not None and pdu_se_id < 0:  # noqa: E501
            raise ValueError("Invalid value for `pdu_se_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pdu_se_id = pdu_se_id

    @property
    def ipv4_addr(self):
        """Gets the ipv4_addr of this Report.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :return: The ipv4_addr of this Report.
        :rtype: str
        """
        return self._ipv4_addr

    @ipv4_addr.setter
    def ipv4_addr(self, ipv4_addr):
        """Sets the ipv4_addr of this Report.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :param ipv4_addr: The ipv4_addr of this Report.
        :type ipv4_addr: str
        """
        if ipv4_addr is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', ipv4_addr):  # noqa: E501
            raise ValueError("Invalid value for `ipv4_addr`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/`")  # noqa: E501

        self._ipv4_addr = ipv4_addr

    @property
    def ipv6_prefixes(self):
        """Gets the ipv6_prefixes of this Report.


        :return: The ipv6_prefixes of this Report.
        :rtype: List[Ipv6Prefix]
        """
        return self._ipv6_prefixes

    @ipv6_prefixes.setter
    def ipv6_prefixes(self, ipv6_prefixes):
        """Sets the ipv6_prefixes of this Report.


        :param ipv6_prefixes: The ipv6_prefixes of this Report.
        :type ipv6_prefixes: List[Ipv6Prefix]
        """
        if ipv6_prefixes is not None and len(ipv6_prefixes) < 1:
            raise ValueError("Invalid value for `ipv6_prefixes`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ipv6_prefixes = ipv6_prefixes

    @property
    def ipv6_addrs(self):
        """Gets the ipv6_addrs of this Report.


        :return: The ipv6_addrs of this Report.
        :rtype: List[Ipv6Addr]
        """
        return self._ipv6_addrs

    @ipv6_addrs.setter
    def ipv6_addrs(self, ipv6_addrs):
        """Sets the ipv6_addrs of this Report.


        :param ipv6_addrs: The ipv6_addrs of this Report.
        :type ipv6_addrs: List[Ipv6Addr]
        """
        if ipv6_addrs is not None and len(ipv6_addrs) < 1:
            raise ValueError("Invalid value for `ipv6_addrs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ipv6_addrs = ipv6_addrs

    @property
    def pdu_sess_type(self):
        """Gets the pdu_sess_type of this Report.


        :return: The pdu_sess_type of this Report.
        :rtype: PduSessionType
        """
        return self._pdu_sess_type

    @pdu_sess_type.setter
    def pdu_sess_type(self, pdu_sess_type):
        """Sets the pdu_sess_type of this Report.


        :param pdu_sess_type: The pdu_sess_type of this Report.
        :type pdu_sess_type: PduSessionType
        """

        self._pdu_sess_type = pdu_sess_type
