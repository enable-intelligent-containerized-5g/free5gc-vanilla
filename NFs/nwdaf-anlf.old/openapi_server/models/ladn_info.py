# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.presence_state import PresenceState
from openapi_server import util

from openapi_server.models.presence_state import PresenceState  # noqa: E501

class LadnInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ladn=None, presence=None):  # noqa: E501
        """LadnInfo - a model defined in OpenAPI

        :param ladn: The ladn of this LadnInfo.  # noqa: E501
        :type ladn: str
        :param presence: The presence of this LadnInfo.  # noqa: E501
        :type presence: PresenceState
        """
        self.openapi_types = {
            'ladn': str,
            'presence': PresenceState
        }

        self.attribute_map = {
            'ladn': 'ladn',
            'presence': 'presence'
        }

        self.ladn = ladn
        self.presence = presence

    @classmethod
    def from_dict(cls, dikt) -> 'LadnInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LadnInfo of this LadnInfo.  # noqa: E501
        :rtype: LadnInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ladn(self):
        """Gets the ladn of this LadnInfo.


        :return: The ladn of this LadnInfo.
        :rtype: str
        """
        return self._ladn

    @ladn.setter
    def ladn(self, ladn):
        """Sets the ladn of this LadnInfo.


        :param ladn: The ladn of this LadnInfo.
        :type ladn: str
        """
        if ladn is None:
            raise ValueError("Invalid value for `ladn`, must not be `None`")  # noqa: E501

        self._ladn = ladn

    @property
    def presence(self):
        """Gets the presence of this LadnInfo.


        :return: The presence of this LadnInfo.
        :rtype: PresenceState
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this LadnInfo.


        :param presence: The presence of this LadnInfo.
        :type presence: PresenceState
        """

        self._presence = presence
