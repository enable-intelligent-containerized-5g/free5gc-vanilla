# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.event_notification1 import EventNotification1
from openapi_server.models.event_subscription1 import EventSubscription1
from openapi_server.models.guami import Guami
from openapi_server.models.ipv6_addr import Ipv6Addr
from openapi_server.models.notification_flag import NotificationFlag
from openapi_server.models.notification_method1 import NotificationMethod1
from openapi_server.models.partitioning_criteria import PartitioningCriteria
from openapi_server.models.service_name import ServiceName
from openapi_server.models.snssai import Snssai
import re
from openapi_server import util

from openapi_server.models.event_notification1 import EventNotification1  # noqa: E501
from openapi_server.models.event_subscription1 import EventSubscription1  # noqa: E501
from openapi_server.models.guami import Guami  # noqa: E501
from openapi_server.models.ipv6_addr import Ipv6Addr  # noqa: E501
from openapi_server.models.notification_flag import NotificationFlag  # noqa: E501
from openapi_server.models.notification_method1 import NotificationMethod1  # noqa: E501
from openapi_server.models.partitioning_criteria import PartitioningCriteria  # noqa: E501
from openapi_server.models.service_name import ServiceName  # noqa: E501
from openapi_server.models.snssai import Snssai  # noqa: E501
import re  # noqa: E501

class NsmfEventExposure(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, supi=None, gpsi=None, any_ue_ind=None, group_id=None, pdu_se_id=None, dnn=None, snssai=None, sub_id=None, notif_id=None, notif_uri=None, alt_notif_ipv4_addrs=None, alt_notif_ipv6_addrs=None, alt_notif_fqdns=None, event_subs=None, event_notifs=None, imme_rep=None, notif_method=None, max_report_nbr=None, expiry=None, rep_period=None, guami=None, servive_name=None, supported_features=None, samp_ratio=None, partition_criteria=None, grp_rep_time=None, notif_flag=None):  # noqa: E501
        """NsmfEventExposure - a model defined in OpenAPI

        :param supi: The supi of this NsmfEventExposure.  # noqa: E501
        :type supi: str
        :param gpsi: The gpsi of this NsmfEventExposure.  # noqa: E501
        :type gpsi: str
        :param any_ue_ind: The any_ue_ind of this NsmfEventExposure.  # noqa: E501
        :type any_ue_ind: bool
        :param group_id: The group_id of this NsmfEventExposure.  # noqa: E501
        :type group_id: str
        :param pdu_se_id: The pdu_se_id of this NsmfEventExposure.  # noqa: E501
        :type pdu_se_id: int
        :param dnn: The dnn of this NsmfEventExposure.  # noqa: E501
        :type dnn: str
        :param snssai: The snssai of this NsmfEventExposure.  # noqa: E501
        :type snssai: Snssai
        :param sub_id: The sub_id of this NsmfEventExposure.  # noqa: E501
        :type sub_id: str
        :param notif_id: The notif_id of this NsmfEventExposure.  # noqa: E501
        :type notif_id: str
        :param notif_uri: The notif_uri of this NsmfEventExposure.  # noqa: E501
        :type notif_uri: str
        :param alt_notif_ipv4_addrs: The alt_notif_ipv4_addrs of this NsmfEventExposure.  # noqa: E501
        :type alt_notif_ipv4_addrs: List[str]
        :param alt_notif_ipv6_addrs: The alt_notif_ipv6_addrs of this NsmfEventExposure.  # noqa: E501
        :type alt_notif_ipv6_addrs: List[Ipv6Addr]
        :param alt_notif_fqdns: The alt_notif_fqdns of this NsmfEventExposure.  # noqa: E501
        :type alt_notif_fqdns: List[str]
        :param event_subs: The event_subs of this NsmfEventExposure.  # noqa: E501
        :type event_subs: List[EventSubscription1]
        :param event_notifs: The event_notifs of this NsmfEventExposure.  # noqa: E501
        :type event_notifs: List[EventNotification1]
        :param imme_rep: The imme_rep of this NsmfEventExposure.  # noqa: E501
        :type imme_rep: bool
        :param notif_method: The notif_method of this NsmfEventExposure.  # noqa: E501
        :type notif_method: NotificationMethod1
        :param max_report_nbr: The max_report_nbr of this NsmfEventExposure.  # noqa: E501
        :type max_report_nbr: int
        :param expiry: The expiry of this NsmfEventExposure.  # noqa: E501
        :type expiry: datetime
        :param rep_period: The rep_period of this NsmfEventExposure.  # noqa: E501
        :type rep_period: int
        :param guami: The guami of this NsmfEventExposure.  # noqa: E501
        :type guami: Guami
        :param servive_name: The servive_name of this NsmfEventExposure.  # noqa: E501
        :type servive_name: ServiceName
        :param supported_features: The supported_features of this NsmfEventExposure.  # noqa: E501
        :type supported_features: str
        :param samp_ratio: The samp_ratio of this NsmfEventExposure.  # noqa: E501
        :type samp_ratio: int
        :param partition_criteria: The partition_criteria of this NsmfEventExposure.  # noqa: E501
        :type partition_criteria: List[PartitioningCriteria]
        :param grp_rep_time: The grp_rep_time of this NsmfEventExposure.  # noqa: E501
        :type grp_rep_time: int
        :param notif_flag: The notif_flag of this NsmfEventExposure.  # noqa: E501
        :type notif_flag: NotificationFlag
        """
        self.openapi_types = {
            'supi': str,
            'gpsi': str,
            'any_ue_ind': bool,
            'group_id': str,
            'pdu_se_id': int,
            'dnn': str,
            'snssai': Snssai,
            'sub_id': str,
            'notif_id': str,
            'notif_uri': str,
            'alt_notif_ipv4_addrs': List[str],
            'alt_notif_ipv6_addrs': List[Ipv6Addr],
            'alt_notif_fqdns': List[str],
            'event_subs': List[EventSubscription1],
            'event_notifs': List[EventNotification1],
            'imme_rep': bool,
            'notif_method': NotificationMethod1,
            'max_report_nbr': int,
            'expiry': datetime,
            'rep_period': int,
            'guami': Guami,
            'servive_name': ServiceName,
            'supported_features': str,
            'samp_ratio': int,
            'partition_criteria': List[PartitioningCriteria],
            'grp_rep_time': int,
            'notif_flag': NotificationFlag
        }

        self.attribute_map = {
            'supi': 'supi',
            'gpsi': 'gpsi',
            'any_ue_ind': 'anyUeInd',
            'group_id': 'groupId',
            'pdu_se_id': 'pduSeId',
            'dnn': 'dnn',
            'snssai': 'snssai',
            'sub_id': 'subId',
            'notif_id': 'notifId',
            'notif_uri': 'notifUri',
            'alt_notif_ipv4_addrs': 'altNotifIpv4Addrs',
            'alt_notif_ipv6_addrs': 'altNotifIpv6Addrs',
            'alt_notif_fqdns': 'altNotifFqdns',
            'event_subs': 'eventSubs',
            'event_notifs': 'eventNotifs',
            'imme_rep': 'ImmeRep',
            'notif_method': 'notifMethod',
            'max_report_nbr': 'maxReportNbr',
            'expiry': 'expiry',
            'rep_period': 'repPeriod',
            'guami': 'guami',
            'servive_name': 'serviveName',
            'supported_features': 'supportedFeatures',
            'samp_ratio': 'sampRatio',
            'partition_criteria': 'partitionCriteria',
            'grp_rep_time': 'grpRepTime',
            'notif_flag': 'notifFlag'
        }

        self.supi = supi
        self.gpsi = gpsi
        self.any_ue_ind = any_ue_ind
        self.group_id = group_id
        self.pdu_se_id = pdu_se_id
        self.dnn = dnn
        self.snssai = snssai
        self.sub_id = sub_id
        self.notif_id = notif_id
        self.notif_uri = notif_uri
        self.alt_notif_ipv4_addrs = alt_notif_ipv4_addrs
        self.alt_notif_ipv6_addrs = alt_notif_ipv6_addrs
        self.alt_notif_fqdns = alt_notif_fqdns
        self.event_subs = event_subs
        self.event_notifs = event_notifs
        self.imme_rep = imme_rep
        self.notif_method = notif_method
        self.max_report_nbr = max_report_nbr
        self.expiry = expiry
        self.rep_period = rep_period
        self.guami = guami
        self.servive_name = servive_name
        self.supported_features = supported_features
        self.samp_ratio = samp_ratio
        self.partition_criteria = partition_criteria
        self.grp_rep_time = grp_rep_time
        self.notif_flag = notif_flag

    @classmethod
    def from_dict(cls, dikt) -> 'NsmfEventExposure':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NsmfEventExposure of this NsmfEventExposure.  # noqa: E501
        :rtype: NsmfEventExposure
        """
        return util.deserialize_model(dikt, cls)

    @property
    def supi(self):
        """Gets the supi of this NsmfEventExposure.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :return: The supi of this NsmfEventExposure.
        :rtype: str
        """
        return self._supi

    @supi.setter
    def supi(self, supi):
        """Sets the supi of this NsmfEventExposure.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :param supi: The supi of this NsmfEventExposure.
        :type supi: str
        """
        if supi is not None and not re.search(r'^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$', supi):  # noqa: E501
            raise ValueError("Invalid value for `supi`, must be a follow pattern or equal to `/^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$/`")  # noqa: E501

        self._supi = supi

    @property
    def gpsi(self):
        """Gets the gpsi of this NsmfEventExposure.

        String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.    # noqa: E501

        :return: The gpsi of this NsmfEventExposure.
        :rtype: str
        """
        return self._gpsi

    @gpsi.setter
    def gpsi(self, gpsi):
        """Sets the gpsi of this NsmfEventExposure.

        String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.    # noqa: E501

        :param gpsi: The gpsi of this NsmfEventExposure.
        :type gpsi: str
        """
        if gpsi is not None and not re.search(r'^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$', gpsi):  # noqa: E501
            raise ValueError("Invalid value for `gpsi`, must be a follow pattern or equal to `/^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$/`")  # noqa: E501

        self._gpsi = gpsi

    @property
    def any_ue_ind(self):
        """Gets the any_ue_ind of this NsmfEventExposure.

        Any UE indication. This IE shall be present if the event subscription is applicable to any UE. Default value \"false\" is used, if not present.   # noqa: E501

        :return: The any_ue_ind of this NsmfEventExposure.
        :rtype: bool
        """
        return self._any_ue_ind

    @any_ue_ind.setter
    def any_ue_ind(self, any_ue_ind):
        """Sets the any_ue_ind of this NsmfEventExposure.

        Any UE indication. This IE shall be present if the event subscription is applicable to any UE. Default value \"false\" is used, if not present.   # noqa: E501

        :param any_ue_ind: The any_ue_ind of this NsmfEventExposure.
        :type any_ue_ind: bool
        """

        self._any_ue_ind = any_ue_ind

    @property
    def group_id(self):
        """Gets the group_id of this NsmfEventExposure.

        String identifying a group of devices network internal globally unique ID which identifies a set of IMSIs, as specified in clause 19.9 of 3GPP TS 23.003.    # noqa: E501

        :return: The group_id of this NsmfEventExposure.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this NsmfEventExposure.

        String identifying a group of devices network internal globally unique ID which identifies a set of IMSIs, as specified in clause 19.9 of 3GPP TS 23.003.    # noqa: E501

        :param group_id: The group_id of this NsmfEventExposure.
        :type group_id: str
        """
        if group_id is not None and not re.search(r'^[A-Fa-f0-9]{8}-[0-9]{3}-[0-9]{2,3}-([A-Fa-f0-9][A-Fa-f0-9]){1,10}$', group_id):  # noqa: E501
            raise ValueError("Invalid value for `group_id`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{8}-[0-9]{3}-[0-9]{2,3}-([A-Fa-f0-9][A-Fa-f0-9]){1,10}$/`")  # noqa: E501

        self._group_id = group_id

    @property
    def pdu_se_id(self):
        """Gets the pdu_se_id of this NsmfEventExposure.

        Unsigned integer identifying a PDU session, within the range 0 to 255, as specified in  clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU Session ID is allocated by the  Core Network for UEs not supporting N1 mode, reserved range 64 to 95 is used. PDU Session ID  within the reserved range is only visible in the Core Network.    # noqa: E501

        :return: The pdu_se_id of this NsmfEventExposure.
        :rtype: int
        """
        return self._pdu_se_id

    @pdu_se_id.setter
    def pdu_se_id(self, pdu_se_id):
        """Sets the pdu_se_id of this NsmfEventExposure.

        Unsigned integer identifying a PDU session, within the range 0 to 255, as specified in  clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU Session ID is allocated by the  Core Network for UEs not supporting N1 mode, reserved range 64 to 95 is used. PDU Session ID  within the reserved range is only visible in the Core Network.    # noqa: E501

        :param pdu_se_id: The pdu_se_id of this NsmfEventExposure.
        :type pdu_se_id: int
        """
        if pdu_se_id is not None and pdu_se_id > 255:  # noqa: E501
            raise ValueError("Invalid value for `pdu_se_id`, must be a value less than or equal to `255`")  # noqa: E501
        if pdu_se_id is not None and pdu_se_id < 0:  # noqa: E501
            raise ValueError("Invalid value for `pdu_se_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pdu_se_id = pdu_se_id

    @property
    def dnn(self):
        """Gets the dnn of this NsmfEventExposure.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :return: The dnn of this NsmfEventExposure.
        :rtype: str
        """
        return self._dnn

    @dnn.setter
    def dnn(self, dnn):
        """Sets the dnn of this NsmfEventExposure.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :param dnn: The dnn of this NsmfEventExposure.
        :type dnn: str
        """

        self._dnn = dnn

    @property
    def snssai(self):
        """Gets the snssai of this NsmfEventExposure.


        :return: The snssai of this NsmfEventExposure.
        :rtype: Snssai
        """
        return self._snssai

    @snssai.setter
    def snssai(self, snssai):
        """Sets the snssai of this NsmfEventExposure.


        :param snssai: The snssai of this NsmfEventExposure.
        :type snssai: Snssai
        """

        self._snssai = snssai

    @property
    def sub_id(self):
        """Gets the sub_id of this NsmfEventExposure.

        Identifies an Individual SMF Notification Subscription. To enable that the value is used as part of a URI, the string shall only contain characters allowed according to the \"lower-with-hyphen\" naming convention defined in 3GPP TS 29.501. In an OpenAPI schema, the format shall be designated as \"SubId\".   # noqa: E501

        :return: The sub_id of this NsmfEventExposure.
        :rtype: str
        """
        return self._sub_id

    @sub_id.setter
    def sub_id(self, sub_id):
        """Sets the sub_id of this NsmfEventExposure.

        Identifies an Individual SMF Notification Subscription. To enable that the value is used as part of a URI, the string shall only contain characters allowed according to the \"lower-with-hyphen\" naming convention defined in 3GPP TS 29.501. In an OpenAPI schema, the format shall be designated as \"SubId\".   # noqa: E501

        :param sub_id: The sub_id of this NsmfEventExposure.
        :type sub_id: str
        """

        self._sub_id = sub_id

    @property
    def notif_id(self):
        """Gets the notif_id of this NsmfEventExposure.

        Notification Correlation ID assigned by the NF service consumer.  # noqa: E501

        :return: The notif_id of this NsmfEventExposure.
        :rtype: str
        """
        return self._notif_id

    @notif_id.setter
    def notif_id(self, notif_id):
        """Sets the notif_id of this NsmfEventExposure.

        Notification Correlation ID assigned by the NF service consumer.  # noqa: E501

        :param notif_id: The notif_id of this NsmfEventExposure.
        :type notif_id: str
        """
        if notif_id is None:
            raise ValueError("Invalid value for `notif_id`, must not be `None`")  # noqa: E501

        self._notif_id = notif_id

    @property
    def notif_uri(self):
        """Gets the notif_uri of this NsmfEventExposure.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The notif_uri of this NsmfEventExposure.
        :rtype: str
        """
        return self._notif_uri

    @notif_uri.setter
    def notif_uri(self, notif_uri):
        """Sets the notif_uri of this NsmfEventExposure.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param notif_uri: The notif_uri of this NsmfEventExposure.
        :type notif_uri: str
        """
        if notif_uri is None:
            raise ValueError("Invalid value for `notif_uri`, must not be `None`")  # noqa: E501

        self._notif_uri = notif_uri

    @property
    def alt_notif_ipv4_addrs(self):
        """Gets the alt_notif_ipv4_addrs of this NsmfEventExposure.

        Alternate or backup IPv4 address(es) where to send Notifications.  # noqa: E501

        :return: The alt_notif_ipv4_addrs of this NsmfEventExposure.
        :rtype: List[str]
        """
        return self._alt_notif_ipv4_addrs

    @alt_notif_ipv4_addrs.setter
    def alt_notif_ipv4_addrs(self, alt_notif_ipv4_addrs):
        """Sets the alt_notif_ipv4_addrs of this NsmfEventExposure.

        Alternate or backup IPv4 address(es) where to send Notifications.  # noqa: E501

        :param alt_notif_ipv4_addrs: The alt_notif_ipv4_addrs of this NsmfEventExposure.
        :type alt_notif_ipv4_addrs: List[str]
        """
        if alt_notif_ipv4_addrs is not None and len(alt_notif_ipv4_addrs) < 1:
            raise ValueError("Invalid value for `alt_notif_ipv4_addrs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._alt_notif_ipv4_addrs = alt_notif_ipv4_addrs

    @property
    def alt_notif_ipv6_addrs(self):
        """Gets the alt_notif_ipv6_addrs of this NsmfEventExposure.

        Alternate or backup IPv6 address(es) where to send Notifications.  # noqa: E501

        :return: The alt_notif_ipv6_addrs of this NsmfEventExposure.
        :rtype: List[Ipv6Addr]
        """
        return self._alt_notif_ipv6_addrs

    @alt_notif_ipv6_addrs.setter
    def alt_notif_ipv6_addrs(self, alt_notif_ipv6_addrs):
        """Sets the alt_notif_ipv6_addrs of this NsmfEventExposure.

        Alternate or backup IPv6 address(es) where to send Notifications.  # noqa: E501

        :param alt_notif_ipv6_addrs: The alt_notif_ipv6_addrs of this NsmfEventExposure.
        :type alt_notif_ipv6_addrs: List[Ipv6Addr]
        """
        if alt_notif_ipv6_addrs is not None and len(alt_notif_ipv6_addrs) < 1:
            raise ValueError("Invalid value for `alt_notif_ipv6_addrs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._alt_notif_ipv6_addrs = alt_notif_ipv6_addrs

    @property
    def alt_notif_fqdns(self):
        """Gets the alt_notif_fqdns of this NsmfEventExposure.

        Alternate or backup FQDN(s) where to send Notifications.  # noqa: E501

        :return: The alt_notif_fqdns of this NsmfEventExposure.
        :rtype: List[str]
        """
        return self._alt_notif_fqdns

    @alt_notif_fqdns.setter
    def alt_notif_fqdns(self, alt_notif_fqdns):
        """Sets the alt_notif_fqdns of this NsmfEventExposure.

        Alternate or backup FQDN(s) where to send Notifications.  # noqa: E501

        :param alt_notif_fqdns: The alt_notif_fqdns of this NsmfEventExposure.
        :type alt_notif_fqdns: List[str]
        """
        if alt_notif_fqdns is not None and len(alt_notif_fqdns) < 1:
            raise ValueError("Invalid value for `alt_notif_fqdns`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._alt_notif_fqdns = alt_notif_fqdns

    @property
    def event_subs(self):
        """Gets the event_subs of this NsmfEventExposure.

        Subscribed events  # noqa: E501

        :return: The event_subs of this NsmfEventExposure.
        :rtype: List[EventSubscription1]
        """
        return self._event_subs

    @event_subs.setter
    def event_subs(self, event_subs):
        """Sets the event_subs of this NsmfEventExposure.

        Subscribed events  # noqa: E501

        :param event_subs: The event_subs of this NsmfEventExposure.
        :type event_subs: List[EventSubscription1]
        """
        if event_subs is None:
            raise ValueError("Invalid value for `event_subs`, must not be `None`")  # noqa: E501
        if event_subs is not None and len(event_subs) < 1:
            raise ValueError("Invalid value for `event_subs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._event_subs = event_subs

    @property
    def event_notifs(self):
        """Gets the event_notifs of this NsmfEventExposure.


        :return: The event_notifs of this NsmfEventExposure.
        :rtype: List[EventNotification1]
        """
        return self._event_notifs

    @event_notifs.setter
    def event_notifs(self, event_notifs):
        """Sets the event_notifs of this NsmfEventExposure.


        :param event_notifs: The event_notifs of this NsmfEventExposure.
        :type event_notifs: List[EventNotification1]
        """
        if event_notifs is not None and len(event_notifs) < 1:
            raise ValueError("Invalid value for `event_notifs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._event_notifs = event_notifs

    @property
    def imme_rep(self):
        """Gets the imme_rep of this NsmfEventExposure.


        :return: The imme_rep of this NsmfEventExposure.
        :rtype: bool
        """
        return self._imme_rep

    @imme_rep.setter
    def imme_rep(self, imme_rep):
        """Sets the imme_rep of this NsmfEventExposure.


        :param imme_rep: The imme_rep of this NsmfEventExposure.
        :type imme_rep: bool
        """

        self._imme_rep = imme_rep

    @property
    def notif_method(self):
        """Gets the notif_method of this NsmfEventExposure.


        :return: The notif_method of this NsmfEventExposure.
        :rtype: NotificationMethod1
        """
        return self._notif_method

    @notif_method.setter
    def notif_method(self, notif_method):
        """Sets the notif_method of this NsmfEventExposure.


        :param notif_method: The notif_method of this NsmfEventExposure.
        :type notif_method: NotificationMethod1
        """

        self._notif_method = notif_method

    @property
    def max_report_nbr(self):
        """Gets the max_report_nbr of this NsmfEventExposure.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The max_report_nbr of this NsmfEventExposure.
        :rtype: int
        """
        return self._max_report_nbr

    @max_report_nbr.setter
    def max_report_nbr(self, max_report_nbr):
        """Sets the max_report_nbr of this NsmfEventExposure.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param max_report_nbr: The max_report_nbr of this NsmfEventExposure.
        :type max_report_nbr: int
        """
        if max_report_nbr is not None and max_report_nbr < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_report_nbr`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_report_nbr = max_report_nbr

    @property
    def expiry(self):
        """Gets the expiry of this NsmfEventExposure.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The expiry of this NsmfEventExposure.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this NsmfEventExposure.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param expiry: The expiry of this NsmfEventExposure.
        :type expiry: datetime
        """

        self._expiry = expiry

    @property
    def rep_period(self):
        """Gets the rep_period of this NsmfEventExposure.

        indicating a time in seconds.  # noqa: E501

        :return: The rep_period of this NsmfEventExposure.
        :rtype: int
        """
        return self._rep_period

    @rep_period.setter
    def rep_period(self, rep_period):
        """Sets the rep_period of this NsmfEventExposure.

        indicating a time in seconds.  # noqa: E501

        :param rep_period: The rep_period of this NsmfEventExposure.
        :type rep_period: int
        """

        self._rep_period = rep_period

    @property
    def guami(self):
        """Gets the guami of this NsmfEventExposure.


        :return: The guami of this NsmfEventExposure.
        :rtype: Guami
        """
        return self._guami

    @guami.setter
    def guami(self, guami):
        """Sets the guami of this NsmfEventExposure.


        :param guami: The guami of this NsmfEventExposure.
        :type guami: Guami
        """

        self._guami = guami

    @property
    def servive_name(self):
        """Gets the servive_name of this NsmfEventExposure.


        :return: The servive_name of this NsmfEventExposure.
        :rtype: ServiceName
        """
        return self._servive_name

    @servive_name.setter
    def servive_name(self, servive_name):
        """Sets the servive_name of this NsmfEventExposure.


        :param servive_name: The servive_name of this NsmfEventExposure.
        :type servive_name: ServiceName
        """

        self._servive_name = servive_name

    @property
    def supported_features(self):
        """Gets the supported_features of this NsmfEventExposure.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :return: The supported_features of this NsmfEventExposure.
        :rtype: str
        """
        return self._supported_features

    @supported_features.setter
    def supported_features(self, supported_features):
        """Sets the supported_features of this NsmfEventExposure.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :param supported_features: The supported_features of this NsmfEventExposure.
        :type supported_features: str
        """
        if supported_features is not None and not re.search(r'^[A-Fa-f0-9]*$', supported_features):  # noqa: E501
            raise ValueError("Invalid value for `supported_features`, must be a follow pattern or equal to `/^[A-Fa-f0-9]*$/`")  # noqa: E501

        self._supported_features = supported_features

    @property
    def samp_ratio(self):
        """Gets the samp_ratio of this NsmfEventExposure.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :return: The samp_ratio of this NsmfEventExposure.
        :rtype: int
        """
        return self._samp_ratio

    @samp_ratio.setter
    def samp_ratio(self, samp_ratio):
        """Sets the samp_ratio of this NsmfEventExposure.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :param samp_ratio: The samp_ratio of this NsmfEventExposure.
        :type samp_ratio: int
        """
        if samp_ratio is not None and samp_ratio > 100:  # noqa: E501
            raise ValueError("Invalid value for `samp_ratio`, must be a value less than or equal to `100`")  # noqa: E501
        if samp_ratio is not None and samp_ratio < 1:  # noqa: E501
            raise ValueError("Invalid value for `samp_ratio`, must be a value greater than or equal to `1`")  # noqa: E501

        self._samp_ratio = samp_ratio

    @property
    def partition_criteria(self):
        """Gets the partition_criteria of this NsmfEventExposure.

        Criteria for partitioning the UEs before applying the sampling ratio.  # noqa: E501

        :return: The partition_criteria of this NsmfEventExposure.
        :rtype: List[PartitioningCriteria]
        """
        return self._partition_criteria

    @partition_criteria.setter
    def partition_criteria(self, partition_criteria):
        """Sets the partition_criteria of this NsmfEventExposure.

        Criteria for partitioning the UEs before applying the sampling ratio.  # noqa: E501

        :param partition_criteria: The partition_criteria of this NsmfEventExposure.
        :type partition_criteria: List[PartitioningCriteria]
        """
        if partition_criteria is not None and len(partition_criteria) < 1:
            raise ValueError("Invalid value for `partition_criteria`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._partition_criteria = partition_criteria

    @property
    def grp_rep_time(self):
        """Gets the grp_rep_time of this NsmfEventExposure.

        indicating a time in seconds.  # noqa: E501

        :return: The grp_rep_time of this NsmfEventExposure.
        :rtype: int
        """
        return self._grp_rep_time

    @grp_rep_time.setter
    def grp_rep_time(self, grp_rep_time):
        """Sets the grp_rep_time of this NsmfEventExposure.

        indicating a time in seconds.  # noqa: E501

        :param grp_rep_time: The grp_rep_time of this NsmfEventExposure.
        :type grp_rep_time: int
        """

        self._grp_rep_time = grp_rep_time

    @property
    def notif_flag(self):
        """Gets the notif_flag of this NsmfEventExposure.


        :return: The notif_flag of this NsmfEventExposure.
        :rtype: NotificationFlag
        """
        return self._notif_flag

    @notif_flag.setter
    def notif_flag(self, notif_flag):
        """Sets the notif_flag of this NsmfEventExposure.


        :param notif_flag: The notif_flag of this NsmfEventExposure.
        :type notif_flag: NotificationFlag
        """

        self._notif_flag = notif_flag
