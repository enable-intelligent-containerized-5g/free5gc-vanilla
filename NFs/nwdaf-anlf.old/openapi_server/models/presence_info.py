# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ecgi import Ecgi
from openapi_server.models.global_ran_node_id import GlobalRanNodeId
from openapi_server.models.ncgi import Ncgi
from openapi_server.models.presence_state import PresenceState
from openapi_server.models.tai import Tai
from openapi_server import util

from openapi_server.models.ecgi import Ecgi  # noqa: E501
from openapi_server.models.global_ran_node_id import GlobalRanNodeId  # noqa: E501
from openapi_server.models.ncgi import Ncgi  # noqa: E501
from openapi_server.models.presence_state import PresenceState  # noqa: E501
from openapi_server.models.tai import Tai  # noqa: E501

class PresenceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pra_id=None, additional_pra_id=None, presence_state=None, tracking_area_list=None, ecgi_list=None, ncgi_list=None, global_ran_node_id_list=None, globale_nb_id_list=None):  # noqa: E501
        """PresenceInfo - a model defined in OpenAPI

        :param pra_id: The pra_id of this PresenceInfo.  # noqa: E501
        :type pra_id: str
        :param additional_pra_id: The additional_pra_id of this PresenceInfo.  # noqa: E501
        :type additional_pra_id: str
        :param presence_state: The presence_state of this PresenceInfo.  # noqa: E501
        :type presence_state: PresenceState
        :param tracking_area_list: The tracking_area_list of this PresenceInfo.  # noqa: E501
        :type tracking_area_list: List[Tai]
        :param ecgi_list: The ecgi_list of this PresenceInfo.  # noqa: E501
        :type ecgi_list: List[Ecgi]
        :param ncgi_list: The ncgi_list of this PresenceInfo.  # noqa: E501
        :type ncgi_list: List[Ncgi]
        :param global_ran_node_id_list: The global_ran_node_id_list of this PresenceInfo.  # noqa: E501
        :type global_ran_node_id_list: List[GlobalRanNodeId]
        :param globale_nb_id_list: The globale_nb_id_list of this PresenceInfo.  # noqa: E501
        :type globale_nb_id_list: List[GlobalRanNodeId]
        """
        self.openapi_types = {
            'pra_id': str,
            'additional_pra_id': str,
            'presence_state': PresenceState,
            'tracking_area_list': List[Tai],
            'ecgi_list': List[Ecgi],
            'ncgi_list': List[Ncgi],
            'global_ran_node_id_list': List[GlobalRanNodeId],
            'globale_nb_id_list': List[GlobalRanNodeId]
        }

        self.attribute_map = {
            'pra_id': 'praId',
            'additional_pra_id': 'additionalPraId',
            'presence_state': 'presenceState',
            'tracking_area_list': 'trackingAreaList',
            'ecgi_list': 'ecgiList',
            'ncgi_list': 'ncgiList',
            'global_ran_node_id_list': 'globalRanNodeIdList',
            'globale_nb_id_list': 'globaleNbIdList'
        }

        self.pra_id = pra_id
        self.additional_pra_id = additional_pra_id
        self.presence_state = presence_state
        self.tracking_area_list = tracking_area_list
        self.ecgi_list = ecgi_list
        self.ncgi_list = ncgi_list
        self.global_ran_node_id_list = global_ran_node_id_list
        self.globale_nb_id_list = globale_nb_id_list

    @classmethod
    def from_dict(cls, dikt) -> 'PresenceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PresenceInfo of this PresenceInfo.  # noqa: E501
        :rtype: PresenceInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pra_id(self):
        """Gets the pra_id of this PresenceInfo.

        Represents an identifier of the Presence Reporting Area (see clause 28.10 of 3GPP  TS 23.003.  This IE shall be present  if the Area of Interest subscribed or reported is a Presence Reporting Area or a Set of Core Network predefined Presence Reporting Areas. When present, it shall be encoded as a string representing an integer in the following ranges: 0 to 8 388 607 for UE-dedicated PRA 8 388 608 to 16 777 215 for Core Network predefined PRA Examples: PRA ID 123 is encoded as \"123\" PRA ID 11 238 660 is encoded as \"11238660\"   # noqa: E501

        :return: The pra_id of this PresenceInfo.
        :rtype: str
        """
        return self._pra_id

    @pra_id.setter
    def pra_id(self, pra_id):
        """Sets the pra_id of this PresenceInfo.

        Represents an identifier of the Presence Reporting Area (see clause 28.10 of 3GPP  TS 23.003.  This IE shall be present  if the Area of Interest subscribed or reported is a Presence Reporting Area or a Set of Core Network predefined Presence Reporting Areas. When present, it shall be encoded as a string representing an integer in the following ranges: 0 to 8 388 607 for UE-dedicated PRA 8 388 608 to 16 777 215 for Core Network predefined PRA Examples: PRA ID 123 is encoded as \"123\" PRA ID 11 238 660 is encoded as \"11238660\"   # noqa: E501

        :param pra_id: The pra_id of this PresenceInfo.
        :type pra_id: str
        """

        self._pra_id = pra_id

    @property
    def additional_pra_id(self):
        """Gets the additional_pra_id of this PresenceInfo.

        This IE may be present if the praId IE is present and if it contains a PRA identifier referring to a set of Core Network predefined Presence Reporting Areas. When present, this IE shall contain a PRA Identifier of an individual PRA within the Set of Core Network predefined Presence Reporting Areas indicated by the praId IE.    # noqa: E501

        :return: The additional_pra_id of this PresenceInfo.
        :rtype: str
        """
        return self._additional_pra_id

    @additional_pra_id.setter
    def additional_pra_id(self, additional_pra_id):
        """Sets the additional_pra_id of this PresenceInfo.

        This IE may be present if the praId IE is present and if it contains a PRA identifier referring to a set of Core Network predefined Presence Reporting Areas. When present, this IE shall contain a PRA Identifier of an individual PRA within the Set of Core Network predefined Presence Reporting Areas indicated by the praId IE.    # noqa: E501

        :param additional_pra_id: The additional_pra_id of this PresenceInfo.
        :type additional_pra_id: str
        """

        self._additional_pra_id = additional_pra_id

    @property
    def presence_state(self):
        """Gets the presence_state of this PresenceInfo.


        :return: The presence_state of this PresenceInfo.
        :rtype: PresenceState
        """
        return self._presence_state

    @presence_state.setter
    def presence_state(self, presence_state):
        """Sets the presence_state of this PresenceInfo.


        :param presence_state: The presence_state of this PresenceInfo.
        :type presence_state: PresenceState
        """

        self._presence_state = presence_state

    @property
    def tracking_area_list(self):
        """Gets the tracking_area_list of this PresenceInfo.

        Represents the list of tracking areas that constitutes the area. This IE shall be present if the subscription or  the event report is for tracking UE presence in the tracking areas. For non 3GPP access the TAI shall be the N3GPP TAI.    # noqa: E501

        :return: The tracking_area_list of this PresenceInfo.
        :rtype: List[Tai]
        """
        return self._tracking_area_list

    @tracking_area_list.setter
    def tracking_area_list(self, tracking_area_list):
        """Sets the tracking_area_list of this PresenceInfo.

        Represents the list of tracking areas that constitutes the area. This IE shall be present if the subscription or  the event report is for tracking UE presence in the tracking areas. For non 3GPP access the TAI shall be the N3GPP TAI.    # noqa: E501

        :param tracking_area_list: The tracking_area_list of this PresenceInfo.
        :type tracking_area_list: List[Tai]
        """
        if tracking_area_list is not None and len(tracking_area_list) < 1:
            raise ValueError("Invalid value for `tracking_area_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tracking_area_list = tracking_area_list

    @property
    def ecgi_list(self):
        """Gets the ecgi_list of this PresenceInfo.

        Represents the list of EUTRAN cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of EUTRAN cell Ids.    # noqa: E501

        :return: The ecgi_list of this PresenceInfo.
        :rtype: List[Ecgi]
        """
        return self._ecgi_list

    @ecgi_list.setter
    def ecgi_list(self, ecgi_list):
        """Sets the ecgi_list of this PresenceInfo.

        Represents the list of EUTRAN cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of EUTRAN cell Ids.    # noqa: E501

        :param ecgi_list: The ecgi_list of this PresenceInfo.
        :type ecgi_list: List[Ecgi]
        """
        if ecgi_list is not None and len(ecgi_list) < 1:
            raise ValueError("Invalid value for `ecgi_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ecgi_list = ecgi_list

    @property
    def ncgi_list(self):
        """Gets the ncgi_list of this PresenceInfo.

        Represents the list of NR cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NR cell Ids.    # noqa: E501

        :return: The ncgi_list of this PresenceInfo.
        :rtype: List[Ncgi]
        """
        return self._ncgi_list

    @ncgi_list.setter
    def ncgi_list(self, ncgi_list):
        """Sets the ncgi_list of this PresenceInfo.

        Represents the list of NR cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NR cell Ids.    # noqa: E501

        :param ncgi_list: The ncgi_list of this PresenceInfo.
        :type ncgi_list: List[Ncgi]
        """
        if ncgi_list is not None and len(ncgi_list) < 1:
            raise ValueError("Invalid value for `ncgi_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ncgi_list = ncgi_list

    @property
    def global_ran_node_id_list(self):
        """Gets the global_ran_node_id_list of this PresenceInfo.

        Represents the list of NG RAN node identifiers that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NG RAN node identifiers.    # noqa: E501

        :return: The global_ran_node_id_list of this PresenceInfo.
        :rtype: List[GlobalRanNodeId]
        """
        return self._global_ran_node_id_list

    @global_ran_node_id_list.setter
    def global_ran_node_id_list(self, global_ran_node_id_list):
        """Sets the global_ran_node_id_list of this PresenceInfo.

        Represents the list of NG RAN node identifiers that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NG RAN node identifiers.    # noqa: E501

        :param global_ran_node_id_list: The global_ran_node_id_list of this PresenceInfo.
        :type global_ran_node_id_list: List[GlobalRanNodeId]
        """
        if global_ran_node_id_list is not None and len(global_ran_node_id_list) < 1:
            raise ValueError("Invalid value for `global_ran_node_id_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._global_ran_node_id_list = global_ran_node_id_list

    @property
    def globale_nb_id_list(self):
        """Gets the globale_nb_id_list of this PresenceInfo.

        Represents the list of eNodeB identifiers that constitutes the area. This IE shall be  present if the Area of Interest subscribed is a list of eNodeB identifiers.   # noqa: E501

        :return: The globale_nb_id_list of this PresenceInfo.
        :rtype: List[GlobalRanNodeId]
        """
        return self._globale_nb_id_list

    @globale_nb_id_list.setter
    def globale_nb_id_list(self, globale_nb_id_list):
        """Sets the globale_nb_id_list of this PresenceInfo.

        Represents the list of eNodeB identifiers that constitutes the area. This IE shall be  present if the Area of Interest subscribed is a list of eNodeB identifiers.   # noqa: E501

        :param globale_nb_id_list: The globale_nb_id_list of this PresenceInfo.
        :type globale_nb_id_list: List[GlobalRanNodeId]
        """
        if globale_nb_id_list is not None and len(globale_nb_id_list) < 1:
            raise ValueError("Invalid value for `globale_nb_id_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._globale_nb_id_list = globale_nb_id_list
