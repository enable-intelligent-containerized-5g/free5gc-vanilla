# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.consumer_nf_information import ConsumerNfInformation
from openapi_server.models.event_notification import EventNotification
from openapi_server.models.event_subscription import EventSubscription
from openapi_server.models.failure_event_info import FailureEventInfo
from openapi_server.models.prev_sub_info import PrevSubInfo
from openapi_server.models.reporting_information import ReportingInformation
import re
from openapi_server import util

from openapi_server.models.consumer_nf_information import ConsumerNfInformation  # noqa: E501
from openapi_server.models.event_notification import EventNotification  # noqa: E501
from openapi_server.models.event_subscription import EventSubscription  # noqa: E501
from openapi_server.models.failure_event_info import FailureEventInfo  # noqa: E501
from openapi_server.models.prev_sub_info import PrevSubInfo  # noqa: E501
from openapi_server.models.reporting_information import ReportingInformation  # noqa: E501
import re  # noqa: E501

class NnwdafEventsSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_subscriptions=None, evt_req=None, notification_uri=None, notif_corr_id=None, supported_features=None, event_notifications=None, fail_event_reports=None, prev_sub=None, cons_nf_info=None):  # noqa: E501
        """NnwdafEventsSubscription - a model defined in OpenAPI

        :param event_subscriptions: The event_subscriptions of this NnwdafEventsSubscription.  # noqa: E501
        :type event_subscriptions: List[EventSubscription]
        :param evt_req: The evt_req of this NnwdafEventsSubscription.  # noqa: E501
        :type evt_req: ReportingInformation
        :param notification_uri: The notification_uri of this NnwdafEventsSubscription.  # noqa: E501
        :type notification_uri: str
        :param notif_corr_id: The notif_corr_id of this NnwdafEventsSubscription.  # noqa: E501
        :type notif_corr_id: str
        :param supported_features: The supported_features of this NnwdafEventsSubscription.  # noqa: E501
        :type supported_features: str
        :param event_notifications: The event_notifications of this NnwdafEventsSubscription.  # noqa: E501
        :type event_notifications: List[EventNotification]
        :param fail_event_reports: The fail_event_reports of this NnwdafEventsSubscription.  # noqa: E501
        :type fail_event_reports: List[FailureEventInfo]
        :param prev_sub: The prev_sub of this NnwdafEventsSubscription.  # noqa: E501
        :type prev_sub: PrevSubInfo
        :param cons_nf_info: The cons_nf_info of this NnwdafEventsSubscription.  # noqa: E501
        :type cons_nf_info: ConsumerNfInformation
        """
        self.openapi_types = {
            'event_subscriptions': List[EventSubscription],
            'evt_req': ReportingInformation,
            'notification_uri': str,
            'notif_corr_id': str,
            'supported_features': str,
            'event_notifications': List[EventNotification],
            'fail_event_reports': List[FailureEventInfo],
            'prev_sub': PrevSubInfo,
            'cons_nf_info': ConsumerNfInformation
        }

        self.attribute_map = {
            'event_subscriptions': 'eventSubscriptions',
            'evt_req': 'evtReq',
            'notification_uri': 'notificationURI',
            'notif_corr_id': 'notifCorrId',
            'supported_features': 'supportedFeatures',
            'event_notifications': 'eventNotifications',
            'fail_event_reports': 'failEventReports',
            'prev_sub': 'prevSub',
            'cons_nf_info': 'consNfInfo'
        }

        self.event_subscriptions = event_subscriptions
        self.evt_req = evt_req
        self.notification_uri = notification_uri
        self.notif_corr_id = notif_corr_id
        self.supported_features = supported_features
        self.event_notifications = event_notifications
        self.fail_event_reports = fail_event_reports
        self.prev_sub = prev_sub
        self.cons_nf_info = cons_nf_info

    @classmethod
    def from_dict(cls, dikt) -> 'NnwdafEventsSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NnwdafEventsSubscription of this NnwdafEventsSubscription.  # noqa: E501
        :rtype: NnwdafEventsSubscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_subscriptions(self):
        """Gets the event_subscriptions of this NnwdafEventsSubscription.

        Subscribed events  # noqa: E501

        :return: The event_subscriptions of this NnwdafEventsSubscription.
        :rtype: List[EventSubscription]
        """
        return self._event_subscriptions

    @event_subscriptions.setter
    def event_subscriptions(self, event_subscriptions):
        """Sets the event_subscriptions of this NnwdafEventsSubscription.

        Subscribed events  # noqa: E501

        :param event_subscriptions: The event_subscriptions of this NnwdafEventsSubscription.
        :type event_subscriptions: List[EventSubscription]
        """
        if event_subscriptions is None:
            raise ValueError("Invalid value for `event_subscriptions`, must not be `None`")  # noqa: E501
        if event_subscriptions is not None and len(event_subscriptions) < 1:
            raise ValueError("Invalid value for `event_subscriptions`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._event_subscriptions = event_subscriptions

    @property
    def evt_req(self):
        """Gets the evt_req of this NnwdafEventsSubscription.


        :return: The evt_req of this NnwdafEventsSubscription.
        :rtype: ReportingInformation
        """
        return self._evt_req

    @evt_req.setter
    def evt_req(self, evt_req):
        """Sets the evt_req of this NnwdafEventsSubscription.


        :param evt_req: The evt_req of this NnwdafEventsSubscription.
        :type evt_req: ReportingInformation
        """

        self._evt_req = evt_req

    @property
    def notification_uri(self):
        """Gets the notification_uri of this NnwdafEventsSubscription.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The notification_uri of this NnwdafEventsSubscription.
        :rtype: str
        """
        return self._notification_uri

    @notification_uri.setter
    def notification_uri(self, notification_uri):
        """Sets the notification_uri of this NnwdafEventsSubscription.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param notification_uri: The notification_uri of this NnwdafEventsSubscription.
        :type notification_uri: str
        """

        self._notification_uri = notification_uri

    @property
    def notif_corr_id(self):
        """Gets the notif_corr_id of this NnwdafEventsSubscription.

        Notification correlation identifier.  # noqa: E501

        :return: The notif_corr_id of this NnwdafEventsSubscription.
        :rtype: str
        """
        return self._notif_corr_id

    @notif_corr_id.setter
    def notif_corr_id(self, notif_corr_id):
        """Sets the notif_corr_id of this NnwdafEventsSubscription.

        Notification correlation identifier.  # noqa: E501

        :param notif_corr_id: The notif_corr_id of this NnwdafEventsSubscription.
        :type notif_corr_id: str
        """

        self._notif_corr_id = notif_corr_id

    @property
    def supported_features(self):
        """Gets the supported_features of this NnwdafEventsSubscription.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :return: The supported_features of this NnwdafEventsSubscription.
        :rtype: str
        """
        return self._supported_features

    @supported_features.setter
    def supported_features(self, supported_features):
        """Sets the supported_features of this NnwdafEventsSubscription.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :param supported_features: The supported_features of this NnwdafEventsSubscription.
        :type supported_features: str
        """
        if supported_features is not None and not re.search(r'^[A-Fa-f0-9]*$', supported_features):  # noqa: E501
            raise ValueError("Invalid value for `supported_features`, must be a follow pattern or equal to `/^[A-Fa-f0-9]*$/`")  # noqa: E501

        self._supported_features = supported_features

    @property
    def event_notifications(self):
        """Gets the event_notifications of this NnwdafEventsSubscription.


        :return: The event_notifications of this NnwdafEventsSubscription.
        :rtype: List[EventNotification]
        """
        return self._event_notifications

    @event_notifications.setter
    def event_notifications(self, event_notifications):
        """Sets the event_notifications of this NnwdafEventsSubscription.


        :param event_notifications: The event_notifications of this NnwdafEventsSubscription.
        :type event_notifications: List[EventNotification]
        """
        if event_notifications is not None and len(event_notifications) < 1:
            raise ValueError("Invalid value for `event_notifications`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._event_notifications = event_notifications

    @property
    def fail_event_reports(self):
        """Gets the fail_event_reports of this NnwdafEventsSubscription.


        :return: The fail_event_reports of this NnwdafEventsSubscription.
        :rtype: List[FailureEventInfo]
        """
        return self._fail_event_reports

    @fail_event_reports.setter
    def fail_event_reports(self, fail_event_reports):
        """Sets the fail_event_reports of this NnwdafEventsSubscription.


        :param fail_event_reports: The fail_event_reports of this NnwdafEventsSubscription.
        :type fail_event_reports: List[FailureEventInfo]
        """
        if fail_event_reports is not None and len(fail_event_reports) < 1:
            raise ValueError("Invalid value for `fail_event_reports`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._fail_event_reports = fail_event_reports

    @property
    def prev_sub(self):
        """Gets the prev_sub of this NnwdafEventsSubscription.


        :return: The prev_sub of this NnwdafEventsSubscription.
        :rtype: PrevSubInfo
        """
        return self._prev_sub

    @prev_sub.setter
    def prev_sub(self, prev_sub):
        """Sets the prev_sub of this NnwdafEventsSubscription.


        :param prev_sub: The prev_sub of this NnwdafEventsSubscription.
        :type prev_sub: PrevSubInfo
        """

        self._prev_sub = prev_sub

    @property
    def cons_nf_info(self):
        """Gets the cons_nf_info of this NnwdafEventsSubscription.


        :return: The cons_nf_info of this NnwdafEventsSubscription.
        :rtype: ConsumerNfInformation
        """
        return self._cons_nf_info

    @cons_nf_info.setter
    def cons_nf_info(self, cons_nf_info):
        """Sets the cons_nf_info of this NnwdafEventsSubscription.


        :param cons_nf_info: The cons_nf_info of this NnwdafEventsSubscription.
        :type cons_nf_info: ConsumerNfInformation
        """

        self._cons_nf_info = cons_nf_info
