# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ip_addr import IpAddr
from openapi_server.models.usage_threshold import UsageThreshold
import re
from openapi_server import util

from openapi_server.models.ip_addr import IpAddr  # noqa: E501
from openapi_server.models.usage_threshold import UsageThreshold  # noqa: E501
import re  # noqa: E501

class DispersionCollection1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gpsi=None, supi=None, ue_addr=None, data_usage=None, flow_desp=None, app_id=None, dnais=None, app_dur=None):  # noqa: E501
        """DispersionCollection1 - a model defined in OpenAPI

        :param gpsi: The gpsi of this DispersionCollection1.  # noqa: E501
        :type gpsi: str
        :param supi: The supi of this DispersionCollection1.  # noqa: E501
        :type supi: str
        :param ue_addr: The ue_addr of this DispersionCollection1.  # noqa: E501
        :type ue_addr: IpAddr
        :param data_usage: The data_usage of this DispersionCollection1.  # noqa: E501
        :type data_usage: UsageThreshold
        :param flow_desp: The flow_desp of this DispersionCollection1.  # noqa: E501
        :type flow_desp: str
        :param app_id: The app_id of this DispersionCollection1.  # noqa: E501
        :type app_id: str
        :param dnais: The dnais of this DispersionCollection1.  # noqa: E501
        :type dnais: List[str]
        :param app_dur: The app_dur of this DispersionCollection1.  # noqa: E501
        :type app_dur: int
        """
        self.openapi_types = {
            'gpsi': str,
            'supi': str,
            'ue_addr': IpAddr,
            'data_usage': UsageThreshold,
            'flow_desp': str,
            'app_id': str,
            'dnais': List[str],
            'app_dur': int
        }

        self.attribute_map = {
            'gpsi': 'gpsi',
            'supi': 'supi',
            'ue_addr': 'ueAddr',
            'data_usage': 'dataUsage',
            'flow_desp': 'flowDesp',
            'app_id': 'appId',
            'dnais': 'dnais',
            'app_dur': 'appDur'
        }

        self.gpsi = gpsi
        self.supi = supi
        self.ue_addr = ue_addr
        self.data_usage = data_usage
        self.flow_desp = flow_desp
        self.app_id = app_id
        self.dnais = dnais
        self.app_dur = app_dur

    @classmethod
    def from_dict(cls, dikt) -> 'DispersionCollection1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DispersionCollection_1 of this DispersionCollection1.  # noqa: E501
        :rtype: DispersionCollection1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gpsi(self):
        """Gets the gpsi of this DispersionCollection1.

        String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.    # noqa: E501

        :return: The gpsi of this DispersionCollection1.
        :rtype: str
        """
        return self._gpsi

    @gpsi.setter
    def gpsi(self, gpsi):
        """Sets the gpsi of this DispersionCollection1.

        String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.    # noqa: E501

        :param gpsi: The gpsi of this DispersionCollection1.
        :type gpsi: str
        """
        if gpsi is not None and not re.search(r'^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$', gpsi):  # noqa: E501
            raise ValueError("Invalid value for `gpsi`, must be a follow pattern or equal to `/^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$/`")  # noqa: E501

        self._gpsi = gpsi

    @property
    def supi(self):
        """Gets the supi of this DispersionCollection1.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :return: The supi of this DispersionCollection1.
        :rtype: str
        """
        return self._supi

    @supi.setter
    def supi(self, supi):
        """Sets the supi of this DispersionCollection1.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :param supi: The supi of this DispersionCollection1.
        :type supi: str
        """
        if supi is not None and not re.search(r'^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$', supi):  # noqa: E501
            raise ValueError("Invalid value for `supi`, must be a follow pattern or equal to `/^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$/`")  # noqa: E501

        self._supi = supi

    @property
    def ue_addr(self):
        """Gets the ue_addr of this DispersionCollection1.


        :return: The ue_addr of this DispersionCollection1.
        :rtype: IpAddr
        """
        return self._ue_addr

    @ue_addr.setter
    def ue_addr(self, ue_addr):
        """Sets the ue_addr of this DispersionCollection1.


        :param ue_addr: The ue_addr of this DispersionCollection1.
        :type ue_addr: IpAddr
        """

        self._ue_addr = ue_addr

    @property
    def data_usage(self):
        """Gets the data_usage of this DispersionCollection1.


        :return: The data_usage of this DispersionCollection1.
        :rtype: UsageThreshold
        """
        return self._data_usage

    @data_usage.setter
    def data_usage(self, data_usage):
        """Sets the data_usage of this DispersionCollection1.


        :param data_usage: The data_usage of this DispersionCollection1.
        :type data_usage: UsageThreshold
        """
        if data_usage is None:
            raise ValueError("Invalid value for `data_usage`, must not be `None`")  # noqa: E501

        self._data_usage = data_usage

    @property
    def flow_desp(self):
        """Gets the flow_desp of this DispersionCollection1.

        Defines a packet filter of an IP flow.  # noqa: E501

        :return: The flow_desp of this DispersionCollection1.
        :rtype: str
        """
        return self._flow_desp

    @flow_desp.setter
    def flow_desp(self, flow_desp):
        """Sets the flow_desp of this DispersionCollection1.

        Defines a packet filter of an IP flow.  # noqa: E501

        :param flow_desp: The flow_desp of this DispersionCollection1.
        :type flow_desp: str
        """

        self._flow_desp = flow_desp

    @property
    def app_id(self):
        """Gets the app_id of this DispersionCollection1.

        String providing an application identifier.  # noqa: E501

        :return: The app_id of this DispersionCollection1.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this DispersionCollection1.

        String providing an application identifier.  # noqa: E501

        :param app_id: The app_id of this DispersionCollection1.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def dnais(self):
        """Gets the dnais of this DispersionCollection1.


        :return: The dnais of this DispersionCollection1.
        :rtype: List[str]
        """
        return self._dnais

    @dnais.setter
    def dnais(self, dnais):
        """Sets the dnais of this DispersionCollection1.


        :param dnais: The dnais of this DispersionCollection1.
        :type dnais: List[str]
        """
        if dnais is not None and len(dnais) < 1:
            raise ValueError("Invalid value for `dnais`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._dnais = dnais

    @property
    def app_dur(self):
        """Gets the app_dur of this DispersionCollection1.

        indicating a time in seconds.  # noqa: E501

        :return: The app_dur of this DispersionCollection1.
        :rtype: int
        """
        return self._app_dur

    @app_dur.setter
    def app_dur(self, app_dur):
        """Sets the app_dur of this DispersionCollection1.

        indicating a time in seconds.  # noqa: E501

        :param app_dur: The app_dur of this DispersionCollection1.
        :type app_dur: int
        """

        self._app_dur = app_dur
