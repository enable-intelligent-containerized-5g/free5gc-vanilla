# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.location_accuracy import LocationAccuracy
from openapi_server import util

from openapi_server.models.location_accuracy import LocationAccuracy  # noqa: E501

class LocationReportingConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_location=None, one_time=None, accuracy=None, n3gpp_accuracy=None):  # noqa: E501
        """LocationReportingConfiguration - a model defined in OpenAPI

        :param current_location: The current_location of this LocationReportingConfiguration.  # noqa: E501
        :type current_location: bool
        :param one_time: The one_time of this LocationReportingConfiguration.  # noqa: E501
        :type one_time: bool
        :param accuracy: The accuracy of this LocationReportingConfiguration.  # noqa: E501
        :type accuracy: LocationAccuracy
        :param n3gpp_accuracy: The n3gpp_accuracy of this LocationReportingConfiguration.  # noqa: E501
        :type n3gpp_accuracy: LocationAccuracy
        """
        self.openapi_types = {
            'current_location': bool,
            'one_time': bool,
            'accuracy': LocationAccuracy,
            'n3gpp_accuracy': LocationAccuracy
        }

        self.attribute_map = {
            'current_location': 'currentLocation',
            'one_time': 'oneTime',
            'accuracy': 'accuracy',
            'n3gpp_accuracy': 'n3gppAccuracy'
        }

        self.current_location = current_location
        self.one_time = one_time
        self.accuracy = accuracy
        self.n3gpp_accuracy = n3gpp_accuracy

    @classmethod
    def from_dict(cls, dikt) -> 'LocationReportingConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LocationReportingConfiguration of this LocationReportingConfiguration.  # noqa: E501
        :rtype: LocationReportingConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_location(self):
        """Gets the current_location of this LocationReportingConfiguration.


        :return: The current_location of this LocationReportingConfiguration.
        :rtype: bool
        """
        return self._current_location

    @current_location.setter
    def current_location(self, current_location):
        """Sets the current_location of this LocationReportingConfiguration.


        :param current_location: The current_location of this LocationReportingConfiguration.
        :type current_location: bool
        """
        if current_location is None:
            raise ValueError("Invalid value for `current_location`, must not be `None`")  # noqa: E501

        self._current_location = current_location

    @property
    def one_time(self):
        """Gets the one_time of this LocationReportingConfiguration.


        :return: The one_time of this LocationReportingConfiguration.
        :rtype: bool
        """
        return self._one_time

    @one_time.setter
    def one_time(self, one_time):
        """Sets the one_time of this LocationReportingConfiguration.


        :param one_time: The one_time of this LocationReportingConfiguration.
        :type one_time: bool
        """

        self._one_time = one_time

    @property
    def accuracy(self):
        """Gets the accuracy of this LocationReportingConfiguration.


        :return: The accuracy of this LocationReportingConfiguration.
        :rtype: LocationAccuracy
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this LocationReportingConfiguration.


        :param accuracy: The accuracy of this LocationReportingConfiguration.
        :type accuracy: LocationAccuracy
        """

        self._accuracy = accuracy

    @property
    def n3gpp_accuracy(self):
        """Gets the n3gpp_accuracy of this LocationReportingConfiguration.


        :return: The n3gpp_accuracy of this LocationReportingConfiguration.
        :rtype: LocationAccuracy
        """
        return self._n3gpp_accuracy

    @n3gpp_accuracy.setter
    def n3gpp_accuracy(self, n3gpp_accuracy):
        """Sets the n3gpp_accuracy of this LocationReportingConfiguration.


        :param n3gpp_accuracy: The n3gpp_accuracy of this LocationReportingConfiguration.
        :type n3gpp_accuracy: LocationAccuracy
        """

        self._n3gpp_accuracy = n3gpp_accuracy
