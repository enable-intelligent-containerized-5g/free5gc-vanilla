# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.access_type import AccessType
from openapi_server.models.supported_snssai import SupportedSnssai
from openapi_server.models.target_area import TargetArea
from openapi_server import util

from openapi_server.models.access_type import AccessType  # noqa: E501
from openapi_server.models.supported_snssai import SupportedSnssai  # noqa: E501
from openapi_server.models.target_area import TargetArea  # noqa: E501

class SnssaiTaiMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reporting_area=None, access_type_list=None, supported_snssai_list=None):  # noqa: E501
        """SnssaiTaiMapping - a model defined in OpenAPI

        :param reporting_area: The reporting_area of this SnssaiTaiMapping.  # noqa: E501
        :type reporting_area: TargetArea
        :param access_type_list: The access_type_list of this SnssaiTaiMapping.  # noqa: E501
        :type access_type_list: List[AccessType]
        :param supported_snssai_list: The supported_snssai_list of this SnssaiTaiMapping.  # noqa: E501
        :type supported_snssai_list: List[SupportedSnssai]
        """
        self.openapi_types = {
            'reporting_area': TargetArea,
            'access_type_list': List[AccessType],
            'supported_snssai_list': List[SupportedSnssai]
        }

        self.attribute_map = {
            'reporting_area': 'reportingArea',
            'access_type_list': 'accessTypeList',
            'supported_snssai_list': 'supportedSnssaiList'
        }

        self.reporting_area = reporting_area
        self.access_type_list = access_type_list
        self.supported_snssai_list = supported_snssai_list

    @classmethod
    def from_dict(cls, dikt) -> 'SnssaiTaiMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SnssaiTaiMapping of this SnssaiTaiMapping.  # noqa: E501
        :rtype: SnssaiTaiMapping
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reporting_area(self):
        """Gets the reporting_area of this SnssaiTaiMapping.


        :return: The reporting_area of this SnssaiTaiMapping.
        :rtype: TargetArea
        """
        return self._reporting_area

    @reporting_area.setter
    def reporting_area(self, reporting_area):
        """Sets the reporting_area of this SnssaiTaiMapping.


        :param reporting_area: The reporting_area of this SnssaiTaiMapping.
        :type reporting_area: TargetArea
        """
        if reporting_area is None:
            raise ValueError("Invalid value for `reporting_area`, must not be `None`")  # noqa: E501

        self._reporting_area = reporting_area

    @property
    def access_type_list(self):
        """Gets the access_type_list of this SnssaiTaiMapping.


        :return: The access_type_list of this SnssaiTaiMapping.
        :rtype: List[AccessType]
        """
        return self._access_type_list

    @access_type_list.setter
    def access_type_list(self, access_type_list):
        """Sets the access_type_list of this SnssaiTaiMapping.


        :param access_type_list: The access_type_list of this SnssaiTaiMapping.
        :type access_type_list: List[AccessType]
        """
        if access_type_list is not None and len(access_type_list) < 1:
            raise ValueError("Invalid value for `access_type_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._access_type_list = access_type_list

    @property
    def supported_snssai_list(self):
        """Gets the supported_snssai_list of this SnssaiTaiMapping.


        :return: The supported_snssai_list of this SnssaiTaiMapping.
        :rtype: List[SupportedSnssai]
        """
        return self._supported_snssai_list

    @supported_snssai_list.setter
    def supported_snssai_list(self, supported_snssai_list):
        """Sets the supported_snssai_list of this SnssaiTaiMapping.


        :param supported_snssai_list: The supported_snssai_list of this SnssaiTaiMapping.
        :type supported_snssai_list: List[SupportedSnssai]
        """
        if supported_snssai_list is not None and len(supported_snssai_list) < 1:
            raise ValueError("Invalid value for `supported_snssai_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supported_snssai_list = supported_snssai_list
