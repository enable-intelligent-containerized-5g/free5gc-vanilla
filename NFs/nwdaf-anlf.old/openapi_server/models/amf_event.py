# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.amf_event_area import AmfEventArea
from openapi_server.models.amf_event_type import AmfEventType
from openapi_server.models.dispersion_area import DispersionArea
from openapi_server.models.ext_snssai import ExtSnssai
from openapi_server.models.location_filter import LocationFilter
from openapi_server.models.presence_info import PresenceInfo
from openapi_server.models.reachability_filter import ReachabilityFilter
from openapi_server.models.target_area import TargetArea
from openapi_server.models.traffic_descriptor import TrafficDescriptor
from openapi_server.models.ue_in_area_filter import UeInAreaFilter
from openapi_server import util

from openapi_server.models.amf_event_area import AmfEventArea  # noqa: E501
from openapi_server.models.amf_event_type import AmfEventType  # noqa: E501
from openapi_server.models.dispersion_area import DispersionArea  # noqa: E501
from openapi_server.models.ext_snssai import ExtSnssai  # noqa: E501
from openapi_server.models.location_filter import LocationFilter  # noqa: E501
from openapi_server.models.presence_info import PresenceInfo  # noqa: E501
from openapi_server.models.reachability_filter import ReachabilityFilter  # noqa: E501
from openapi_server.models.target_area import TargetArea  # noqa: E501
from openapi_server.models.traffic_descriptor import TrafficDescriptor  # noqa: E501
from openapi_server.models.ue_in_area_filter import UeInAreaFilter  # noqa: E501

class AmfEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, immediate_flag=False, area_list=None, location_filter_list=None, ref_id=None, traffic_descriptor_list=None, report_ue_reachable=False, reachability_filter=None, udm_detect_ind=False, max_reports=None, presence_info_list=None, max_response_time=None, target_area=None, snssai_filter=None, ue_in_area_filter=None, min_interval=None, next_report=None, idle_status_ind=False, dispersion_area=None):  # noqa: E501
        """AmfEvent - a model defined in OpenAPI

        :param type: The type of this AmfEvent.  # noqa: E501
        :type type: AmfEventType
        :param immediate_flag: The immediate_flag of this AmfEvent.  # noqa: E501
        :type immediate_flag: bool
        :param area_list: The area_list of this AmfEvent.  # noqa: E501
        :type area_list: List[AmfEventArea]
        :param location_filter_list: The location_filter_list of this AmfEvent.  # noqa: E501
        :type location_filter_list: List[LocationFilter]
        :param ref_id: The ref_id of this AmfEvent.  # noqa: E501
        :type ref_id: int
        :param traffic_descriptor_list: The traffic_descriptor_list of this AmfEvent.  # noqa: E501
        :type traffic_descriptor_list: List[TrafficDescriptor]
        :param report_ue_reachable: The report_ue_reachable of this AmfEvent.  # noqa: E501
        :type report_ue_reachable: bool
        :param reachability_filter: The reachability_filter of this AmfEvent.  # noqa: E501
        :type reachability_filter: ReachabilityFilter
        :param udm_detect_ind: The udm_detect_ind of this AmfEvent.  # noqa: E501
        :type udm_detect_ind: bool
        :param max_reports: The max_reports of this AmfEvent.  # noqa: E501
        :type max_reports: int
        :param presence_info_list: The presence_info_list of this AmfEvent.  # noqa: E501
        :type presence_info_list: Dict[str, PresenceInfo]
        :param max_response_time: The max_response_time of this AmfEvent.  # noqa: E501
        :type max_response_time: int
        :param target_area: The target_area of this AmfEvent.  # noqa: E501
        :type target_area: TargetArea
        :param snssai_filter: The snssai_filter of this AmfEvent.  # noqa: E501
        :type snssai_filter: List[ExtSnssai]
        :param ue_in_area_filter: The ue_in_area_filter of this AmfEvent.  # noqa: E501
        :type ue_in_area_filter: UeInAreaFilter
        :param min_interval: The min_interval of this AmfEvent.  # noqa: E501
        :type min_interval: int
        :param next_report: The next_report of this AmfEvent.  # noqa: E501
        :type next_report: datetime
        :param idle_status_ind: The idle_status_ind of this AmfEvent.  # noqa: E501
        :type idle_status_ind: bool
        :param dispersion_area: The dispersion_area of this AmfEvent.  # noqa: E501
        :type dispersion_area: DispersionArea
        """
        self.openapi_types = {
            'type': AmfEventType,
            'immediate_flag': bool,
            'area_list': List[AmfEventArea],
            'location_filter_list': List[LocationFilter],
            'ref_id': int,
            'traffic_descriptor_list': List[TrafficDescriptor],
            'report_ue_reachable': bool,
            'reachability_filter': ReachabilityFilter,
            'udm_detect_ind': bool,
            'max_reports': int,
            'presence_info_list': Dict[str, PresenceInfo],
            'max_response_time': int,
            'target_area': TargetArea,
            'snssai_filter': List[ExtSnssai],
            'ue_in_area_filter': UeInAreaFilter,
            'min_interval': int,
            'next_report': datetime,
            'idle_status_ind': bool,
            'dispersion_area': DispersionArea
        }

        self.attribute_map = {
            'type': 'type',
            'immediate_flag': 'immediateFlag',
            'area_list': 'areaList',
            'location_filter_list': 'locationFilterList',
            'ref_id': 'refId',
            'traffic_descriptor_list': 'trafficDescriptorList',
            'report_ue_reachable': 'reportUeReachable',
            'reachability_filter': 'reachabilityFilter',
            'udm_detect_ind': 'udmDetectInd',
            'max_reports': 'maxReports',
            'presence_info_list': 'presenceInfoList',
            'max_response_time': 'maxResponseTime',
            'target_area': 'targetArea',
            'snssai_filter': 'snssaiFilter',
            'ue_in_area_filter': 'ueInAreaFilter',
            'min_interval': 'minInterval',
            'next_report': 'nextReport',
            'idle_status_ind': 'idleStatusInd',
            'dispersion_area': 'dispersionArea'
        }

        self.type = type
        self.immediate_flag = immediate_flag
        self.area_list = area_list
        self.location_filter_list = location_filter_list
        self.ref_id = ref_id
        self.traffic_descriptor_list = traffic_descriptor_list
        self.report_ue_reachable = report_ue_reachable
        self.reachability_filter = reachability_filter
        self.udm_detect_ind = udm_detect_ind
        self.max_reports = max_reports
        self.presence_info_list = presence_info_list
        self.max_response_time = max_response_time
        self.target_area = target_area
        self.snssai_filter = snssai_filter
        self.ue_in_area_filter = ue_in_area_filter
        self.min_interval = min_interval
        self.next_report = next_report
        self.idle_status_ind = idle_status_ind
        self.dispersion_area = dispersion_area

    @classmethod
    def from_dict(cls, dikt) -> 'AmfEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AmfEvent of this AmfEvent.  # noqa: E501
        :rtype: AmfEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this AmfEvent.


        :return: The type of this AmfEvent.
        :rtype: AmfEventType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AmfEvent.


        :param type: The type of this AmfEvent.
        :type type: AmfEventType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def immediate_flag(self):
        """Gets the immediate_flag of this AmfEvent.


        :return: The immediate_flag of this AmfEvent.
        :rtype: bool
        """
        return self._immediate_flag

    @immediate_flag.setter
    def immediate_flag(self, immediate_flag):
        """Sets the immediate_flag of this AmfEvent.


        :param immediate_flag: The immediate_flag of this AmfEvent.
        :type immediate_flag: bool
        """

        self._immediate_flag = immediate_flag

    @property
    def area_list(self):
        """Gets the area_list of this AmfEvent.


        :return: The area_list of this AmfEvent.
        :rtype: List[AmfEventArea]
        """
        return self._area_list

    @area_list.setter
    def area_list(self, area_list):
        """Sets the area_list of this AmfEvent.


        :param area_list: The area_list of this AmfEvent.
        :type area_list: List[AmfEventArea]
        """
        if area_list is not None and len(area_list) < 1:
            raise ValueError("Invalid value for `area_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._area_list = area_list

    @property
    def location_filter_list(self):
        """Gets the location_filter_list of this AmfEvent.


        :return: The location_filter_list of this AmfEvent.
        :rtype: List[LocationFilter]
        """
        return self._location_filter_list

    @location_filter_list.setter
    def location_filter_list(self, location_filter_list):
        """Sets the location_filter_list of this AmfEvent.


        :param location_filter_list: The location_filter_list of this AmfEvent.
        :type location_filter_list: List[LocationFilter]
        """
        if location_filter_list is not None and len(location_filter_list) < 1:
            raise ValueError("Invalid value for `location_filter_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._location_filter_list = location_filter_list

    @property
    def ref_id(self):
        """Gets the ref_id of this AmfEvent.


        :return: The ref_id of this AmfEvent.
        :rtype: int
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this AmfEvent.


        :param ref_id: The ref_id of this AmfEvent.
        :type ref_id: int
        """

        self._ref_id = ref_id

    @property
    def traffic_descriptor_list(self):
        """Gets the traffic_descriptor_list of this AmfEvent.


        :return: The traffic_descriptor_list of this AmfEvent.
        :rtype: List[TrafficDescriptor]
        """
        return self._traffic_descriptor_list

    @traffic_descriptor_list.setter
    def traffic_descriptor_list(self, traffic_descriptor_list):
        """Sets the traffic_descriptor_list of this AmfEvent.


        :param traffic_descriptor_list: The traffic_descriptor_list of this AmfEvent.
        :type traffic_descriptor_list: List[TrafficDescriptor]
        """
        if traffic_descriptor_list is not None and len(traffic_descriptor_list) < 1:
            raise ValueError("Invalid value for `traffic_descriptor_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._traffic_descriptor_list = traffic_descriptor_list

    @property
    def report_ue_reachable(self):
        """Gets the report_ue_reachable of this AmfEvent.


        :return: The report_ue_reachable of this AmfEvent.
        :rtype: bool
        """
        return self._report_ue_reachable

    @report_ue_reachable.setter
    def report_ue_reachable(self, report_ue_reachable):
        """Sets the report_ue_reachable of this AmfEvent.


        :param report_ue_reachable: The report_ue_reachable of this AmfEvent.
        :type report_ue_reachable: bool
        """

        self._report_ue_reachable = report_ue_reachable

    @property
    def reachability_filter(self):
        """Gets the reachability_filter of this AmfEvent.


        :return: The reachability_filter of this AmfEvent.
        :rtype: ReachabilityFilter
        """
        return self._reachability_filter

    @reachability_filter.setter
    def reachability_filter(self, reachability_filter):
        """Sets the reachability_filter of this AmfEvent.


        :param reachability_filter: The reachability_filter of this AmfEvent.
        :type reachability_filter: ReachabilityFilter
        """

        self._reachability_filter = reachability_filter

    @property
    def udm_detect_ind(self):
        """Gets the udm_detect_ind of this AmfEvent.


        :return: The udm_detect_ind of this AmfEvent.
        :rtype: bool
        """
        return self._udm_detect_ind

    @udm_detect_ind.setter
    def udm_detect_ind(self, udm_detect_ind):
        """Sets the udm_detect_ind of this AmfEvent.


        :param udm_detect_ind: The udm_detect_ind of this AmfEvent.
        :type udm_detect_ind: bool
        """

        self._udm_detect_ind = udm_detect_ind

    @property
    def max_reports(self):
        """Gets the max_reports of this AmfEvent.


        :return: The max_reports of this AmfEvent.
        :rtype: int
        """
        return self._max_reports

    @max_reports.setter
    def max_reports(self, max_reports):
        """Sets the max_reports of this AmfEvent.


        :param max_reports: The max_reports of this AmfEvent.
        :type max_reports: int
        """

        self._max_reports = max_reports

    @property
    def presence_info_list(self):
        """Gets the presence_info_list of this AmfEvent.

        A map(list of key-value pairs) where praId serves as key.  # noqa: E501

        :return: The presence_info_list of this AmfEvent.
        :rtype: Dict[str, PresenceInfo]
        """
        return self._presence_info_list

    @presence_info_list.setter
    def presence_info_list(self, presence_info_list):
        """Sets the presence_info_list of this AmfEvent.

        A map(list of key-value pairs) where praId serves as key.  # noqa: E501

        :param presence_info_list: The presence_info_list of this AmfEvent.
        :type presence_info_list: Dict[str, PresenceInfo]
        """
        if presence_info_list is not None and len(presence_info_list) < 1:
            raise ValueError("Invalid value for `presence_info_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._presence_info_list = presence_info_list

    @property
    def max_response_time(self):
        """Gets the max_response_time of this AmfEvent.

        indicating a time in seconds.  # noqa: E501

        :return: The max_response_time of this AmfEvent.
        :rtype: int
        """
        return self._max_response_time

    @max_response_time.setter
    def max_response_time(self, max_response_time):
        """Sets the max_response_time of this AmfEvent.

        indicating a time in seconds.  # noqa: E501

        :param max_response_time: The max_response_time of this AmfEvent.
        :type max_response_time: int
        """

        self._max_response_time = max_response_time

    @property
    def target_area(self):
        """Gets the target_area of this AmfEvent.


        :return: The target_area of this AmfEvent.
        :rtype: TargetArea
        """
        return self._target_area

    @target_area.setter
    def target_area(self, target_area):
        """Sets the target_area of this AmfEvent.


        :param target_area: The target_area of this AmfEvent.
        :type target_area: TargetArea
        """

        self._target_area = target_area

    @property
    def snssai_filter(self):
        """Gets the snssai_filter of this AmfEvent.


        :return: The snssai_filter of this AmfEvent.
        :rtype: List[ExtSnssai]
        """
        return self._snssai_filter

    @snssai_filter.setter
    def snssai_filter(self, snssai_filter):
        """Sets the snssai_filter of this AmfEvent.


        :param snssai_filter: The snssai_filter of this AmfEvent.
        :type snssai_filter: List[ExtSnssai]
        """
        if snssai_filter is not None and len(snssai_filter) < 1:
            raise ValueError("Invalid value for `snssai_filter`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._snssai_filter = snssai_filter

    @property
    def ue_in_area_filter(self):
        """Gets the ue_in_area_filter of this AmfEvent.


        :return: The ue_in_area_filter of this AmfEvent.
        :rtype: UeInAreaFilter
        """
        return self._ue_in_area_filter

    @ue_in_area_filter.setter
    def ue_in_area_filter(self, ue_in_area_filter):
        """Sets the ue_in_area_filter of this AmfEvent.


        :param ue_in_area_filter: The ue_in_area_filter of this AmfEvent.
        :type ue_in_area_filter: UeInAreaFilter
        """

        self._ue_in_area_filter = ue_in_area_filter

    @property
    def min_interval(self):
        """Gets the min_interval of this AmfEvent.

        indicating a time in seconds.  # noqa: E501

        :return: The min_interval of this AmfEvent.
        :rtype: int
        """
        return self._min_interval

    @min_interval.setter
    def min_interval(self, min_interval):
        """Sets the min_interval of this AmfEvent.

        indicating a time in seconds.  # noqa: E501

        :param min_interval: The min_interval of this AmfEvent.
        :type min_interval: int
        """

        self._min_interval = min_interval

    @property
    def next_report(self):
        """Gets the next_report of this AmfEvent.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The next_report of this AmfEvent.
        :rtype: datetime
        """
        return self._next_report

    @next_report.setter
    def next_report(self, next_report):
        """Sets the next_report of this AmfEvent.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param next_report: The next_report of this AmfEvent.
        :type next_report: datetime
        """

        self._next_report = next_report

    @property
    def idle_status_ind(self):
        """Gets the idle_status_ind of this AmfEvent.


        :return: The idle_status_ind of this AmfEvent.
        :rtype: bool
        """
        return self._idle_status_ind

    @idle_status_ind.setter
    def idle_status_ind(self, idle_status_ind):
        """Sets the idle_status_ind of this AmfEvent.


        :param idle_status_ind: The idle_status_ind of this AmfEvent.
        :type idle_status_ind: bool
        """

        self._idle_status_ind = idle_status_ind

    @property
    def dispersion_area(self):
        """Gets the dispersion_area of this AmfEvent.


        :return: The dispersion_area of this AmfEvent.
        :rtype: DispersionArea
        """
        return self._dispersion_area

    @dispersion_area.setter
    def dispersion_area(self, dispersion_area):
        """Sets the dispersion_area of this AmfEvent.


        :param dispersion_area: The dispersion_area of this AmfEvent.
        :type dispersion_area: DispersionArea
        """

        self._dispersion_area = dispersion_area
