# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.network_perf_type import NetworkPerfType
from openapi_server import util

from openapi_server.models.network_perf_type import NetworkPerfType  # noqa: E501

class NetworkPerfRequirement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nw_perf_type=None, relative_ratio=None, absolute_num=None):  # noqa: E501
        """NetworkPerfRequirement - a model defined in OpenAPI

        :param nw_perf_type: The nw_perf_type of this NetworkPerfRequirement.  # noqa: E501
        :type nw_perf_type: NetworkPerfType
        :param relative_ratio: The relative_ratio of this NetworkPerfRequirement.  # noqa: E501
        :type relative_ratio: int
        :param absolute_num: The absolute_num of this NetworkPerfRequirement.  # noqa: E501
        :type absolute_num: int
        """
        self.openapi_types = {
            'nw_perf_type': NetworkPerfType,
            'relative_ratio': int,
            'absolute_num': int
        }

        self.attribute_map = {
            'nw_perf_type': 'nwPerfType',
            'relative_ratio': 'relativeRatio',
            'absolute_num': 'absoluteNum'
        }

        self.nw_perf_type = nw_perf_type
        self.relative_ratio = relative_ratio
        self.absolute_num = absolute_num

    @classmethod
    def from_dict(cls, dikt) -> 'NetworkPerfRequirement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NetworkPerfRequirement of this NetworkPerfRequirement.  # noqa: E501
        :rtype: NetworkPerfRequirement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nw_perf_type(self):
        """Gets the nw_perf_type of this NetworkPerfRequirement.


        :return: The nw_perf_type of this NetworkPerfRequirement.
        :rtype: NetworkPerfType
        """
        return self._nw_perf_type

    @nw_perf_type.setter
    def nw_perf_type(self, nw_perf_type):
        """Sets the nw_perf_type of this NetworkPerfRequirement.


        :param nw_perf_type: The nw_perf_type of this NetworkPerfRequirement.
        :type nw_perf_type: NetworkPerfType
        """
        if nw_perf_type is None:
            raise ValueError("Invalid value for `nw_perf_type`, must not be `None`")  # noqa: E501

        self._nw_perf_type = nw_perf_type

    @property
    def relative_ratio(self):
        """Gets the relative_ratio of this NetworkPerfRequirement.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :return: The relative_ratio of this NetworkPerfRequirement.
        :rtype: int
        """
        return self._relative_ratio

    @relative_ratio.setter
    def relative_ratio(self, relative_ratio):
        """Sets the relative_ratio of this NetworkPerfRequirement.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :param relative_ratio: The relative_ratio of this NetworkPerfRequirement.
        :type relative_ratio: int
        """
        if relative_ratio is not None and relative_ratio > 100:  # noqa: E501
            raise ValueError("Invalid value for `relative_ratio`, must be a value less than or equal to `100`")  # noqa: E501
        if relative_ratio is not None and relative_ratio < 1:  # noqa: E501
            raise ValueError("Invalid value for `relative_ratio`, must be a value greater than or equal to `1`")  # noqa: E501

        self._relative_ratio = relative_ratio

    @property
    def absolute_num(self):
        """Gets the absolute_num of this NetworkPerfRequirement.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The absolute_num of this NetworkPerfRequirement.
        :rtype: int
        """
        return self._absolute_num

    @absolute_num.setter
    def absolute_num(self, absolute_num):
        """Sets the absolute_num of this NetworkPerfRequirement.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param absolute_num: The absolute_num of this NetworkPerfRequirement.
        :type absolute_num: int
        """
        if absolute_num is not None and absolute_num < 0:  # noqa: E501
            raise ValueError("Invalid value for `absolute_num`, must be a value greater than or equal to `0`")  # noqa: E501

        self._absolute_num = absolute_num
