# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ipv6_addr import Ipv6Addr
from openapi_server.models.ipv6_prefix import Ipv6Prefix
from openapi_server.models.pdn_connectivity_status import PdnConnectivityStatus
from openapi_server.models.pdu_session_type import PduSessionType
import re
from openapi_server import util

from openapi_server.models.ipv6_addr import Ipv6Addr  # noqa: E501
from openapi_server.models.ipv6_prefix import Ipv6Prefix  # noqa: E501
from openapi_server.models.pdn_connectivity_status import PdnConnectivityStatus  # noqa: E501
from openapi_server.models.pdu_session_type import PduSessionType  # noqa: E501
import re  # noqa: E501

class PdnConnectivityStatReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pdn_conn_stat=None, dnn=None, pdu_se_id=None, ipv4_addr=None, ipv6_prefixes=None, ipv6_addrs=None, pdu_sess_type=None):  # noqa: E501
        """PdnConnectivityStatReport - a model defined in OpenAPI

        :param pdn_conn_stat: The pdn_conn_stat of this PdnConnectivityStatReport.  # noqa: E501
        :type pdn_conn_stat: PdnConnectivityStatus
        :param dnn: The dnn of this PdnConnectivityStatReport.  # noqa: E501
        :type dnn: str
        :param pdu_se_id: The pdu_se_id of this PdnConnectivityStatReport.  # noqa: E501
        :type pdu_se_id: int
        :param ipv4_addr: The ipv4_addr of this PdnConnectivityStatReport.  # noqa: E501
        :type ipv4_addr: str
        :param ipv6_prefixes: The ipv6_prefixes of this PdnConnectivityStatReport.  # noqa: E501
        :type ipv6_prefixes: List[Ipv6Prefix]
        :param ipv6_addrs: The ipv6_addrs of this PdnConnectivityStatReport.  # noqa: E501
        :type ipv6_addrs: List[Ipv6Addr]
        :param pdu_sess_type: The pdu_sess_type of this PdnConnectivityStatReport.  # noqa: E501
        :type pdu_sess_type: PduSessionType
        """
        self.openapi_types = {
            'pdn_conn_stat': PdnConnectivityStatus,
            'dnn': str,
            'pdu_se_id': int,
            'ipv4_addr': str,
            'ipv6_prefixes': List[Ipv6Prefix],
            'ipv6_addrs': List[Ipv6Addr],
            'pdu_sess_type': PduSessionType
        }

        self.attribute_map = {
            'pdn_conn_stat': 'pdnConnStat',
            'dnn': 'dnn',
            'pdu_se_id': 'pduSeId',
            'ipv4_addr': 'ipv4Addr',
            'ipv6_prefixes': 'ipv6Prefixes',
            'ipv6_addrs': 'ipv6Addrs',
            'pdu_sess_type': 'pduSessType'
        }

        self.pdn_conn_stat = pdn_conn_stat
        self.dnn = dnn
        self.pdu_se_id = pdu_se_id
        self.ipv4_addr = ipv4_addr
        self.ipv6_prefixes = ipv6_prefixes
        self.ipv6_addrs = ipv6_addrs
        self.pdu_sess_type = pdu_sess_type

    @classmethod
    def from_dict(cls, dikt) -> 'PdnConnectivityStatReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PdnConnectivityStatReport of this PdnConnectivityStatReport.  # noqa: E501
        :rtype: PdnConnectivityStatReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pdn_conn_stat(self):
        """Gets the pdn_conn_stat of this PdnConnectivityStatReport.


        :return: The pdn_conn_stat of this PdnConnectivityStatReport.
        :rtype: PdnConnectivityStatus
        """
        return self._pdn_conn_stat

    @pdn_conn_stat.setter
    def pdn_conn_stat(self, pdn_conn_stat):
        """Sets the pdn_conn_stat of this PdnConnectivityStatReport.


        :param pdn_conn_stat: The pdn_conn_stat of this PdnConnectivityStatReport.
        :type pdn_conn_stat: PdnConnectivityStatus
        """
        if pdn_conn_stat is None:
            raise ValueError("Invalid value for `pdn_conn_stat`, must not be `None`")  # noqa: E501

        self._pdn_conn_stat = pdn_conn_stat

    @property
    def dnn(self):
        """Gets the dnn of this PdnConnectivityStatReport.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :return: The dnn of this PdnConnectivityStatReport.
        :rtype: str
        """
        return self._dnn

    @dnn.setter
    def dnn(self, dnn):
        """Sets the dnn of this PdnConnectivityStatReport.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :param dnn: The dnn of this PdnConnectivityStatReport.
        :type dnn: str
        """

        self._dnn = dnn

    @property
    def pdu_se_id(self):
        """Gets the pdu_se_id of this PdnConnectivityStatReport.

        Unsigned integer identifying a PDU session, within the range 0 to 255, as specified in  clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU Session ID is allocated by the  Core Network for UEs not supporting N1 mode, reserved range 64 to 95 is used. PDU Session ID  within the reserved range is only visible in the Core Network.    # noqa: E501

        :return: The pdu_se_id of this PdnConnectivityStatReport.
        :rtype: int
        """
        return self._pdu_se_id

    @pdu_se_id.setter
    def pdu_se_id(self, pdu_se_id):
        """Sets the pdu_se_id of this PdnConnectivityStatReport.

        Unsigned integer identifying a PDU session, within the range 0 to 255, as specified in  clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU Session ID is allocated by the  Core Network for UEs not supporting N1 mode, reserved range 64 to 95 is used. PDU Session ID  within the reserved range is only visible in the Core Network.    # noqa: E501

        :param pdu_se_id: The pdu_se_id of this PdnConnectivityStatReport.
        :type pdu_se_id: int
        """
        if pdu_se_id is not None and pdu_se_id > 255:  # noqa: E501
            raise ValueError("Invalid value for `pdu_se_id`, must be a value less than or equal to `255`")  # noqa: E501
        if pdu_se_id is not None and pdu_se_id < 0:  # noqa: E501
            raise ValueError("Invalid value for `pdu_se_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pdu_se_id = pdu_se_id

    @property
    def ipv4_addr(self):
        """Gets the ipv4_addr of this PdnConnectivityStatReport.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :return: The ipv4_addr of this PdnConnectivityStatReport.
        :rtype: str
        """
        return self._ipv4_addr

    @ipv4_addr.setter
    def ipv4_addr(self, ipv4_addr):
        """Sets the ipv4_addr of this PdnConnectivityStatReport.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :param ipv4_addr: The ipv4_addr of this PdnConnectivityStatReport.
        :type ipv4_addr: str
        """
        if ipv4_addr is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', ipv4_addr):  # noqa: E501
            raise ValueError("Invalid value for `ipv4_addr`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/`")  # noqa: E501

        self._ipv4_addr = ipv4_addr

    @property
    def ipv6_prefixes(self):
        """Gets the ipv6_prefixes of this PdnConnectivityStatReport.


        :return: The ipv6_prefixes of this PdnConnectivityStatReport.
        :rtype: List[Ipv6Prefix]
        """
        return self._ipv6_prefixes

    @ipv6_prefixes.setter
    def ipv6_prefixes(self, ipv6_prefixes):
        """Sets the ipv6_prefixes of this PdnConnectivityStatReport.


        :param ipv6_prefixes: The ipv6_prefixes of this PdnConnectivityStatReport.
        :type ipv6_prefixes: List[Ipv6Prefix]
        """
        if ipv6_prefixes is not None and len(ipv6_prefixes) < 1:
            raise ValueError("Invalid value for `ipv6_prefixes`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ipv6_prefixes = ipv6_prefixes

    @property
    def ipv6_addrs(self):
        """Gets the ipv6_addrs of this PdnConnectivityStatReport.


        :return: The ipv6_addrs of this PdnConnectivityStatReport.
        :rtype: List[Ipv6Addr]
        """
        return self._ipv6_addrs

    @ipv6_addrs.setter
    def ipv6_addrs(self, ipv6_addrs):
        """Sets the ipv6_addrs of this PdnConnectivityStatReport.


        :param ipv6_addrs: The ipv6_addrs of this PdnConnectivityStatReport.
        :type ipv6_addrs: List[Ipv6Addr]
        """
        if ipv6_addrs is not None and len(ipv6_addrs) < 1:
            raise ValueError("Invalid value for `ipv6_addrs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ipv6_addrs = ipv6_addrs

    @property
    def pdu_sess_type(self):
        """Gets the pdu_sess_type of this PdnConnectivityStatReport.


        :return: The pdu_sess_type of this PdnConnectivityStatReport.
        :rtype: PduSessionType
        """
        return self._pdu_sess_type

    @pdu_sess_type.setter
    def pdu_sess_type(self, pdu_sess_type):
        """Sets the pdu_sess_type of this PdnConnectivityStatReport.


        :param pdu_sess_type: The pdu_sess_type of this PdnConnectivityStatReport.
        :type pdu_sess_type: PduSessionType
        """

        self._pdu_sess_type = pdu_sess_type
