# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.cell_global_id import CellGlobalId
from openapi_server.models.location_area_id import LocationAreaId
from openapi_server.models.routing_area_id import RoutingAreaId
from openapi_server.models.service_area_id import ServiceAreaId
import re
from openapi_server import util

from openapi_server.models.cell_global_id import CellGlobalId  # noqa: E501
from openapi_server.models.location_area_id import LocationAreaId  # noqa: E501
from openapi_server.models.routing_area_id import RoutingAreaId  # noqa: E501
from openapi_server.models.service_area_id import ServiceAreaId  # noqa: E501
import re  # noqa: E501

class UtraLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cgi=None, sai=None, lai=None, rai=None, age_of_location_information=None, ue_location_timestamp=None, geographical_information=None, geodetic_information=None):  # noqa: E501
        """UtraLocation - a model defined in OpenAPI

        :param cgi: The cgi of this UtraLocation.  # noqa: E501
        :type cgi: CellGlobalId
        :param sai: The sai of this UtraLocation.  # noqa: E501
        :type sai: ServiceAreaId
        :param lai: The lai of this UtraLocation.  # noqa: E501
        :type lai: LocationAreaId
        :param rai: The rai of this UtraLocation.  # noqa: E501
        :type rai: RoutingAreaId
        :param age_of_location_information: The age_of_location_information of this UtraLocation.  # noqa: E501
        :type age_of_location_information: int
        :param ue_location_timestamp: The ue_location_timestamp of this UtraLocation.  # noqa: E501
        :type ue_location_timestamp: datetime
        :param geographical_information: The geographical_information of this UtraLocation.  # noqa: E501
        :type geographical_information: str
        :param geodetic_information: The geodetic_information of this UtraLocation.  # noqa: E501
        :type geodetic_information: str
        """
        self.openapi_types = {
            'cgi': CellGlobalId,
            'sai': ServiceAreaId,
            'lai': LocationAreaId,
            'rai': RoutingAreaId,
            'age_of_location_information': int,
            'ue_location_timestamp': datetime,
            'geographical_information': str,
            'geodetic_information': str
        }

        self.attribute_map = {
            'cgi': 'cgi',
            'sai': 'sai',
            'lai': 'lai',
            'rai': 'rai',
            'age_of_location_information': 'ageOfLocationInformation',
            'ue_location_timestamp': 'ueLocationTimestamp',
            'geographical_information': 'geographicalInformation',
            'geodetic_information': 'geodeticInformation'
        }

        self.cgi = cgi
        self.sai = sai
        self.lai = lai
        self.rai = rai
        self.age_of_location_information = age_of_location_information
        self.ue_location_timestamp = ue_location_timestamp
        self.geographical_information = geographical_information
        self.geodetic_information = geodetic_information

    @classmethod
    def from_dict(cls, dikt) -> 'UtraLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UtraLocation of this UtraLocation.  # noqa: E501
        :rtype: UtraLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cgi(self):
        """Gets the cgi of this UtraLocation.


        :return: The cgi of this UtraLocation.
        :rtype: CellGlobalId
        """
        return self._cgi

    @cgi.setter
    def cgi(self, cgi):
        """Sets the cgi of this UtraLocation.


        :param cgi: The cgi of this UtraLocation.
        :type cgi: CellGlobalId
        """

        self._cgi = cgi

    @property
    def sai(self):
        """Gets the sai of this UtraLocation.


        :return: The sai of this UtraLocation.
        :rtype: ServiceAreaId
        """
        return self._sai

    @sai.setter
    def sai(self, sai):
        """Sets the sai of this UtraLocation.


        :param sai: The sai of this UtraLocation.
        :type sai: ServiceAreaId
        """

        self._sai = sai

    @property
    def lai(self):
        """Gets the lai of this UtraLocation.


        :return: The lai of this UtraLocation.
        :rtype: LocationAreaId
        """
        return self._lai

    @lai.setter
    def lai(self, lai):
        """Sets the lai of this UtraLocation.


        :param lai: The lai of this UtraLocation.
        :type lai: LocationAreaId
        """

        self._lai = lai

    @property
    def rai(self):
        """Gets the rai of this UtraLocation.


        :return: The rai of this UtraLocation.
        :rtype: RoutingAreaId
        """
        return self._rai

    @rai.setter
    def rai(self, rai):
        """Sets the rai of this UtraLocation.


        :param rai: The rai of this UtraLocation.
        :type rai: RoutingAreaId
        """

        self._rai = rai

    @property
    def age_of_location_information(self):
        """Gets the age_of_location_information of this UtraLocation.

        The value represents the elapsed time in minutes since the last network contact of the mobile station.  Value \"0\" indicates that the location information was obtained after a successful paging procedure for  Active Location Retrieval when the UE is in idle mode  or after a successful location reporting procedure  the UE is in connected mode. Any other value than \"0\" indicates that the location information is the last known one.  See 3GPP TS 29.002 clause 17.7.8.   # noqa: E501

        :return: The age_of_location_information of this UtraLocation.
        :rtype: int
        """
        return self._age_of_location_information

    @age_of_location_information.setter
    def age_of_location_information(self, age_of_location_information):
        """Sets the age_of_location_information of this UtraLocation.

        The value represents the elapsed time in minutes since the last network contact of the mobile station.  Value \"0\" indicates that the location information was obtained after a successful paging procedure for  Active Location Retrieval when the UE is in idle mode  or after a successful location reporting procedure  the UE is in connected mode. Any other value than \"0\" indicates that the location information is the last known one.  See 3GPP TS 29.002 clause 17.7.8.   # noqa: E501

        :param age_of_location_information: The age_of_location_information of this UtraLocation.
        :type age_of_location_information: int
        """
        if age_of_location_information is not None and age_of_location_information > 32767:  # noqa: E501
            raise ValueError("Invalid value for `age_of_location_information`, must be a value less than or equal to `32767`")  # noqa: E501
        if age_of_location_information is not None and age_of_location_information < 0:  # noqa: E501
            raise ValueError("Invalid value for `age_of_location_information`, must be a value greater than or equal to `0`")  # noqa: E501

        self._age_of_location_information = age_of_location_information

    @property
    def ue_location_timestamp(self):
        """Gets the ue_location_timestamp of this UtraLocation.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The ue_location_timestamp of this UtraLocation.
        :rtype: datetime
        """
        return self._ue_location_timestamp

    @ue_location_timestamp.setter
    def ue_location_timestamp(self, ue_location_timestamp):
        """Sets the ue_location_timestamp of this UtraLocation.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param ue_location_timestamp: The ue_location_timestamp of this UtraLocation.
        :type ue_location_timestamp: datetime
        """

        self._ue_location_timestamp = ue_location_timestamp

    @property
    def geographical_information(self):
        """Gets the geographical_information of this UtraLocation.

        Refer to geographical Information.See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.   # noqa: E501

        :return: The geographical_information of this UtraLocation.
        :rtype: str
        """
        return self._geographical_information

    @geographical_information.setter
    def geographical_information(self, geographical_information):
        """Sets the geographical_information of this UtraLocation.

        Refer to geographical Information.See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.   # noqa: E501

        :param geographical_information: The geographical_information of this UtraLocation.
        :type geographical_information: str
        """
        if geographical_information is not None and not re.search(r'^[0-9A-F]{16}$', geographical_information):  # noqa: E501
            raise ValueError("Invalid value for `geographical_information`, must be a follow pattern or equal to `/^[0-9A-F]{16}$/`")  # noqa: E501

        self._geographical_information = geographical_information

    @property
    def geodetic_information(self):
        """Gets the geodetic_information of this UtraLocation.

        Refers to Calling Geodetic Location. See ITU-TÂ Recommendation Q.763 (1999) clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.   # noqa: E501

        :return: The geodetic_information of this UtraLocation.
        :rtype: str
        """
        return self._geodetic_information

    @geodetic_information.setter
    def geodetic_information(self, geodetic_information):
        """Sets the geodetic_information of this UtraLocation.

        Refers to Calling Geodetic Location. See ITU-TÂ Recommendation Q.763 (1999) clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.   # noqa: E501

        :param geodetic_information: The geodetic_information of this UtraLocation.
        :type geodetic_information: str
        """
        if geodetic_information is not None and not re.search(r'^[0-9A-F]{20}$', geodetic_information):  # noqa: E501
            raise ValueError("Invalid value for `geodetic_information`, must be a follow pattern or equal to `/^[0-9A-F]{20}$/`")  # noqa: E501

        self._geodetic_information = geodetic_information
