# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class FlowInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_id=None, flow_descriptions=None):  # noqa: E501
        """FlowInfo - a model defined in OpenAPI

        :param flow_id: The flow_id of this FlowInfo.  # noqa: E501
        :type flow_id: int
        :param flow_descriptions: The flow_descriptions of this FlowInfo.  # noqa: E501
        :type flow_descriptions: List[str]
        """
        self.openapi_types = {
            'flow_id': int,
            'flow_descriptions': List[str]
        }

        self.attribute_map = {
            'flow_id': 'flowId',
            'flow_descriptions': 'flowDescriptions'
        }

        self.flow_id = flow_id
        self.flow_descriptions = flow_descriptions

    @classmethod
    def from_dict(cls, dikt) -> 'FlowInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FlowInfo of this FlowInfo.  # noqa: E501
        :rtype: FlowInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_id(self):
        """Gets the flow_id of this FlowInfo.

        Indicates the IP flow.  # noqa: E501

        :return: The flow_id of this FlowInfo.
        :rtype: int
        """
        return self._flow_id

    @flow_id.setter
    def flow_id(self, flow_id):
        """Sets the flow_id of this FlowInfo.

        Indicates the IP flow.  # noqa: E501

        :param flow_id: The flow_id of this FlowInfo.
        :type flow_id: int
        """
        if flow_id is None:
            raise ValueError("Invalid value for `flow_id`, must not be `None`")  # noqa: E501

        self._flow_id = flow_id

    @property
    def flow_descriptions(self):
        """Gets the flow_descriptions of this FlowInfo.

        Indicates the packet filters of the IP flow. Refer to clause 5.3.8 of 3GPP TS 29.214 for encoding. It shall contain UL and/or DL IP flow description.  # noqa: E501

        :return: The flow_descriptions of this FlowInfo.
        :rtype: List[str]
        """
        return self._flow_descriptions

    @flow_descriptions.setter
    def flow_descriptions(self, flow_descriptions):
        """Sets the flow_descriptions of this FlowInfo.

        Indicates the packet filters of the IP flow. Refer to clause 5.3.8 of 3GPP TS 29.214 for encoding. It shall contain UL and/or DL IP flow description.  # noqa: E501

        :param flow_descriptions: The flow_descriptions of this FlowInfo.
        :type flow_descriptions: List[str]
        """
        if flow_descriptions is not None and len(flow_descriptions) > 2:
            raise ValueError("Invalid value for `flow_descriptions`, number of items must be less than or equal to `2`")  # noqa: E501
        if flow_descriptions is not None and len(flow_descriptions) < 1:
            raise ValueError("Invalid value for `flow_descriptions`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._flow_descriptions = flow_descriptions
