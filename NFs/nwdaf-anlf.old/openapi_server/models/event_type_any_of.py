# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class EventTypeAnyOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    LOSS_OF_CONNECTIVITY = "LOSS_OF_CONNECTIVITY"
    UE_REACHABILITY_FOR_DATA = "UE_REACHABILITY_FOR_DATA"
    UE_REACHABILITY_FOR_SMS = "UE_REACHABILITY_FOR_SMS"
    LOCATION_REPORTING = "LOCATION_REPORTING"
    CHANGE_OF_SUPI_PEI_ASSOCIATION = "CHANGE_OF_SUPI_PEI_ASSOCIATION"
    ROAMING_STATUS = "ROAMING_STATUS"
    COMMUNICATION_FAILURE = "COMMUNICATION_FAILURE"
    AVAILABILITY_AFTER_DDN_FAILURE = "AVAILABILITY_AFTER_DDN_FAILURE"
    CN_TYPE_CHANGE = "CN_TYPE_CHANGE"
    DL_DATA_DELIVERY_STATUS = "DL_DATA_DELIVERY_STATUS"
    PDN_CONNECTIVITY_STATUS = "PDN_CONNECTIVITY_STATUS"
    UE_CONNECTION_MANAGEMENT_STATE = "UE_CONNECTION_MANAGEMENT_STATE"
    ACCESS_TYPE_REPORT = "ACCESS_TYPE_REPORT"
    REGISTRATION_STATE_REPORT = "REGISTRATION_STATE_REPORT"
    CONNECTIVITY_STATE_REPORT = "CONNECTIVITY_STATE_REPORT"
    TYPE_ALLOCATION_CODE_REPORT = "TYPE_ALLOCATION_CODE_REPORT"
    FREQUENT_MOBILITY_REGISTRATION_REPORT = "FREQUENT_MOBILITY_REGISTRATION_REPORT"
    PDU_SES_REL = "PDU_SES_REL"
    PDU_SES_EST = "PDU_SES_EST"
    UE_MEMORY_AVAILABLE_FOR_SMS = "UE_MEMORY_AVAILABLE_FOR_SMS"
    def __init__(self):  # noqa: E501
        """EventTypeAnyOf - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt) -> 'EventTypeAnyOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventType_anyOf of this EventTypeAnyOf.  # noqa: E501
        :rtype: EventTypeAnyOf
        """
        return util.deserialize_model(dikt, cls)
