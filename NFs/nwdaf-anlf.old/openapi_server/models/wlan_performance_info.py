# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.network_area_info import NetworkAreaInfo
from openapi_server.models.wlan_per_ss_id_performance_info import WlanPerSsIdPerformanceInfo
from openapi_server import util

from openapi_server.models.network_area_info import NetworkAreaInfo  # noqa: E501
from openapi_server.models.wlan_per_ss_id_performance_info import WlanPerSsIdPerformanceInfo  # noqa: E501

class WlanPerformanceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network_area=None, wlan_per_ssid_infos=None):  # noqa: E501
        """WlanPerformanceInfo - a model defined in OpenAPI

        :param network_area: The network_area of this WlanPerformanceInfo.  # noqa: E501
        :type network_area: NetworkAreaInfo
        :param wlan_per_ssid_infos: The wlan_per_ssid_infos of this WlanPerformanceInfo.  # noqa: E501
        :type wlan_per_ssid_infos: List[WlanPerSsIdPerformanceInfo]
        """
        self.openapi_types = {
            'network_area': NetworkAreaInfo,
            'wlan_per_ssid_infos': List[WlanPerSsIdPerformanceInfo]
        }

        self.attribute_map = {
            'network_area': 'networkArea',
            'wlan_per_ssid_infos': 'wlanPerSsidInfos'
        }

        self.network_area = network_area
        self.wlan_per_ssid_infos = wlan_per_ssid_infos

    @classmethod
    def from_dict(cls, dikt) -> 'WlanPerformanceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WlanPerformanceInfo of this WlanPerformanceInfo.  # noqa: E501
        :rtype: WlanPerformanceInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_area(self):
        """Gets the network_area of this WlanPerformanceInfo.


        :return: The network_area of this WlanPerformanceInfo.
        :rtype: NetworkAreaInfo
        """
        return self._network_area

    @network_area.setter
    def network_area(self, network_area):
        """Sets the network_area of this WlanPerformanceInfo.


        :param network_area: The network_area of this WlanPerformanceInfo.
        :type network_area: NetworkAreaInfo
        """

        self._network_area = network_area

    @property
    def wlan_per_ssid_infos(self):
        """Gets the wlan_per_ssid_infos of this WlanPerformanceInfo.


        :return: The wlan_per_ssid_infos of this WlanPerformanceInfo.
        :rtype: List[WlanPerSsIdPerformanceInfo]
        """
        return self._wlan_per_ssid_infos

    @wlan_per_ssid_infos.setter
    def wlan_per_ssid_infos(self, wlan_per_ssid_infos):
        """Sets the wlan_per_ssid_infos of this WlanPerformanceInfo.


        :param wlan_per_ssid_infos: The wlan_per_ssid_infos of this WlanPerformanceInfo.
        :type wlan_per_ssid_infos: List[WlanPerSsIdPerformanceInfo]
        """
        if wlan_per_ssid_infos is None:
            raise ValueError("Invalid value for `wlan_per_ssid_infos`, must not be `None`")  # noqa: E501
        if wlan_per_ssid_infos is not None and len(wlan_per_ssid_infos) < 1:
            raise ValueError("Invalid value for `wlan_per_ssid_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._wlan_per_ssid_infos = wlan_per_ssid_infos
