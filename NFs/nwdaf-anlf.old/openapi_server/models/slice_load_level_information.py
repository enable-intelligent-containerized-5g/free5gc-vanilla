# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.snssai import Snssai
from openapi_server import util

from openapi_server.models.snssai import Snssai  # noqa: E501

class SliceLoadLevelInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, load_level_information=None, snssais=None):  # noqa: E501
        """SliceLoadLevelInformation - a model defined in OpenAPI

        :param load_level_information: The load_level_information of this SliceLoadLevelInformation.  # noqa: E501
        :type load_level_information: int
        :param snssais: The snssais of this SliceLoadLevelInformation.  # noqa: E501
        :type snssais: List[Snssai]
        """
        self.openapi_types = {
            'load_level_information': int,
            'snssais': List[Snssai]
        }

        self.attribute_map = {
            'load_level_information': 'loadLevelInformation',
            'snssais': 'snssais'
        }

        self.load_level_information = load_level_information
        self.snssais = snssais

    @classmethod
    def from_dict(cls, dikt) -> 'SliceLoadLevelInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SliceLoadLevelInformation of this SliceLoadLevelInformation.  # noqa: E501
        :rtype: SliceLoadLevelInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def load_level_information(self):
        """Gets the load_level_information of this SliceLoadLevelInformation.

        Load level information of the network slice and the optionally associated network slice  instance.   # noqa: E501

        :return: The load_level_information of this SliceLoadLevelInformation.
        :rtype: int
        """
        return self._load_level_information

    @load_level_information.setter
    def load_level_information(self, load_level_information):
        """Sets the load_level_information of this SliceLoadLevelInformation.

        Load level information of the network slice and the optionally associated network slice  instance.   # noqa: E501

        :param load_level_information: The load_level_information of this SliceLoadLevelInformation.
        :type load_level_information: int
        """
        if load_level_information is None:
            raise ValueError("Invalid value for `load_level_information`, must not be `None`")  # noqa: E501

        self._load_level_information = load_level_information

    @property
    def snssais(self):
        """Gets the snssais of this SliceLoadLevelInformation.

        Identification(s) of network slice to which the subscription applies.  # noqa: E501

        :return: The snssais of this SliceLoadLevelInformation.
        :rtype: List[Snssai]
        """
        return self._snssais

    @snssais.setter
    def snssais(self, snssais):
        """Sets the snssais of this SliceLoadLevelInformation.

        Identification(s) of network slice to which the subscription applies.  # noqa: E501

        :param snssais: The snssais of this SliceLoadLevelInformation.
        :type snssais: List[Snssai]
        """
        if snssais is None:
            raise ValueError("Invalid value for `snssais`, must not be `None`")  # noqa: E501
        if snssais is not None and len(snssais) < 1:
            raise ValueError("Invalid value for `snssais`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._snssais = snssais
