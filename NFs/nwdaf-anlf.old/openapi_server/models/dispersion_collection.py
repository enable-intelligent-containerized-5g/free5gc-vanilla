# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.application_volume import ApplicationVolume
from openapi_server.models.dispersion_class import DispersionClass
from openapi_server.models.snssai import Snssai
from openapi_server.models.user_location import UserLocation
from openapi_server import util

from openapi_server.models.application_volume import ApplicationVolume  # noqa: E501
from openapi_server.models.dispersion_class import DispersionClass  # noqa: E501
from openapi_server.models.snssai import Snssai  # noqa: E501
from openapi_server.models.user_location import UserLocation  # noqa: E501

class DispersionCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ue_loc=None, snssai=None, supis=None, gpsis=None, app_volumes=None, disper_amount=None, disper_class=None, usage_rank=None, percentile_rank=None, ue_ratio=None, confidence=None):  # noqa: E501
        """DispersionCollection - a model defined in OpenAPI

        :param ue_loc: The ue_loc of this DispersionCollection.  # noqa: E501
        :type ue_loc: UserLocation
        :param snssai: The snssai of this DispersionCollection.  # noqa: E501
        :type snssai: Snssai
        :param supis: The supis of this DispersionCollection.  # noqa: E501
        :type supis: List[str]
        :param gpsis: The gpsis of this DispersionCollection.  # noqa: E501
        :type gpsis: List[str]
        :param app_volumes: The app_volumes of this DispersionCollection.  # noqa: E501
        :type app_volumes: List[ApplicationVolume]
        :param disper_amount: The disper_amount of this DispersionCollection.  # noqa: E501
        :type disper_amount: int
        :param disper_class: The disper_class of this DispersionCollection.  # noqa: E501
        :type disper_class: DispersionClass
        :param usage_rank: The usage_rank of this DispersionCollection.  # noqa: E501
        :type usage_rank: int
        :param percentile_rank: The percentile_rank of this DispersionCollection.  # noqa: E501
        :type percentile_rank: int
        :param ue_ratio: The ue_ratio of this DispersionCollection.  # noqa: E501
        :type ue_ratio: int
        :param confidence: The confidence of this DispersionCollection.  # noqa: E501
        :type confidence: int
        """
        self.openapi_types = {
            'ue_loc': UserLocation,
            'snssai': Snssai,
            'supis': List[str],
            'gpsis': List[str],
            'app_volumes': List[ApplicationVolume],
            'disper_amount': int,
            'disper_class': DispersionClass,
            'usage_rank': int,
            'percentile_rank': int,
            'ue_ratio': int,
            'confidence': int
        }

        self.attribute_map = {
            'ue_loc': 'ueLoc',
            'snssai': 'snssai',
            'supis': 'supis',
            'gpsis': 'gpsis',
            'app_volumes': 'appVolumes',
            'disper_amount': 'disperAmount',
            'disper_class': 'disperClass',
            'usage_rank': 'usageRank',
            'percentile_rank': 'percentileRank',
            'ue_ratio': 'ueRatio',
            'confidence': 'confidence'
        }

        self.ue_loc = ue_loc
        self.snssai = snssai
        self.supis = supis
        self.gpsis = gpsis
        self.app_volumes = app_volumes
        self.disper_amount = disper_amount
        self.disper_class = disper_class
        self.usage_rank = usage_rank
        self.percentile_rank = percentile_rank
        self.ue_ratio = ue_ratio
        self.confidence = confidence

    @classmethod
    def from_dict(cls, dikt) -> 'DispersionCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DispersionCollection of this DispersionCollection.  # noqa: E501
        :rtype: DispersionCollection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ue_loc(self):
        """Gets the ue_loc of this DispersionCollection.


        :return: The ue_loc of this DispersionCollection.
        :rtype: UserLocation
        """
        return self._ue_loc

    @ue_loc.setter
    def ue_loc(self, ue_loc):
        """Sets the ue_loc of this DispersionCollection.


        :param ue_loc: The ue_loc of this DispersionCollection.
        :type ue_loc: UserLocation
        """

        self._ue_loc = ue_loc

    @property
    def snssai(self):
        """Gets the snssai of this DispersionCollection.


        :return: The snssai of this DispersionCollection.
        :rtype: Snssai
        """
        return self._snssai

    @snssai.setter
    def snssai(self, snssai):
        """Sets the snssai of this DispersionCollection.


        :param snssai: The snssai of this DispersionCollection.
        :type snssai: Snssai
        """

        self._snssai = snssai

    @property
    def supis(self):
        """Gets the supis of this DispersionCollection.


        :return: The supis of this DispersionCollection.
        :rtype: List[str]
        """
        return self._supis

    @supis.setter
    def supis(self, supis):
        """Sets the supis of this DispersionCollection.


        :param supis: The supis of this DispersionCollection.
        :type supis: List[str]
        """
        if supis is not None and len(supis) < 1:
            raise ValueError("Invalid value for `supis`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supis = supis

    @property
    def gpsis(self):
        """Gets the gpsis of this DispersionCollection.


        :return: The gpsis of this DispersionCollection.
        :rtype: List[str]
        """
        return self._gpsis

    @gpsis.setter
    def gpsis(self, gpsis):
        """Sets the gpsis of this DispersionCollection.


        :param gpsis: The gpsis of this DispersionCollection.
        :type gpsis: List[str]
        """
        if gpsis is not None and len(gpsis) < 1:
            raise ValueError("Invalid value for `gpsis`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._gpsis = gpsis

    @property
    def app_volumes(self):
        """Gets the app_volumes of this DispersionCollection.


        :return: The app_volumes of this DispersionCollection.
        :rtype: List[ApplicationVolume]
        """
        return self._app_volumes

    @app_volumes.setter
    def app_volumes(self, app_volumes):
        """Sets the app_volumes of this DispersionCollection.


        :param app_volumes: The app_volumes of this DispersionCollection.
        :type app_volumes: List[ApplicationVolume]
        """
        if app_volumes is not None and len(app_volumes) < 1:
            raise ValueError("Invalid value for `app_volumes`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._app_volumes = app_volumes

    @property
    def disper_amount(self):
        """Gets the disper_amount of this DispersionCollection.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The disper_amount of this DispersionCollection.
        :rtype: int
        """
        return self._disper_amount

    @disper_amount.setter
    def disper_amount(self, disper_amount):
        """Sets the disper_amount of this DispersionCollection.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param disper_amount: The disper_amount of this DispersionCollection.
        :type disper_amount: int
        """
        if disper_amount is not None and disper_amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `disper_amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._disper_amount = disper_amount

    @property
    def disper_class(self):
        """Gets the disper_class of this DispersionCollection.


        :return: The disper_class of this DispersionCollection.
        :rtype: DispersionClass
        """
        return self._disper_class

    @disper_class.setter
    def disper_class(self, disper_class):
        """Sets the disper_class of this DispersionCollection.


        :param disper_class: The disper_class of this DispersionCollection.
        :type disper_class: DispersionClass
        """

        self._disper_class = disper_class

    @property
    def usage_rank(self):
        """Gets the usage_rank of this DispersionCollection.

        Integer where the allowed values correspond to 1, 2, 3 only.  # noqa: E501

        :return: The usage_rank of this DispersionCollection.
        :rtype: int
        """
        return self._usage_rank

    @usage_rank.setter
    def usage_rank(self, usage_rank):
        """Sets the usage_rank of this DispersionCollection.

        Integer where the allowed values correspond to 1, 2, 3 only.  # noqa: E501

        :param usage_rank: The usage_rank of this DispersionCollection.
        :type usage_rank: int
        """
        if usage_rank is not None and usage_rank > 3:  # noqa: E501
            raise ValueError("Invalid value for `usage_rank`, must be a value less than or equal to `3`")  # noqa: E501
        if usage_rank is not None and usage_rank < 1:  # noqa: E501
            raise ValueError("Invalid value for `usage_rank`, must be a value greater than or equal to `1`")  # noqa: E501

        self._usage_rank = usage_rank

    @property
    def percentile_rank(self):
        """Gets the percentile_rank of this DispersionCollection.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :return: The percentile_rank of this DispersionCollection.
        :rtype: int
        """
        return self._percentile_rank

    @percentile_rank.setter
    def percentile_rank(self, percentile_rank):
        """Sets the percentile_rank of this DispersionCollection.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :param percentile_rank: The percentile_rank of this DispersionCollection.
        :type percentile_rank: int
        """
        if percentile_rank is not None and percentile_rank > 100:  # noqa: E501
            raise ValueError("Invalid value for `percentile_rank`, must be a value less than or equal to `100`")  # noqa: E501
        if percentile_rank is not None and percentile_rank < 1:  # noqa: E501
            raise ValueError("Invalid value for `percentile_rank`, must be a value greater than or equal to `1`")  # noqa: E501

        self._percentile_rank = percentile_rank

    @property
    def ue_ratio(self):
        """Gets the ue_ratio of this DispersionCollection.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :return: The ue_ratio of this DispersionCollection.
        :rtype: int
        """
        return self._ue_ratio

    @ue_ratio.setter
    def ue_ratio(self, ue_ratio):
        """Sets the ue_ratio of this DispersionCollection.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :param ue_ratio: The ue_ratio of this DispersionCollection.
        :type ue_ratio: int
        """
        if ue_ratio is not None and ue_ratio > 100:  # noqa: E501
            raise ValueError("Invalid value for `ue_ratio`, must be a value less than or equal to `100`")  # noqa: E501
        if ue_ratio is not None and ue_ratio < 1:  # noqa: E501
            raise ValueError("Invalid value for `ue_ratio`, must be a value greater than or equal to `1`")  # noqa: E501

        self._ue_ratio = ue_ratio

    @property
    def confidence(self):
        """Gets the confidence of this DispersionCollection.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The confidence of this DispersionCollection.
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this DispersionCollection.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param confidence: The confidence of this DispersionCollection.
        :type confidence: int
        """
        if confidence is not None and confidence < 0:  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")  # noqa: E501

        self._confidence = confidence
