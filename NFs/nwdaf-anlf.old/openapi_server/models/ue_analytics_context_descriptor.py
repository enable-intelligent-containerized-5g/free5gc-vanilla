# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.nwdaf_event import NwdafEvent
import re
from openapi_server import util

from openapi_server.models.nwdaf_event import NwdafEvent  # noqa: E501
import re  # noqa: E501

class UeAnalyticsContextDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, supi=None, ana_types=None):  # noqa: E501
        """UeAnalyticsContextDescriptor - a model defined in OpenAPI

        :param supi: The supi of this UeAnalyticsContextDescriptor.  # noqa: E501
        :type supi: str
        :param ana_types: The ana_types of this UeAnalyticsContextDescriptor.  # noqa: E501
        :type ana_types: List[NwdafEvent]
        """
        self.openapi_types = {
            'supi': str,
            'ana_types': List[NwdafEvent]
        }

        self.attribute_map = {
            'supi': 'supi',
            'ana_types': 'anaTypes'
        }

        self.supi = supi
        self.ana_types = ana_types

    @classmethod
    def from_dict(cls, dikt) -> 'UeAnalyticsContextDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UeAnalyticsContextDescriptor of this UeAnalyticsContextDescriptor.  # noqa: E501
        :rtype: UeAnalyticsContextDescriptor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def supi(self):
        """Gets the supi of this UeAnalyticsContextDescriptor.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :return: The supi of this UeAnalyticsContextDescriptor.
        :rtype: str
        """
        return self._supi

    @supi.setter
    def supi(self, supi):
        """Sets the supi of this UeAnalyticsContextDescriptor.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :param supi: The supi of this UeAnalyticsContextDescriptor.
        :type supi: str
        """
        if supi is None:
            raise ValueError("Invalid value for `supi`, must not be `None`")  # noqa: E501
        if supi is not None and not re.search(r'^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$', supi):  # noqa: E501
            raise ValueError("Invalid value for `supi`, must be a follow pattern or equal to `/^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$/`")  # noqa: E501

        self._supi = supi

    @property
    def ana_types(self):
        """Gets the ana_types of this UeAnalyticsContextDescriptor.

        List of analytics types for which UE related analytics contexts can be retrieved.   # noqa: E501

        :return: The ana_types of this UeAnalyticsContextDescriptor.
        :rtype: List[NwdafEvent]
        """
        return self._ana_types

    @ana_types.setter
    def ana_types(self, ana_types):
        """Sets the ana_types of this UeAnalyticsContextDescriptor.

        List of analytics types for which UE related analytics contexts can be retrieved.   # noqa: E501

        :param ana_types: The ana_types of this UeAnalyticsContextDescriptor.
        :type ana_types: List[NwdafEvent]
        """
        if ana_types is None:
            raise ValueError("Invalid value for `ana_types`, must not be `None`")  # noqa: E501
        if ana_types is not None and len(ana_types) < 1:
            raise ValueError("Invalid value for `ana_types`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ana_types = ana_types
