# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.exception_id import ExceptionId
from openapi_server.models.exception_trend import ExceptionTrend
from openapi_server import util

from openapi_server.models.exception_id import ExceptionId  # noqa: E501
from openapi_server.models.exception_trend import ExceptionTrend  # noqa: E501

class Exception(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, excep_id=None, excep_level=None, excep_trend=None):  # noqa: E501
        """Exception - a model defined in OpenAPI

        :param excep_id: The excep_id of this Exception.  # noqa: E501
        :type excep_id: ExceptionId
        :param excep_level: The excep_level of this Exception.  # noqa: E501
        :type excep_level: int
        :param excep_trend: The excep_trend of this Exception.  # noqa: E501
        :type excep_trend: ExceptionTrend
        """
        self.openapi_types = {
            'excep_id': ExceptionId,
            'excep_level': int,
            'excep_trend': ExceptionTrend
        }

        self.attribute_map = {
            'excep_id': 'excepId',
            'excep_level': 'excepLevel',
            'excep_trend': 'excepTrend'
        }

        self.excep_id = excep_id
        self.excep_level = excep_level
        self.excep_trend = excep_trend

    @classmethod
    def from_dict(cls, dikt) -> 'Exception':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Exception of this Exception.  # noqa: E501
        :rtype: Exception
        """
        return util.deserialize_model(dikt, cls)

    @property
    def excep_id(self):
        """Gets the excep_id of this Exception.


        :return: The excep_id of this Exception.
        :rtype: ExceptionId
        """
        return self._excep_id

    @excep_id.setter
    def excep_id(self, excep_id):
        """Sets the excep_id of this Exception.


        :param excep_id: The excep_id of this Exception.
        :type excep_id: ExceptionId
        """
        if excep_id is None:
            raise ValueError("Invalid value for `excep_id`, must not be `None`")  # noqa: E501

        self._excep_id = excep_id

    @property
    def excep_level(self):
        """Gets the excep_level of this Exception.


        :return: The excep_level of this Exception.
        :rtype: int
        """
        return self._excep_level

    @excep_level.setter
    def excep_level(self, excep_level):
        """Sets the excep_level of this Exception.


        :param excep_level: The excep_level of this Exception.
        :type excep_level: int
        """

        self._excep_level = excep_level

    @property
    def excep_trend(self):
        """Gets the excep_trend of this Exception.


        :return: The excep_trend of this Exception.
        :rtype: ExceptionTrend
        """
        return self._excep_trend

    @excep_trend.setter
    def excep_trend(self, excep_trend):
        """Sets the excep_trend of this Exception.


        :param excep_trend: The excep_trend of this Exception.
        :type excep_trend: ExceptionTrend
        """

        self._excep_trend = excep_trend
