# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.sd_range import SdRange
from openapi_server import util

from openapi_server.models.sd_range import SdRange  # noqa: E501

class SnssaiExtension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sd_ranges=None, wildcard_sd=None):  # noqa: E501
        """SnssaiExtension - a model defined in OpenAPI

        :param sd_ranges: The sd_ranges of this SnssaiExtension.  # noqa: E501
        :type sd_ranges: List[SdRange]
        :param wildcard_sd: The wildcard_sd of this SnssaiExtension.  # noqa: E501
        :type wildcard_sd: bool
        """
        self.openapi_types = {
            'sd_ranges': List[SdRange],
            'wildcard_sd': bool
        }

        self.attribute_map = {
            'sd_ranges': 'sdRanges',
            'wildcard_sd': 'wildcardSd'
        }

        self.sd_ranges = sd_ranges
        self.wildcard_sd = wildcard_sd

    @classmethod
    def from_dict(cls, dikt) -> 'SnssaiExtension':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SnssaiExtension of this SnssaiExtension.  # noqa: E501
        :rtype: SnssaiExtension
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sd_ranges(self):
        """Gets the sd_ranges of this SnssaiExtension.

        When present, it shall contain the range(s) of Slice Differentiator values supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type   # noqa: E501

        :return: The sd_ranges of this SnssaiExtension.
        :rtype: List[SdRange]
        """
        return self._sd_ranges

    @sd_ranges.setter
    def sd_ranges(self, sd_ranges):
        """Sets the sd_ranges of this SnssaiExtension.

        When present, it shall contain the range(s) of Slice Differentiator values supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type   # noqa: E501

        :param sd_ranges: The sd_ranges of this SnssaiExtension.
        :type sd_ranges: List[SdRange]
        """
        if sd_ranges is not None and len(sd_ranges) < 1:
            raise ValueError("Invalid value for `sd_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._sd_ranges = sd_ranges

    @property
    def wildcard_sd(self):
        """Gets the wildcard_sd of this SnssaiExtension.

        When present, it shall be set to true, to indicate that all SD values are supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type.   # noqa: E501

        :return: The wildcard_sd of this SnssaiExtension.
        :rtype: bool
        """
        return self._wildcard_sd

    @wildcard_sd.setter
    def wildcard_sd(self, wildcard_sd):
        """Sets the wildcard_sd of this SnssaiExtension.

        When present, it shall be set to true, to indicate that all SD values are supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type.   # noqa: E501

        :param wildcard_sd: The wildcard_sd of this SnssaiExtension.
        :type wildcard_sd: bool
        """
        allowed_values = [true]  # noqa: E501
        if wildcard_sd not in allowed_values:
            raise ValueError(
                "Invalid value for `wildcard_sd` ({0}), must be one of {1}"
                .format(wildcard_sd, allowed_values)
            )

        self._wildcard_sd = wildcard_sd
