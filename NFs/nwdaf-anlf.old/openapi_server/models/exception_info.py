# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.eth_flow_description import EthFlowDescription
from openapi_server.models.exception import Exception
from openapi_server.models.flow_info import FlowInfo
from openapi_server import util

from openapi_server.models.eth_flow_description import EthFlowDescription  # noqa: E501
from openapi_server.models.exception import Exception  # noqa: E501
from openapi_server.models.flow_info import FlowInfo  # noqa: E501

class ExceptionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_traffic_filter=None, eth_traffic_filter=None, exceps=None):  # noqa: E501
        """ExceptionInfo - a model defined in OpenAPI

        :param ip_traffic_filter: The ip_traffic_filter of this ExceptionInfo.  # noqa: E501
        :type ip_traffic_filter: FlowInfo
        :param eth_traffic_filter: The eth_traffic_filter of this ExceptionInfo.  # noqa: E501
        :type eth_traffic_filter: EthFlowDescription
        :param exceps: The exceps of this ExceptionInfo.  # noqa: E501
        :type exceps: List[Exception]
        """
        self.openapi_types = {
            'ip_traffic_filter': FlowInfo,
            'eth_traffic_filter': EthFlowDescription,
            'exceps': List[Exception]
        }

        self.attribute_map = {
            'ip_traffic_filter': 'ipTrafficFilter',
            'eth_traffic_filter': 'ethTrafficFilter',
            'exceps': 'exceps'
        }

        self.ip_traffic_filter = ip_traffic_filter
        self.eth_traffic_filter = eth_traffic_filter
        self.exceps = exceps

    @classmethod
    def from_dict(cls, dikt) -> 'ExceptionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExceptionInfo of this ExceptionInfo.  # noqa: E501
        :rtype: ExceptionInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_traffic_filter(self):
        """Gets the ip_traffic_filter of this ExceptionInfo.


        :return: The ip_traffic_filter of this ExceptionInfo.
        :rtype: FlowInfo
        """
        return self._ip_traffic_filter

    @ip_traffic_filter.setter
    def ip_traffic_filter(self, ip_traffic_filter):
        """Sets the ip_traffic_filter of this ExceptionInfo.


        :param ip_traffic_filter: The ip_traffic_filter of this ExceptionInfo.
        :type ip_traffic_filter: FlowInfo
        """

        self._ip_traffic_filter = ip_traffic_filter

    @property
    def eth_traffic_filter(self):
        """Gets the eth_traffic_filter of this ExceptionInfo.


        :return: The eth_traffic_filter of this ExceptionInfo.
        :rtype: EthFlowDescription
        """
        return self._eth_traffic_filter

    @eth_traffic_filter.setter
    def eth_traffic_filter(self, eth_traffic_filter):
        """Sets the eth_traffic_filter of this ExceptionInfo.


        :param eth_traffic_filter: The eth_traffic_filter of this ExceptionInfo.
        :type eth_traffic_filter: EthFlowDescription
        """

        self._eth_traffic_filter = eth_traffic_filter

    @property
    def exceps(self):
        """Gets the exceps of this ExceptionInfo.


        :return: The exceps of this ExceptionInfo.
        :rtype: List[Exception]
        """
        return self._exceps

    @exceps.setter
    def exceps(self, exceps):
        """Sets the exceps of this ExceptionInfo.


        :param exceps: The exceps of this ExceptionInfo.
        :type exceps: List[Exception]
        """
        if exceps is None:
            raise ValueError("Invalid value for `exceps`, must not be `None`")  # noqa: E501
        if exceps is not None and len(exceps) < 1:
            raise ValueError("Invalid value for `exceps`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._exceps = exceps
