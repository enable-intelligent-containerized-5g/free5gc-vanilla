# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.data_notification import DataNotification
from openapi_server.models.specific_data_subscription import SpecificDataSubscription
from openapi_server import util

from openapi_server.models.data_notification import DataNotification  # noqa: E501
from openapi_server.models.specific_data_subscription import SpecificDataSubscription  # noqa: E501

class HistoricalData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_time=None, end_time=None, subs_with_sources=None, data=None):  # noqa: E501
        """HistoricalData - a model defined in OpenAPI

        :param start_time: The start_time of this HistoricalData.  # noqa: E501
        :type start_time: datetime
        :param end_time: The end_time of this HistoricalData.  # noqa: E501
        :type end_time: datetime
        :param subs_with_sources: The subs_with_sources of this HistoricalData.  # noqa: E501
        :type subs_with_sources: List[SpecificDataSubscription]
        :param data: The data of this HistoricalData.  # noqa: E501
        :type data: List[DataNotification]
        """
        self.openapi_types = {
            'start_time': datetime,
            'end_time': datetime,
            'subs_with_sources': List[SpecificDataSubscription],
            'data': List[DataNotification]
        }

        self.attribute_map = {
            'start_time': 'startTime',
            'end_time': 'endTime',
            'subs_with_sources': 'subsWithSources',
            'data': 'data'
        }

        self.start_time = start_time
        self.end_time = end_time
        self.subs_with_sources = subs_with_sources
        self.data = data

    @classmethod
    def from_dict(cls, dikt) -> 'HistoricalData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HistoricalData of this HistoricalData.  # noqa: E501
        :rtype: HistoricalData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_time(self):
        """Gets the start_time of this HistoricalData.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The start_time of this HistoricalData.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this HistoricalData.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param start_time: The start_time of this HistoricalData.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this HistoricalData.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The end_time of this HistoricalData.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this HistoricalData.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param end_time: The end_time of this HistoricalData.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def subs_with_sources(self):
        """Gets the subs_with_sources of this HistoricalData.

        Information about subscriptions with the data sources.  # noqa: E501

        :return: The subs_with_sources of this HistoricalData.
        :rtype: List[SpecificDataSubscription]
        """
        return self._subs_with_sources

    @subs_with_sources.setter
    def subs_with_sources(self, subs_with_sources):
        """Sets the subs_with_sources of this HistoricalData.

        Information about subscriptions with the data sources.  # noqa: E501

        :param subs_with_sources: The subs_with_sources of this HistoricalData.
        :type subs_with_sources: List[SpecificDataSubscription]
        """
        if subs_with_sources is not None and len(subs_with_sources) < 1:
            raise ValueError("Invalid value for `subs_with_sources`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._subs_with_sources = subs_with_sources

    @property
    def data(self):
        """Gets the data of this HistoricalData.

        Historical data related to the analytics.  # noqa: E501

        :return: The data of this HistoricalData.
        :rtype: List[DataNotification]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this HistoricalData.

        Historical data related to the analytics.  # noqa: E501

        :param data: The data of this HistoricalData.
        :type data: List[DataNotification]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501
        if data is not None and len(data) < 1:
            raise ValueError("Invalid value for `data`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._data = data
