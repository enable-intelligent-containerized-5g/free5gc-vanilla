# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.snssai import Snssai
from openapi_server.models.transaction_metric import TransactionMetric
from openapi_server import util

from openapi_server.models.snssai import Snssai  # noqa: E501
from openapi_server.models.transaction_metric import TransactionMetric  # noqa: E501

class TransactionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction=None, snssai=None, app_ids=None, transac_metrics=None):  # noqa: E501
        """TransactionInfo - a model defined in OpenAPI

        :param transaction: The transaction of this TransactionInfo.  # noqa: E501
        :type transaction: int
        :param snssai: The snssai of this TransactionInfo.  # noqa: E501
        :type snssai: Snssai
        :param app_ids: The app_ids of this TransactionInfo.  # noqa: E501
        :type app_ids: List[str]
        :param transac_metrics: The transac_metrics of this TransactionInfo.  # noqa: E501
        :type transac_metrics: List[TransactionMetric]
        """
        self.openapi_types = {
            'transaction': int,
            'snssai': Snssai,
            'app_ids': List[str],
            'transac_metrics': List[TransactionMetric]
        }

        self.attribute_map = {
            'transaction': 'transaction',
            'snssai': 'snssai',
            'app_ids': 'appIds',
            'transac_metrics': 'transacMetrics'
        }

        self.transaction = transaction
        self.snssai = snssai
        self.app_ids = app_ids
        self.transac_metrics = transac_metrics

    @classmethod
    def from_dict(cls, dikt) -> 'TransactionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TransactionInfo of this TransactionInfo.  # noqa: E501
        :rtype: TransactionInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction(self):
        """Gets the transaction of this TransactionInfo.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The transaction of this TransactionInfo.
        :rtype: int
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this TransactionInfo.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param transaction: The transaction of this TransactionInfo.
        :type transaction: int
        """
        if transaction is None:
            raise ValueError("Invalid value for `transaction`, must not be `None`")  # noqa: E501
        if transaction is not None and transaction < 0:  # noqa: E501
            raise ValueError("Invalid value for `transaction`, must be a value greater than or equal to `0`")  # noqa: E501

        self._transaction = transaction

    @property
    def snssai(self):
        """Gets the snssai of this TransactionInfo.


        :return: The snssai of this TransactionInfo.
        :rtype: Snssai
        """
        return self._snssai

    @snssai.setter
    def snssai(self, snssai):
        """Sets the snssai of this TransactionInfo.


        :param snssai: The snssai of this TransactionInfo.
        :type snssai: Snssai
        """

        self._snssai = snssai

    @property
    def app_ids(self):
        """Gets the app_ids of this TransactionInfo.


        :return: The app_ids of this TransactionInfo.
        :rtype: List[str]
        """
        return self._app_ids

    @app_ids.setter
    def app_ids(self, app_ids):
        """Sets the app_ids of this TransactionInfo.


        :param app_ids: The app_ids of this TransactionInfo.
        :type app_ids: List[str]
        """
        if app_ids is not None and len(app_ids) < 1:
            raise ValueError("Invalid value for `app_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._app_ids = app_ids

    @property
    def transac_metrics(self):
        """Gets the transac_metrics of this TransactionInfo.


        :return: The transac_metrics of this TransactionInfo.
        :rtype: List[TransactionMetric]
        """
        return self._transac_metrics

    @transac_metrics.setter
    def transac_metrics(self, transac_metrics):
        """Sets the transac_metrics of this TransactionInfo.


        :param transac_metrics: The transac_metrics of this TransactionInfo.
        :type transac_metrics: List[TransactionMetric]
        """
        if transac_metrics is not None and len(transac_metrics) < 1:
            raise ValueError("Invalid value for `transac_metrics`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._transac_metrics = transac_metrics
