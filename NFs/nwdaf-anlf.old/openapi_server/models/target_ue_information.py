# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class TargetUeInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, any_ue=None, supis=None, gpsis=None, int_group_ids=None):  # noqa: E501
        """TargetUeInformation - a model defined in OpenAPI

        :param any_ue: The any_ue of this TargetUeInformation.  # noqa: E501
        :type any_ue: bool
        :param supis: The supis of this TargetUeInformation.  # noqa: E501
        :type supis: List[str]
        :param gpsis: The gpsis of this TargetUeInformation.  # noqa: E501
        :type gpsis: List[str]
        :param int_group_ids: The int_group_ids of this TargetUeInformation.  # noqa: E501
        :type int_group_ids: List[str]
        """
        self.openapi_types = {
            'any_ue': bool,
            'supis': List[str],
            'gpsis': List[str],
            'int_group_ids': List[str]
        }

        self.attribute_map = {
            'any_ue': 'anyUe',
            'supis': 'supis',
            'gpsis': 'gpsis',
            'int_group_ids': 'intGroupIds'
        }

        self.any_ue = any_ue
        self.supis = supis
        self.gpsis = gpsis
        self.int_group_ids = int_group_ids

    @classmethod
    def from_dict(cls, dikt) -> 'TargetUeInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TargetUeInformation of this TargetUeInformation.  # noqa: E501
        :rtype: TargetUeInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def any_ue(self):
        """Gets the any_ue of this TargetUeInformation.


        :return: The any_ue of this TargetUeInformation.
        :rtype: bool
        """
        return self._any_ue

    @any_ue.setter
    def any_ue(self, any_ue):
        """Sets the any_ue of this TargetUeInformation.


        :param any_ue: The any_ue of this TargetUeInformation.
        :type any_ue: bool
        """

        self._any_ue = any_ue

    @property
    def supis(self):
        """Gets the supis of this TargetUeInformation.


        :return: The supis of this TargetUeInformation.
        :rtype: List[str]
        """
        return self._supis

    @supis.setter
    def supis(self, supis):
        """Sets the supis of this TargetUeInformation.


        :param supis: The supis of this TargetUeInformation.
        :type supis: List[str]
        """
        if supis is not None and len(supis) < 1:
            raise ValueError("Invalid value for `supis`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supis = supis

    @property
    def gpsis(self):
        """Gets the gpsis of this TargetUeInformation.


        :return: The gpsis of this TargetUeInformation.
        :rtype: List[str]
        """
        return self._gpsis

    @gpsis.setter
    def gpsis(self, gpsis):
        """Sets the gpsis of this TargetUeInformation.


        :param gpsis: The gpsis of this TargetUeInformation.
        :type gpsis: List[str]
        """
        if gpsis is not None and len(gpsis) < 1:
            raise ValueError("Invalid value for `gpsis`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._gpsis = gpsis

    @property
    def int_group_ids(self):
        """Gets the int_group_ids of this TargetUeInformation.


        :return: The int_group_ids of this TargetUeInformation.
        :rtype: List[str]
        """
        return self._int_group_ids

    @int_group_ids.setter
    def int_group_ids(self, int_group_ids):
        """Sets the int_group_ids of this TargetUeInformation.


        :param int_group_ids: The int_group_ids of this TargetUeInformation.
        :type int_group_ids: List[str]
        """
        if int_group_ids is not None and len(int_group_ids) < 1:
            raise ValueError("Invalid value for `int_group_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._int_group_ids = int_group_ids
