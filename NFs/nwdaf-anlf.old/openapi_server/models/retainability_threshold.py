# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.time_unit import TimeUnit
from openapi_server import util

from openapi_server.models.time_unit import TimeUnit  # noqa: E501

class RetainabilityThreshold(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rel_flow_num=None, rel_time_unit=None, rel_flow_ratio=None):  # noqa: E501
        """RetainabilityThreshold - a model defined in OpenAPI

        :param rel_flow_num: The rel_flow_num of this RetainabilityThreshold.  # noqa: E501
        :type rel_flow_num: int
        :param rel_time_unit: The rel_time_unit of this RetainabilityThreshold.  # noqa: E501
        :type rel_time_unit: TimeUnit
        :param rel_flow_ratio: The rel_flow_ratio of this RetainabilityThreshold.  # noqa: E501
        :type rel_flow_ratio: int
        """
        self.openapi_types = {
            'rel_flow_num': int,
            'rel_time_unit': TimeUnit,
            'rel_flow_ratio': int
        }

        self.attribute_map = {
            'rel_flow_num': 'relFlowNum',
            'rel_time_unit': 'relTimeUnit',
            'rel_flow_ratio': 'relFlowRatio'
        }

        self.rel_flow_num = rel_flow_num
        self.rel_time_unit = rel_time_unit
        self.rel_flow_ratio = rel_flow_ratio

    @classmethod
    def from_dict(cls, dikt) -> 'RetainabilityThreshold':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RetainabilityThreshold of this RetainabilityThreshold.  # noqa: E501
        :rtype: RetainabilityThreshold
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rel_flow_num(self):
        """Gets the rel_flow_num of this RetainabilityThreshold.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The rel_flow_num of this RetainabilityThreshold.
        :rtype: int
        """
        return self._rel_flow_num

    @rel_flow_num.setter
    def rel_flow_num(self, rel_flow_num):
        """Sets the rel_flow_num of this RetainabilityThreshold.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param rel_flow_num: The rel_flow_num of this RetainabilityThreshold.
        :type rel_flow_num: int
        """
        if rel_flow_num is not None and rel_flow_num < 0:  # noqa: E501
            raise ValueError("Invalid value for `rel_flow_num`, must be a value greater than or equal to `0`")  # noqa: E501

        self._rel_flow_num = rel_flow_num

    @property
    def rel_time_unit(self):
        """Gets the rel_time_unit of this RetainabilityThreshold.


        :return: The rel_time_unit of this RetainabilityThreshold.
        :rtype: TimeUnit
        """
        return self._rel_time_unit

    @rel_time_unit.setter
    def rel_time_unit(self, rel_time_unit):
        """Sets the rel_time_unit of this RetainabilityThreshold.


        :param rel_time_unit: The rel_time_unit of this RetainabilityThreshold.
        :type rel_time_unit: TimeUnit
        """

        self._rel_time_unit = rel_time_unit

    @property
    def rel_flow_ratio(self):
        """Gets the rel_flow_ratio of this RetainabilityThreshold.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :return: The rel_flow_ratio of this RetainabilityThreshold.
        :rtype: int
        """
        return self._rel_flow_ratio

    @rel_flow_ratio.setter
    def rel_flow_ratio(self, rel_flow_ratio):
        """Sets the rel_flow_ratio of this RetainabilityThreshold.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :param rel_flow_ratio: The rel_flow_ratio of this RetainabilityThreshold.
        :type rel_flow_ratio: int
        """
        if rel_flow_ratio is not None and rel_flow_ratio > 100:  # noqa: E501
            raise ValueError("Invalid value for `rel_flow_ratio`, must be a value less than or equal to `100`")  # noqa: E501
        if rel_flow_ratio is not None and rel_flow_ratio < 1:  # noqa: E501
            raise ValueError("Invalid value for `rel_flow_ratio`, must be a value greater than or equal to `1`")  # noqa: E501

        self._rel_flow_ratio = rel_flow_ratio
