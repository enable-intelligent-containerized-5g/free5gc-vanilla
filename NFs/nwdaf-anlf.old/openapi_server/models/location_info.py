# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.user_location import UserLocation
from openapi_server import util

from openapi_server.models.user_location import UserLocation  # noqa: E501

class LocationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, loc=None, ratio=None, confidence=None):  # noqa: E501
        """LocationInfo - a model defined in OpenAPI

        :param loc: The loc of this LocationInfo.  # noqa: E501
        :type loc: UserLocation
        :param ratio: The ratio of this LocationInfo.  # noqa: E501
        :type ratio: int
        :param confidence: The confidence of this LocationInfo.  # noqa: E501
        :type confidence: int
        """
        self.openapi_types = {
            'loc': UserLocation,
            'ratio': int,
            'confidence': int
        }

        self.attribute_map = {
            'loc': 'loc',
            'ratio': 'ratio',
            'confidence': 'confidence'
        }

        self.loc = loc
        self.ratio = ratio
        self.confidence = confidence

    @classmethod
    def from_dict(cls, dikt) -> 'LocationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LocationInfo of this LocationInfo.  # noqa: E501
        :rtype: LocationInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def loc(self):
        """Gets the loc of this LocationInfo.


        :return: The loc of this LocationInfo.
        :rtype: UserLocation
        """
        return self._loc

    @loc.setter
    def loc(self, loc):
        """Sets the loc of this LocationInfo.


        :param loc: The loc of this LocationInfo.
        :type loc: UserLocation
        """
        if loc is None:
            raise ValueError("Invalid value for `loc`, must not be `None`")  # noqa: E501

        self._loc = loc

    @property
    def ratio(self):
        """Gets the ratio of this LocationInfo.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :return: The ratio of this LocationInfo.
        :rtype: int
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this LocationInfo.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :param ratio: The ratio of this LocationInfo.
        :type ratio: int
        """
        if ratio is not None and ratio > 100:  # noqa: E501
            raise ValueError("Invalid value for `ratio`, must be a value less than or equal to `100`")  # noqa: E501
        if ratio is not None and ratio < 1:  # noqa: E501
            raise ValueError("Invalid value for `ratio`, must be a value greater than or equal to `1`")  # noqa: E501

        self._ratio = ratio

    @property
    def confidence(self):
        """Gets the confidence of this LocationInfo.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The confidence of this LocationInfo.
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this LocationInfo.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param confidence: The confidence of this LocationInfo.
        :type confidence: int
        """
        if confidence is not None and confidence < 0:  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")  # noqa: E501

        self._confidence = confidence
