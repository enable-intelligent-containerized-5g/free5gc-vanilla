# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.eth_flow_description import EthFlowDescription
from openapi_server.models.flow_info import FlowInfo
from openapi_server.models.svc_experience import SvcExperience
from openapi_server.models.time_window import TimeWindow
from openapi_server import util

from openapi_server.models.eth_flow_description import EthFlowDescription  # noqa: E501
from openapi_server.models.flow_info import FlowInfo  # noqa: E501
from openapi_server.models.svc_experience import SvcExperience  # noqa: E501
from openapi_server.models.time_window import TimeWindow  # noqa: E501

class ServiceExperienceInfoPerFlow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, svc_exprc=None, time_intev=None, dnai=None, ip_traffic_filter=None, eth_traffic_filter=None):  # noqa: E501
        """ServiceExperienceInfoPerFlow - a model defined in OpenAPI

        :param svc_exprc: The svc_exprc of this ServiceExperienceInfoPerFlow.  # noqa: E501
        :type svc_exprc: SvcExperience
        :param time_intev: The time_intev of this ServiceExperienceInfoPerFlow.  # noqa: E501
        :type time_intev: TimeWindow
        :param dnai: The dnai of this ServiceExperienceInfoPerFlow.  # noqa: E501
        :type dnai: str
        :param ip_traffic_filter: The ip_traffic_filter of this ServiceExperienceInfoPerFlow.  # noqa: E501
        :type ip_traffic_filter: FlowInfo
        :param eth_traffic_filter: The eth_traffic_filter of this ServiceExperienceInfoPerFlow.  # noqa: E501
        :type eth_traffic_filter: EthFlowDescription
        """
        self.openapi_types = {
            'svc_exprc': SvcExperience,
            'time_intev': TimeWindow,
            'dnai': str,
            'ip_traffic_filter': FlowInfo,
            'eth_traffic_filter': EthFlowDescription
        }

        self.attribute_map = {
            'svc_exprc': 'svcExprc',
            'time_intev': 'timeIntev',
            'dnai': 'dnai',
            'ip_traffic_filter': 'ipTrafficFilter',
            'eth_traffic_filter': 'ethTrafficFilter'
        }

        self.svc_exprc = svc_exprc
        self.time_intev = time_intev
        self.dnai = dnai
        self.ip_traffic_filter = ip_traffic_filter
        self.eth_traffic_filter = eth_traffic_filter

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceExperienceInfoPerFlow':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceExperienceInfoPerFlow of this ServiceExperienceInfoPerFlow.  # noqa: E501
        :rtype: ServiceExperienceInfoPerFlow
        """
        return util.deserialize_model(dikt, cls)

    @property
    def svc_exprc(self):
        """Gets the svc_exprc of this ServiceExperienceInfoPerFlow.


        :return: The svc_exprc of this ServiceExperienceInfoPerFlow.
        :rtype: SvcExperience
        """
        return self._svc_exprc

    @svc_exprc.setter
    def svc_exprc(self, svc_exprc):
        """Sets the svc_exprc of this ServiceExperienceInfoPerFlow.


        :param svc_exprc: The svc_exprc of this ServiceExperienceInfoPerFlow.
        :type svc_exprc: SvcExperience
        """

        self._svc_exprc = svc_exprc

    @property
    def time_intev(self):
        """Gets the time_intev of this ServiceExperienceInfoPerFlow.


        :return: The time_intev of this ServiceExperienceInfoPerFlow.
        :rtype: TimeWindow
        """
        return self._time_intev

    @time_intev.setter
    def time_intev(self, time_intev):
        """Sets the time_intev of this ServiceExperienceInfoPerFlow.


        :param time_intev: The time_intev of this ServiceExperienceInfoPerFlow.
        :type time_intev: TimeWindow
        """

        self._time_intev = time_intev

    @property
    def dnai(self):
        """Gets the dnai of this ServiceExperienceInfoPerFlow.

        DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.  # noqa: E501

        :return: The dnai of this ServiceExperienceInfoPerFlow.
        :rtype: str
        """
        return self._dnai

    @dnai.setter
    def dnai(self, dnai):
        """Sets the dnai of this ServiceExperienceInfoPerFlow.

        DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.  # noqa: E501

        :param dnai: The dnai of this ServiceExperienceInfoPerFlow.
        :type dnai: str
        """

        self._dnai = dnai

    @property
    def ip_traffic_filter(self):
        """Gets the ip_traffic_filter of this ServiceExperienceInfoPerFlow.


        :return: The ip_traffic_filter of this ServiceExperienceInfoPerFlow.
        :rtype: FlowInfo
        """
        return self._ip_traffic_filter

    @ip_traffic_filter.setter
    def ip_traffic_filter(self, ip_traffic_filter):
        """Sets the ip_traffic_filter of this ServiceExperienceInfoPerFlow.


        :param ip_traffic_filter: The ip_traffic_filter of this ServiceExperienceInfoPerFlow.
        :type ip_traffic_filter: FlowInfo
        """

        self._ip_traffic_filter = ip_traffic_filter

    @property
    def eth_traffic_filter(self):
        """Gets the eth_traffic_filter of this ServiceExperienceInfoPerFlow.


        :return: The eth_traffic_filter of this ServiceExperienceInfoPerFlow.
        :rtype: EthFlowDescription
        """
        return self._eth_traffic_filter

    @eth_traffic_filter.setter
    def eth_traffic_filter(self, eth_traffic_filter):
        """Sets the eth_traffic_filter of this ServiceExperienceInfoPerFlow.


        :param eth_traffic_filter: The eth_traffic_filter of this ServiceExperienceInfoPerFlow.
        :type eth_traffic_filter: EthFlowDescription
        """

        self._eth_traffic_filter = eth_traffic_filter
