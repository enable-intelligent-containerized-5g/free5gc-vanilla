# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.addr_fqdn import AddrFqdn
from openapi_server.models.analytics_subset import AnalyticsSubset
from openapi_server.models.bw_requirement import BwRequirement
from openapi_server.models.dispersion_requirement import DispersionRequirement
from openapi_server.models.dn_performance_req import DnPerformanceReq
from openapi_server.models.event_reporting_requirement import EventReportingRequirement
from openapi_server.models.exception import Exception
from openapi_server.models.expected_analytics_type import ExpectedAnalyticsType
from openapi_server.models.expected_ue_behaviour_data import ExpectedUeBehaviourData
from openapi_server.models.matching_direction import MatchingDirection
from openapi_server.models.nf_type import NFType
from openapi_server.models.network_area_info import NetworkAreaInfo
from openapi_server.models.network_perf_requirement import NetworkPerfRequirement
from openapi_server.models.notification_method import NotificationMethod
from openapi_server.models.nsi_id_info import NsiIdInfo
from openapi_server.models.nwdaf_event import NwdafEvent
from openapi_server.models.qos_requirement import QosRequirement
from openapi_server.models.rat_freq_information import RatFreqInformation
from openapi_server.models.redundant_transmission_exp_req import RedundantTransmissionExpReq
from openapi_server.models.retainability_threshold import RetainabilityThreshold
from openapi_server.models.snssai import Snssai
from openapi_server.models.target_ue_information import TargetUeInformation
from openapi_server.models.threshold_level import ThresholdLevel
from openapi_server.models.upf_information import UpfInformation
from openapi_server.models.wlan_performance_req import WlanPerformanceReq
from openapi_server import util

from openapi_server.models.addr_fqdn import AddrFqdn  # noqa: E501
from openapi_server.models.analytics_subset import AnalyticsSubset  # noqa: E501
from openapi_server.models.bw_requirement import BwRequirement  # noqa: E501
from openapi_server.models.dispersion_requirement import DispersionRequirement  # noqa: E501
from openapi_server.models.dn_performance_req import DnPerformanceReq  # noqa: E501
from openapi_server.models.event_reporting_requirement import EventReportingRequirement  # noqa: E501
from openapi_server.models.exception import Exception  # noqa: E501
from openapi_server.models.expected_analytics_type import ExpectedAnalyticsType  # noqa: E501
from openapi_server.models.expected_ue_behaviour_data import ExpectedUeBehaviourData  # noqa: E501
from openapi_server.models.matching_direction import MatchingDirection  # noqa: E501
from openapi_server.models.network_area_info import NetworkAreaInfo  # noqa: E501
from openapi_server.models.network_perf_requirement import NetworkPerfRequirement  # noqa: E501
from openapi_server.models.nf_type import NFType  # noqa: E501
from openapi_server.models.notification_method import NotificationMethod  # noqa: E501
from openapi_server.models.nsi_id_info import NsiIdInfo  # noqa: E501
from openapi_server.models.nwdaf_event import NwdafEvent  # noqa: E501
from openapi_server.models.qos_requirement import QosRequirement  # noqa: E501
from openapi_server.models.rat_freq_information import RatFreqInformation  # noqa: E501
from openapi_server.models.redundant_transmission_exp_req import RedundantTransmissionExpReq  # noqa: E501
from openapi_server.models.retainability_threshold import RetainabilityThreshold  # noqa: E501
from openapi_server.models.snssai import Snssai  # noqa: E501
from openapi_server.models.target_ue_information import TargetUeInformation  # noqa: E501
from openapi_server.models.threshold_level import ThresholdLevel  # noqa: E501
from openapi_server.models.upf_information import UpfInformation  # noqa: E501
from openapi_server.models.wlan_performance_req import WlanPerformanceReq  # noqa: E501

class EventSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, any_slice=None, app_ids=None, dnns=None, dnais=None, event=None, extra_report_req=None, ladn_dnns=None, load_level_threshold=None, notification_method=None, matching_dir=None, nf_load_lvl_thds=None, nf_instance_ids=None, nf_set_ids=None, nf_types=None, network_area=None, visited_areas=None, max_top_app_ul_nbr=None, max_top_app_dl_nbr=None, nsi_id_infos=None, nsi_level_thrds=None, qos_requ=None, qos_flow_ret_thds=None, ran_ue_throu_thds=None, repetition_period=None, snssaia=None, tgt_ue=None, cong_thresholds=None, nw_perf_requs=None, bw_requs=None, excep_requs=None, expt_ana_type=None, expt_ue_behav=None, rat_freqs=None, list_of_ana_subsets=None, disper_reqs=None, red_trans_reqs=None, wlan_reqs=None, upf_info=None, app_server_addrs=None, dn_perf_reqs=None):  # noqa: E501
        """EventSubscription - a model defined in OpenAPI

        :param any_slice: The any_slice of this EventSubscription.  # noqa: E501
        :type any_slice: bool
        :param app_ids: The app_ids of this EventSubscription.  # noqa: E501
        :type app_ids: List[str]
        :param dnns: The dnns of this EventSubscription.  # noqa: E501
        :type dnns: List[str]
        :param dnais: The dnais of this EventSubscription.  # noqa: E501
        :type dnais: List[str]
        :param event: The event of this EventSubscription.  # noqa: E501
        :type event: NwdafEvent
        :param extra_report_req: The extra_report_req of this EventSubscription.  # noqa: E501
        :type extra_report_req: EventReportingRequirement
        :param ladn_dnns: The ladn_dnns of this EventSubscription.  # noqa: E501
        :type ladn_dnns: List[str]
        :param load_level_threshold: The load_level_threshold of this EventSubscription.  # noqa: E501
        :type load_level_threshold: int
        :param notification_method: The notification_method of this EventSubscription.  # noqa: E501
        :type notification_method: NotificationMethod
        :param matching_dir: The matching_dir of this EventSubscription.  # noqa: E501
        :type matching_dir: MatchingDirection
        :param nf_load_lvl_thds: The nf_load_lvl_thds of this EventSubscription.  # noqa: E501
        :type nf_load_lvl_thds: List[ThresholdLevel]
        :param nf_instance_ids: The nf_instance_ids of this EventSubscription.  # noqa: E501
        :type nf_instance_ids: List[str]
        :param nf_set_ids: The nf_set_ids of this EventSubscription.  # noqa: E501
        :type nf_set_ids: List[str]
        :param nf_types: The nf_types of this EventSubscription.  # noqa: E501
        :type nf_types: List[NFType]
        :param network_area: The network_area of this EventSubscription.  # noqa: E501
        :type network_area: NetworkAreaInfo
        :param visited_areas: The visited_areas of this EventSubscription.  # noqa: E501
        :type visited_areas: List[NetworkAreaInfo]
        :param max_top_app_ul_nbr: The max_top_app_ul_nbr of this EventSubscription.  # noqa: E501
        :type max_top_app_ul_nbr: int
        :param max_top_app_dl_nbr: The max_top_app_dl_nbr of this EventSubscription.  # noqa: E501
        :type max_top_app_dl_nbr: int
        :param nsi_id_infos: The nsi_id_infos of this EventSubscription.  # noqa: E501
        :type nsi_id_infos: List[NsiIdInfo]
        :param nsi_level_thrds: The nsi_level_thrds of this EventSubscription.  # noqa: E501
        :type nsi_level_thrds: List[int]
        :param qos_requ: The qos_requ of this EventSubscription.  # noqa: E501
        :type qos_requ: QosRequirement
        :param qos_flow_ret_thds: The qos_flow_ret_thds of this EventSubscription.  # noqa: E501
        :type qos_flow_ret_thds: List[RetainabilityThreshold]
        :param ran_ue_throu_thds: The ran_ue_throu_thds of this EventSubscription.  # noqa: E501
        :type ran_ue_throu_thds: List[str]
        :param repetition_period: The repetition_period of this EventSubscription.  # noqa: E501
        :type repetition_period: int
        :param snssaia: The snssaia of this EventSubscription.  # noqa: E501
        :type snssaia: List[Snssai]
        :param tgt_ue: The tgt_ue of this EventSubscription.  # noqa: E501
        :type tgt_ue: TargetUeInformation
        :param cong_thresholds: The cong_thresholds of this EventSubscription.  # noqa: E501
        :type cong_thresholds: List[ThresholdLevel]
        :param nw_perf_requs: The nw_perf_requs of this EventSubscription.  # noqa: E501
        :type nw_perf_requs: List[NetworkPerfRequirement]
        :param bw_requs: The bw_requs of this EventSubscription.  # noqa: E501
        :type bw_requs: List[BwRequirement]
        :param excep_requs: The excep_requs of this EventSubscription.  # noqa: E501
        :type excep_requs: List[Exception]
        :param expt_ana_type: The expt_ana_type of this EventSubscription.  # noqa: E501
        :type expt_ana_type: ExpectedAnalyticsType
        :param expt_ue_behav: The expt_ue_behav of this EventSubscription.  # noqa: E501
        :type expt_ue_behav: ExpectedUeBehaviourData
        :param rat_freqs: The rat_freqs of this EventSubscription.  # noqa: E501
        :type rat_freqs: List[RatFreqInformation]
        :param list_of_ana_subsets: The list_of_ana_subsets of this EventSubscription.  # noqa: E501
        :type list_of_ana_subsets: List[AnalyticsSubset]
        :param disper_reqs: The disper_reqs of this EventSubscription.  # noqa: E501
        :type disper_reqs: List[DispersionRequirement]
        :param red_trans_reqs: The red_trans_reqs of this EventSubscription.  # noqa: E501
        :type red_trans_reqs: List[RedundantTransmissionExpReq]
        :param wlan_reqs: The wlan_reqs of this EventSubscription.  # noqa: E501
        :type wlan_reqs: List[WlanPerformanceReq]
        :param upf_info: The upf_info of this EventSubscription.  # noqa: E501
        :type upf_info: UpfInformation
        :param app_server_addrs: The app_server_addrs of this EventSubscription.  # noqa: E501
        :type app_server_addrs: List[AddrFqdn]
        :param dn_perf_reqs: The dn_perf_reqs of this EventSubscription.  # noqa: E501
        :type dn_perf_reqs: List[DnPerformanceReq]
        """
        self.openapi_types = {
            'any_slice': bool,
            'app_ids': List[str],
            'dnns': List[str],
            'dnais': List[str],
            'event': NwdafEvent,
            'extra_report_req': EventReportingRequirement,
            'ladn_dnns': List[str],
            'load_level_threshold': int,
            'notification_method': NotificationMethod,
            'matching_dir': MatchingDirection,
            'nf_load_lvl_thds': List[ThresholdLevel],
            'nf_instance_ids': List[str],
            'nf_set_ids': List[str],
            'nf_types': List[NFType],
            'network_area': NetworkAreaInfo,
            'visited_areas': List[NetworkAreaInfo],
            'max_top_app_ul_nbr': int,
            'max_top_app_dl_nbr': int,
            'nsi_id_infos': List[NsiIdInfo],
            'nsi_level_thrds': List[int],
            'qos_requ': QosRequirement,
            'qos_flow_ret_thds': List[RetainabilityThreshold],
            'ran_ue_throu_thds': List[str],
            'repetition_period': int,
            'snssaia': List[Snssai],
            'tgt_ue': TargetUeInformation,
            'cong_thresholds': List[ThresholdLevel],
            'nw_perf_requs': List[NetworkPerfRequirement],
            'bw_requs': List[BwRequirement],
            'excep_requs': List[Exception],
            'expt_ana_type': ExpectedAnalyticsType,
            'expt_ue_behav': ExpectedUeBehaviourData,
            'rat_freqs': List[RatFreqInformation],
            'list_of_ana_subsets': List[AnalyticsSubset],
            'disper_reqs': List[DispersionRequirement],
            'red_trans_reqs': List[RedundantTransmissionExpReq],
            'wlan_reqs': List[WlanPerformanceReq],
            'upf_info': UpfInformation,
            'app_server_addrs': List[AddrFqdn],
            'dn_perf_reqs': List[DnPerformanceReq]
        }

        self.attribute_map = {
            'any_slice': 'anySlice',
            'app_ids': 'appIds',
            'dnns': 'dnns',
            'dnais': 'dnais',
            'event': 'event',
            'extra_report_req': 'extraReportReq',
            'ladn_dnns': 'ladnDnns',
            'load_level_threshold': 'loadLevelThreshold',
            'notification_method': 'notificationMethod',
            'matching_dir': 'matchingDir',
            'nf_load_lvl_thds': 'nfLoadLvlThds',
            'nf_instance_ids': 'nfInstanceIds',
            'nf_set_ids': 'nfSetIds',
            'nf_types': 'nfTypes',
            'network_area': 'networkArea',
            'visited_areas': 'visitedAreas',
            'max_top_app_ul_nbr': 'maxTopAppUlNbr',
            'max_top_app_dl_nbr': 'maxTopAppDlNbr',
            'nsi_id_infos': 'nsiIdInfos',
            'nsi_level_thrds': 'nsiLevelThrds',
            'qos_requ': 'qosRequ',
            'qos_flow_ret_thds': 'qosFlowRetThds',
            'ran_ue_throu_thds': 'ranUeThrouThds',
            'repetition_period': 'repetitionPeriod',
            'snssaia': 'snssaia',
            'tgt_ue': 'tgtUe',
            'cong_thresholds': 'congThresholds',
            'nw_perf_requs': 'nwPerfRequs',
            'bw_requs': 'bwRequs',
            'excep_requs': 'excepRequs',
            'expt_ana_type': 'exptAnaType',
            'expt_ue_behav': 'exptUeBehav',
            'rat_freqs': 'ratFreqs',
            'list_of_ana_subsets': 'listOfAnaSubsets',
            'disper_reqs': 'disperReqs',
            'red_trans_reqs': 'redTransReqs',
            'wlan_reqs': 'wlanReqs',
            'upf_info': 'upfInfo',
            'app_server_addrs': 'appServerAddrs',
            'dn_perf_reqs': 'dnPerfReqs'
        }

        self.any_slice = any_slice
        self.app_ids = app_ids
        self.dnns = dnns
        self.dnais = dnais
        self.event = event
        self.extra_report_req = extra_report_req
        self.ladn_dnns = ladn_dnns
        self.load_level_threshold = load_level_threshold
        self.notification_method = notification_method
        self.matching_dir = matching_dir
        self.nf_load_lvl_thds = nf_load_lvl_thds
        self.nf_instance_ids = nf_instance_ids
        self.nf_set_ids = nf_set_ids
        self.nf_types = nf_types
        self.network_area = network_area
        self.visited_areas = visited_areas
        self.max_top_app_ul_nbr = max_top_app_ul_nbr
        self.max_top_app_dl_nbr = max_top_app_dl_nbr
        self.nsi_id_infos = nsi_id_infos
        self.nsi_level_thrds = nsi_level_thrds
        self.qos_requ = qos_requ
        self.qos_flow_ret_thds = qos_flow_ret_thds
        self.ran_ue_throu_thds = ran_ue_throu_thds
        self.repetition_period = repetition_period
        self.snssaia = snssaia
        self.tgt_ue = tgt_ue
        self.cong_thresholds = cong_thresholds
        self.nw_perf_requs = nw_perf_requs
        self.bw_requs = bw_requs
        self.excep_requs = excep_requs
        self.expt_ana_type = expt_ana_type
        self.expt_ue_behav = expt_ue_behav
        self.rat_freqs = rat_freqs
        self.list_of_ana_subsets = list_of_ana_subsets
        self.disper_reqs = disper_reqs
        self.red_trans_reqs = red_trans_reqs
        self.wlan_reqs = wlan_reqs
        self.upf_info = upf_info
        self.app_server_addrs = app_server_addrs
        self.dn_perf_reqs = dn_perf_reqs

    @classmethod
    def from_dict(cls, dikt) -> 'EventSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventSubscription of this EventSubscription.  # noqa: E501
        :rtype: EventSubscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def any_slice(self):
        """Gets the any_slice of this EventSubscription.

        FALSE represents not applicable for all slices. TRUE represents applicable for all slices.   # noqa: E501

        :return: The any_slice of this EventSubscription.
        :rtype: bool
        """
        return self._any_slice

    @any_slice.setter
    def any_slice(self, any_slice):
        """Sets the any_slice of this EventSubscription.

        FALSE represents not applicable for all slices. TRUE represents applicable for all slices.   # noqa: E501

        :param any_slice: The any_slice of this EventSubscription.
        :type any_slice: bool
        """

        self._any_slice = any_slice

    @property
    def app_ids(self):
        """Gets the app_ids of this EventSubscription.

        Identification(s) of application to which the subscription applies.  # noqa: E501

        :return: The app_ids of this EventSubscription.
        :rtype: List[str]
        """
        return self._app_ids

    @app_ids.setter
    def app_ids(self, app_ids):
        """Sets the app_ids of this EventSubscription.

        Identification(s) of application to which the subscription applies.  # noqa: E501

        :param app_ids: The app_ids of this EventSubscription.
        :type app_ids: List[str]
        """
        if app_ids is not None and len(app_ids) < 1:
            raise ValueError("Invalid value for `app_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._app_ids = app_ids

    @property
    def dnns(self):
        """Gets the dnns of this EventSubscription.

        Identification(s) of DNN to which the subscription applies.  # noqa: E501

        :return: The dnns of this EventSubscription.
        :rtype: List[str]
        """
        return self._dnns

    @dnns.setter
    def dnns(self, dnns):
        """Sets the dnns of this EventSubscription.

        Identification(s) of DNN to which the subscription applies.  # noqa: E501

        :param dnns: The dnns of this EventSubscription.
        :type dnns: List[str]
        """
        if dnns is not None and len(dnns) < 1:
            raise ValueError("Invalid value for `dnns`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._dnns = dnns

    @property
    def dnais(self):
        """Gets the dnais of this EventSubscription.


        :return: The dnais of this EventSubscription.
        :rtype: List[str]
        """
        return self._dnais

    @dnais.setter
    def dnais(self, dnais):
        """Sets the dnais of this EventSubscription.


        :param dnais: The dnais of this EventSubscription.
        :type dnais: List[str]
        """
        if dnais is not None and len(dnais) < 1:
            raise ValueError("Invalid value for `dnais`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._dnais = dnais

    @property
    def event(self):
        """Gets the event of this EventSubscription.


        :return: The event of this EventSubscription.
        :rtype: NwdafEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this EventSubscription.


        :param event: The event of this EventSubscription.
        :type event: NwdafEvent
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501

        self._event = event

    @property
    def extra_report_req(self):
        """Gets the extra_report_req of this EventSubscription.


        :return: The extra_report_req of this EventSubscription.
        :rtype: EventReportingRequirement
        """
        return self._extra_report_req

    @extra_report_req.setter
    def extra_report_req(self, extra_report_req):
        """Sets the extra_report_req of this EventSubscription.


        :param extra_report_req: The extra_report_req of this EventSubscription.
        :type extra_report_req: EventReportingRequirement
        """

        self._extra_report_req = extra_report_req

    @property
    def ladn_dnns(self):
        """Gets the ladn_dnns of this EventSubscription.

        Identification(s) of LADN DNN to indicate the LADN service area as the AOI.  # noqa: E501

        :return: The ladn_dnns of this EventSubscription.
        :rtype: List[str]
        """
        return self._ladn_dnns

    @ladn_dnns.setter
    def ladn_dnns(self, ladn_dnns):
        """Sets the ladn_dnns of this EventSubscription.

        Identification(s) of LADN DNN to indicate the LADN service area as the AOI.  # noqa: E501

        :param ladn_dnns: The ladn_dnns of this EventSubscription.
        :type ladn_dnns: List[str]
        """
        if ladn_dnns is not None and len(ladn_dnns) < 1:
            raise ValueError("Invalid value for `ladn_dnns`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ladn_dnns = ladn_dnns

    @property
    def load_level_threshold(self):
        """Gets the load_level_threshold of this EventSubscription.

        Indicates that the NWDAF shall report the corresponding network slice load level to the NF  service consumer where the load level of the network slice identified by snssais is  reached.   # noqa: E501

        :return: The load_level_threshold of this EventSubscription.
        :rtype: int
        """
        return self._load_level_threshold

    @load_level_threshold.setter
    def load_level_threshold(self, load_level_threshold):
        """Sets the load_level_threshold of this EventSubscription.

        Indicates that the NWDAF shall report the corresponding network slice load level to the NF  service consumer where the load level of the network slice identified by snssais is  reached.   # noqa: E501

        :param load_level_threshold: The load_level_threshold of this EventSubscription.
        :type load_level_threshold: int
        """

        self._load_level_threshold = load_level_threshold

    @property
    def notification_method(self):
        """Gets the notification_method of this EventSubscription.


        :return: The notification_method of this EventSubscription.
        :rtype: NotificationMethod
        """
        return self._notification_method

    @notification_method.setter
    def notification_method(self, notification_method):
        """Sets the notification_method of this EventSubscription.


        :param notification_method: The notification_method of this EventSubscription.
        :type notification_method: NotificationMethod
        """

        self._notification_method = notification_method

    @property
    def matching_dir(self):
        """Gets the matching_dir of this EventSubscription.


        :return: The matching_dir of this EventSubscription.
        :rtype: MatchingDirection
        """
        return self._matching_dir

    @matching_dir.setter
    def matching_dir(self, matching_dir):
        """Sets the matching_dir of this EventSubscription.


        :param matching_dir: The matching_dir of this EventSubscription.
        :type matching_dir: MatchingDirection
        """

        self._matching_dir = matching_dir

    @property
    def nf_load_lvl_thds(self):
        """Gets the nf_load_lvl_thds of this EventSubscription.

        Shall be supplied in order to start reporting when an average load level is reached.   # noqa: E501

        :return: The nf_load_lvl_thds of this EventSubscription.
        :rtype: List[ThresholdLevel]
        """
        return self._nf_load_lvl_thds

    @nf_load_lvl_thds.setter
    def nf_load_lvl_thds(self, nf_load_lvl_thds):
        """Sets the nf_load_lvl_thds of this EventSubscription.

        Shall be supplied in order to start reporting when an average load level is reached.   # noqa: E501

        :param nf_load_lvl_thds: The nf_load_lvl_thds of this EventSubscription.
        :type nf_load_lvl_thds: List[ThresholdLevel]
        """
        if nf_load_lvl_thds is not None and len(nf_load_lvl_thds) < 1:
            raise ValueError("Invalid value for `nf_load_lvl_thds`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nf_load_lvl_thds = nf_load_lvl_thds

    @property
    def nf_instance_ids(self):
        """Gets the nf_instance_ids of this EventSubscription.


        :return: The nf_instance_ids of this EventSubscription.
        :rtype: List[str]
        """
        return self._nf_instance_ids

    @nf_instance_ids.setter
    def nf_instance_ids(self, nf_instance_ids):
        """Sets the nf_instance_ids of this EventSubscription.


        :param nf_instance_ids: The nf_instance_ids of this EventSubscription.
        :type nf_instance_ids: List[str]
        """
        if nf_instance_ids is not None and len(nf_instance_ids) < 1:
            raise ValueError("Invalid value for `nf_instance_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nf_instance_ids = nf_instance_ids

    @property
    def nf_set_ids(self):
        """Gets the nf_set_ids of this EventSubscription.


        :return: The nf_set_ids of this EventSubscription.
        :rtype: List[str]
        """
        return self._nf_set_ids

    @nf_set_ids.setter
    def nf_set_ids(self, nf_set_ids):
        """Sets the nf_set_ids of this EventSubscription.


        :param nf_set_ids: The nf_set_ids of this EventSubscription.
        :type nf_set_ids: List[str]
        """
        if nf_set_ids is not None and len(nf_set_ids) < 1:
            raise ValueError("Invalid value for `nf_set_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nf_set_ids = nf_set_ids

    @property
    def nf_types(self):
        """Gets the nf_types of this EventSubscription.


        :return: The nf_types of this EventSubscription.
        :rtype: List[NFType]
        """
        return self._nf_types

    @nf_types.setter
    def nf_types(self, nf_types):
        """Sets the nf_types of this EventSubscription.


        :param nf_types: The nf_types of this EventSubscription.
        :type nf_types: List[NFType]
        """
        if nf_types is not None and len(nf_types) < 1:
            raise ValueError("Invalid value for `nf_types`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nf_types = nf_types

    @property
    def network_area(self):
        """Gets the network_area of this EventSubscription.


        :return: The network_area of this EventSubscription.
        :rtype: NetworkAreaInfo
        """
        return self._network_area

    @network_area.setter
    def network_area(self, network_area):
        """Sets the network_area of this EventSubscription.


        :param network_area: The network_area of this EventSubscription.
        :type network_area: NetworkAreaInfo
        """

        self._network_area = network_area

    @property
    def visited_areas(self):
        """Gets the visited_areas of this EventSubscription.


        :return: The visited_areas of this EventSubscription.
        :rtype: List[NetworkAreaInfo]
        """
        return self._visited_areas

    @visited_areas.setter
    def visited_areas(self, visited_areas):
        """Sets the visited_areas of this EventSubscription.


        :param visited_areas: The visited_areas of this EventSubscription.
        :type visited_areas: List[NetworkAreaInfo]
        """
        if visited_areas is not None and len(visited_areas) < 1:
            raise ValueError("Invalid value for `visited_areas`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._visited_areas = visited_areas

    @property
    def max_top_app_ul_nbr(self):
        """Gets the max_top_app_ul_nbr of this EventSubscription.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The max_top_app_ul_nbr of this EventSubscription.
        :rtype: int
        """
        return self._max_top_app_ul_nbr

    @max_top_app_ul_nbr.setter
    def max_top_app_ul_nbr(self, max_top_app_ul_nbr):
        """Sets the max_top_app_ul_nbr of this EventSubscription.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param max_top_app_ul_nbr: The max_top_app_ul_nbr of this EventSubscription.
        :type max_top_app_ul_nbr: int
        """
        if max_top_app_ul_nbr is not None and max_top_app_ul_nbr < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_top_app_ul_nbr`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_top_app_ul_nbr = max_top_app_ul_nbr

    @property
    def max_top_app_dl_nbr(self):
        """Gets the max_top_app_dl_nbr of this EventSubscription.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The max_top_app_dl_nbr of this EventSubscription.
        :rtype: int
        """
        return self._max_top_app_dl_nbr

    @max_top_app_dl_nbr.setter
    def max_top_app_dl_nbr(self, max_top_app_dl_nbr):
        """Sets the max_top_app_dl_nbr of this EventSubscription.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param max_top_app_dl_nbr: The max_top_app_dl_nbr of this EventSubscription.
        :type max_top_app_dl_nbr: int
        """
        if max_top_app_dl_nbr is not None and max_top_app_dl_nbr < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_top_app_dl_nbr`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_top_app_dl_nbr = max_top_app_dl_nbr

    @property
    def nsi_id_infos(self):
        """Gets the nsi_id_infos of this EventSubscription.


        :return: The nsi_id_infos of this EventSubscription.
        :rtype: List[NsiIdInfo]
        """
        return self._nsi_id_infos

    @nsi_id_infos.setter
    def nsi_id_infos(self, nsi_id_infos):
        """Sets the nsi_id_infos of this EventSubscription.


        :param nsi_id_infos: The nsi_id_infos of this EventSubscription.
        :type nsi_id_infos: List[NsiIdInfo]
        """
        if nsi_id_infos is not None and len(nsi_id_infos) < 1:
            raise ValueError("Invalid value for `nsi_id_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nsi_id_infos = nsi_id_infos

    @property
    def nsi_level_thrds(self):
        """Gets the nsi_level_thrds of this EventSubscription.


        :return: The nsi_level_thrds of this EventSubscription.
        :rtype: List[int]
        """
        return self._nsi_level_thrds

    @nsi_level_thrds.setter
    def nsi_level_thrds(self, nsi_level_thrds):
        """Sets the nsi_level_thrds of this EventSubscription.


        :param nsi_level_thrds: The nsi_level_thrds of this EventSubscription.
        :type nsi_level_thrds: List[int]
        """
        if nsi_level_thrds is not None and len(nsi_level_thrds) < 1:
            raise ValueError("Invalid value for `nsi_level_thrds`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nsi_level_thrds = nsi_level_thrds

    @property
    def qos_requ(self):
        """Gets the qos_requ of this EventSubscription.


        :return: The qos_requ of this EventSubscription.
        :rtype: QosRequirement
        """
        return self._qos_requ

    @qos_requ.setter
    def qos_requ(self, qos_requ):
        """Sets the qos_requ of this EventSubscription.


        :param qos_requ: The qos_requ of this EventSubscription.
        :type qos_requ: QosRequirement
        """

        self._qos_requ = qos_requ

    @property
    def qos_flow_ret_thds(self):
        """Gets the qos_flow_ret_thds of this EventSubscription.


        :return: The qos_flow_ret_thds of this EventSubscription.
        :rtype: List[RetainabilityThreshold]
        """
        return self._qos_flow_ret_thds

    @qos_flow_ret_thds.setter
    def qos_flow_ret_thds(self, qos_flow_ret_thds):
        """Sets the qos_flow_ret_thds of this EventSubscription.


        :param qos_flow_ret_thds: The qos_flow_ret_thds of this EventSubscription.
        :type qos_flow_ret_thds: List[RetainabilityThreshold]
        """
        if qos_flow_ret_thds is not None and len(qos_flow_ret_thds) < 1:
            raise ValueError("Invalid value for `qos_flow_ret_thds`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._qos_flow_ret_thds = qos_flow_ret_thds

    @property
    def ran_ue_throu_thds(self):
        """Gets the ran_ue_throu_thds of this EventSubscription.


        :return: The ran_ue_throu_thds of this EventSubscription.
        :rtype: List[str]
        """
        return self._ran_ue_throu_thds

    @ran_ue_throu_thds.setter
    def ran_ue_throu_thds(self, ran_ue_throu_thds):
        """Sets the ran_ue_throu_thds of this EventSubscription.


        :param ran_ue_throu_thds: The ran_ue_throu_thds of this EventSubscription.
        :type ran_ue_throu_thds: List[str]
        """
        if ran_ue_throu_thds is not None and len(ran_ue_throu_thds) < 1:
            raise ValueError("Invalid value for `ran_ue_throu_thds`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ran_ue_throu_thds = ran_ue_throu_thds

    @property
    def repetition_period(self):
        """Gets the repetition_period of this EventSubscription.

        indicating a time in seconds.  # noqa: E501

        :return: The repetition_period of this EventSubscription.
        :rtype: int
        """
        return self._repetition_period

    @repetition_period.setter
    def repetition_period(self, repetition_period):
        """Sets the repetition_period of this EventSubscription.

        indicating a time in seconds.  # noqa: E501

        :param repetition_period: The repetition_period of this EventSubscription.
        :type repetition_period: int
        """

        self._repetition_period = repetition_period

    @property
    def snssaia(self):
        """Gets the snssaia of this EventSubscription.

        Identification(s) of network slice to which the subscription applies. It corresponds to  snssais in the data model definition of 3GPP TS 29.520.    # noqa: E501

        :return: The snssaia of this EventSubscription.
        :rtype: List[Snssai]
        """
        return self._snssaia

    @snssaia.setter
    def snssaia(self, snssaia):
        """Sets the snssaia of this EventSubscription.

        Identification(s) of network slice to which the subscription applies. It corresponds to  snssais in the data model definition of 3GPP TS 29.520.    # noqa: E501

        :param snssaia: The snssaia of this EventSubscription.
        :type snssaia: List[Snssai]
        """
        if snssaia is not None and len(snssaia) < 1:
            raise ValueError("Invalid value for `snssaia`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._snssaia = snssaia

    @property
    def tgt_ue(self):
        """Gets the tgt_ue of this EventSubscription.


        :return: The tgt_ue of this EventSubscription.
        :rtype: TargetUeInformation
        """
        return self._tgt_ue

    @tgt_ue.setter
    def tgt_ue(self, tgt_ue):
        """Sets the tgt_ue of this EventSubscription.


        :param tgt_ue: The tgt_ue of this EventSubscription.
        :type tgt_ue: TargetUeInformation
        """

        self._tgt_ue = tgt_ue

    @property
    def cong_thresholds(self):
        """Gets the cong_thresholds of this EventSubscription.


        :return: The cong_thresholds of this EventSubscription.
        :rtype: List[ThresholdLevel]
        """
        return self._cong_thresholds

    @cong_thresholds.setter
    def cong_thresholds(self, cong_thresholds):
        """Sets the cong_thresholds of this EventSubscription.


        :param cong_thresholds: The cong_thresholds of this EventSubscription.
        :type cong_thresholds: List[ThresholdLevel]
        """
        if cong_thresholds is not None and len(cong_thresholds) < 1:
            raise ValueError("Invalid value for `cong_thresholds`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._cong_thresholds = cong_thresholds

    @property
    def nw_perf_requs(self):
        """Gets the nw_perf_requs of this EventSubscription.


        :return: The nw_perf_requs of this EventSubscription.
        :rtype: List[NetworkPerfRequirement]
        """
        return self._nw_perf_requs

    @nw_perf_requs.setter
    def nw_perf_requs(self, nw_perf_requs):
        """Sets the nw_perf_requs of this EventSubscription.


        :param nw_perf_requs: The nw_perf_requs of this EventSubscription.
        :type nw_perf_requs: List[NetworkPerfRequirement]
        """
        if nw_perf_requs is not None and len(nw_perf_requs) < 1:
            raise ValueError("Invalid value for `nw_perf_requs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nw_perf_requs = nw_perf_requs

    @property
    def bw_requs(self):
        """Gets the bw_requs of this EventSubscription.


        :return: The bw_requs of this EventSubscription.
        :rtype: List[BwRequirement]
        """
        return self._bw_requs

    @bw_requs.setter
    def bw_requs(self, bw_requs):
        """Sets the bw_requs of this EventSubscription.


        :param bw_requs: The bw_requs of this EventSubscription.
        :type bw_requs: List[BwRequirement]
        """
        if bw_requs is not None and len(bw_requs) < 1:
            raise ValueError("Invalid value for `bw_requs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._bw_requs = bw_requs

    @property
    def excep_requs(self):
        """Gets the excep_requs of this EventSubscription.


        :return: The excep_requs of this EventSubscription.
        :rtype: List[Exception]
        """
        return self._excep_requs

    @excep_requs.setter
    def excep_requs(self, excep_requs):
        """Sets the excep_requs of this EventSubscription.


        :param excep_requs: The excep_requs of this EventSubscription.
        :type excep_requs: List[Exception]
        """
        if excep_requs is not None and len(excep_requs) < 1:
            raise ValueError("Invalid value for `excep_requs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._excep_requs = excep_requs

    @property
    def expt_ana_type(self):
        """Gets the expt_ana_type of this EventSubscription.


        :return: The expt_ana_type of this EventSubscription.
        :rtype: ExpectedAnalyticsType
        """
        return self._expt_ana_type

    @expt_ana_type.setter
    def expt_ana_type(self, expt_ana_type):
        """Sets the expt_ana_type of this EventSubscription.


        :param expt_ana_type: The expt_ana_type of this EventSubscription.
        :type expt_ana_type: ExpectedAnalyticsType
        """

        self._expt_ana_type = expt_ana_type

    @property
    def expt_ue_behav(self):
        """Gets the expt_ue_behav of this EventSubscription.


        :return: The expt_ue_behav of this EventSubscription.
        :rtype: ExpectedUeBehaviourData
        """
        return self._expt_ue_behav

    @expt_ue_behav.setter
    def expt_ue_behav(self, expt_ue_behav):
        """Sets the expt_ue_behav of this EventSubscription.


        :param expt_ue_behav: The expt_ue_behav of this EventSubscription.
        :type expt_ue_behav: ExpectedUeBehaviourData
        """

        self._expt_ue_behav = expt_ue_behav

    @property
    def rat_freqs(self):
        """Gets the rat_freqs of this EventSubscription.


        :return: The rat_freqs of this EventSubscription.
        :rtype: List[RatFreqInformation]
        """
        return self._rat_freqs

    @rat_freqs.setter
    def rat_freqs(self, rat_freqs):
        """Sets the rat_freqs of this EventSubscription.


        :param rat_freqs: The rat_freqs of this EventSubscription.
        :type rat_freqs: List[RatFreqInformation]
        """
        if rat_freqs is not None and len(rat_freqs) < 1:
            raise ValueError("Invalid value for `rat_freqs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._rat_freqs = rat_freqs

    @property
    def list_of_ana_subsets(self):
        """Gets the list_of_ana_subsets of this EventSubscription.


        :return: The list_of_ana_subsets of this EventSubscription.
        :rtype: List[AnalyticsSubset]
        """
        return self._list_of_ana_subsets

    @list_of_ana_subsets.setter
    def list_of_ana_subsets(self, list_of_ana_subsets):
        """Sets the list_of_ana_subsets of this EventSubscription.


        :param list_of_ana_subsets: The list_of_ana_subsets of this EventSubscription.
        :type list_of_ana_subsets: List[AnalyticsSubset]
        """
        if list_of_ana_subsets is not None and len(list_of_ana_subsets) < 1:
            raise ValueError("Invalid value for `list_of_ana_subsets`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._list_of_ana_subsets = list_of_ana_subsets

    @property
    def disper_reqs(self):
        """Gets the disper_reqs of this EventSubscription.


        :return: The disper_reqs of this EventSubscription.
        :rtype: List[DispersionRequirement]
        """
        return self._disper_reqs

    @disper_reqs.setter
    def disper_reqs(self, disper_reqs):
        """Sets the disper_reqs of this EventSubscription.


        :param disper_reqs: The disper_reqs of this EventSubscription.
        :type disper_reqs: List[DispersionRequirement]
        """
        if disper_reqs is not None and len(disper_reqs) < 1:
            raise ValueError("Invalid value for `disper_reqs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._disper_reqs = disper_reqs

    @property
    def red_trans_reqs(self):
        """Gets the red_trans_reqs of this EventSubscription.


        :return: The red_trans_reqs of this EventSubscription.
        :rtype: List[RedundantTransmissionExpReq]
        """
        return self._red_trans_reqs

    @red_trans_reqs.setter
    def red_trans_reqs(self, red_trans_reqs):
        """Sets the red_trans_reqs of this EventSubscription.


        :param red_trans_reqs: The red_trans_reqs of this EventSubscription.
        :type red_trans_reqs: List[RedundantTransmissionExpReq]
        """
        if red_trans_reqs is not None and len(red_trans_reqs) < 1:
            raise ValueError("Invalid value for `red_trans_reqs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._red_trans_reqs = red_trans_reqs

    @property
    def wlan_reqs(self):
        """Gets the wlan_reqs of this EventSubscription.


        :return: The wlan_reqs of this EventSubscription.
        :rtype: List[WlanPerformanceReq]
        """
        return self._wlan_reqs

    @wlan_reqs.setter
    def wlan_reqs(self, wlan_reqs):
        """Sets the wlan_reqs of this EventSubscription.


        :param wlan_reqs: The wlan_reqs of this EventSubscription.
        :type wlan_reqs: List[WlanPerformanceReq]
        """
        if wlan_reqs is not None and len(wlan_reqs) < 1:
            raise ValueError("Invalid value for `wlan_reqs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._wlan_reqs = wlan_reqs

    @property
    def upf_info(self):
        """Gets the upf_info of this EventSubscription.


        :return: The upf_info of this EventSubscription.
        :rtype: UpfInformation
        """
        return self._upf_info

    @upf_info.setter
    def upf_info(self, upf_info):
        """Sets the upf_info of this EventSubscription.


        :param upf_info: The upf_info of this EventSubscription.
        :type upf_info: UpfInformation
        """

        self._upf_info = upf_info

    @property
    def app_server_addrs(self):
        """Gets the app_server_addrs of this EventSubscription.


        :return: The app_server_addrs of this EventSubscription.
        :rtype: List[AddrFqdn]
        """
        return self._app_server_addrs

    @app_server_addrs.setter
    def app_server_addrs(self, app_server_addrs):
        """Sets the app_server_addrs of this EventSubscription.


        :param app_server_addrs: The app_server_addrs of this EventSubscription.
        :type app_server_addrs: List[AddrFqdn]
        """
        if app_server_addrs is not None and len(app_server_addrs) < 1:
            raise ValueError("Invalid value for `app_server_addrs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._app_server_addrs = app_server_addrs

    @property
    def dn_perf_reqs(self):
        """Gets the dn_perf_reqs of this EventSubscription.


        :return: The dn_perf_reqs of this EventSubscription.
        :rtype: List[DnPerformanceReq]
        """
        return self._dn_perf_reqs

    @dn_perf_reqs.setter
    def dn_perf_reqs(self, dn_perf_reqs):
        """Sets the dn_perf_reqs of this EventSubscription.


        :param dn_perf_reqs: The dn_perf_reqs of this EventSubscription.
        :type dn_perf_reqs: List[DnPerformanceReq]
        """
        if dn_perf_reqs is not None and len(dn_perf_reqs) < 1:
            raise ValueError("Invalid value for `dn_perf_reqs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._dn_perf_reqs = dn_perf_reqs
