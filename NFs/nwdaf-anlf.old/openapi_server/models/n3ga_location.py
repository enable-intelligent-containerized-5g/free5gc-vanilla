# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.hfc_node_id import HfcNodeId
from openapi_server.models.ipv6_addr import Ipv6Addr
from openapi_server.models.line_type import LineType
from openapi_server.models.tai import Tai
from openapi_server.models.tnap_id import TnapId
from openapi_server.models.transport_protocol import TransportProtocol
from openapi_server.models.twap_id import TwapId
import re
from openapi_server import util

from openapi_server.models.hfc_node_id import HfcNodeId  # noqa: E501
from openapi_server.models.ipv6_addr import Ipv6Addr  # noqa: E501
from openapi_server.models.line_type import LineType  # noqa: E501
from openapi_server.models.tai import Tai  # noqa: E501
from openapi_server.models.tnap_id import TnapId  # noqa: E501
from openapi_server.models.transport_protocol import TransportProtocol  # noqa: E501
from openapi_server.models.twap_id import TwapId  # noqa: E501
import re  # noqa: E501

class N3gaLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, n3gpp_tai=None, n3_iwf_id=None, ue_ipv4_addr=None, ue_ipv6_addr=None, port_number=None, protocol=None, tnap_id=None, twap_id=None, hfc_node_id=None, gli=None, w5gban_line_type=None, gci=None):  # noqa: E501
        """N3gaLocation - a model defined in OpenAPI

        :param n3gpp_tai: The n3gpp_tai of this N3gaLocation.  # noqa: E501
        :type n3gpp_tai: Tai
        :param n3_iwf_id: The n3_iwf_id of this N3gaLocation.  # noqa: E501
        :type n3_iwf_id: str
        :param ue_ipv4_addr: The ue_ipv4_addr of this N3gaLocation.  # noqa: E501
        :type ue_ipv4_addr: str
        :param ue_ipv6_addr: The ue_ipv6_addr of this N3gaLocation.  # noqa: E501
        :type ue_ipv6_addr: Ipv6Addr
        :param port_number: The port_number of this N3gaLocation.  # noqa: E501
        :type port_number: int
        :param protocol: The protocol of this N3gaLocation.  # noqa: E501
        :type protocol: TransportProtocol
        :param tnap_id: The tnap_id of this N3gaLocation.  # noqa: E501
        :type tnap_id: TnapId
        :param twap_id: The twap_id of this N3gaLocation.  # noqa: E501
        :type twap_id: TwapId
        :param hfc_node_id: The hfc_node_id of this N3gaLocation.  # noqa: E501
        :type hfc_node_id: HfcNodeId
        :param gli: The gli of this N3gaLocation.  # noqa: E501
        :type gli: str
        :param w5gban_line_type: The w5gban_line_type of this N3gaLocation.  # noqa: E501
        :type w5gban_line_type: LineType
        :param gci: The gci of this N3gaLocation.  # noqa: E501
        :type gci: str
        """
        self.openapi_types = {
            'n3gpp_tai': Tai,
            'n3_iwf_id': str,
            'ue_ipv4_addr': str,
            'ue_ipv6_addr': Ipv6Addr,
            'port_number': int,
            'protocol': TransportProtocol,
            'tnap_id': TnapId,
            'twap_id': TwapId,
            'hfc_node_id': HfcNodeId,
            'gli': str,
            'w5gban_line_type': LineType,
            'gci': str
        }

        self.attribute_map = {
            'n3gpp_tai': 'n3gppTai',
            'n3_iwf_id': 'n3IwfId',
            'ue_ipv4_addr': 'ueIpv4Addr',
            'ue_ipv6_addr': 'ueIpv6Addr',
            'port_number': 'portNumber',
            'protocol': 'protocol',
            'tnap_id': 'tnapId',
            'twap_id': 'twapId',
            'hfc_node_id': 'hfcNodeId',
            'gli': 'gli',
            'w5gban_line_type': 'w5gbanLineType',
            'gci': 'gci'
        }

        self.n3gpp_tai = n3gpp_tai
        self.n3_iwf_id = n3_iwf_id
        self.ue_ipv4_addr = ue_ipv4_addr
        self.ue_ipv6_addr = ue_ipv6_addr
        self.port_number = port_number
        self.protocol = protocol
        self.tnap_id = tnap_id
        self.twap_id = twap_id
        self.hfc_node_id = hfc_node_id
        self.gli = gli
        self.w5gban_line_type = w5gban_line_type
        self.gci = gci

    @classmethod
    def from_dict(cls, dikt) -> 'N3gaLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The N3gaLocation of this N3gaLocation.  # noqa: E501
        :rtype: N3gaLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def n3gpp_tai(self):
        """Gets the n3gpp_tai of this N3gaLocation.


        :return: The n3gpp_tai of this N3gaLocation.
        :rtype: Tai
        """
        return self._n3gpp_tai

    @n3gpp_tai.setter
    def n3gpp_tai(self, n3gpp_tai):
        """Sets the n3gpp_tai of this N3gaLocation.


        :param n3gpp_tai: The n3gpp_tai of this N3gaLocation.
        :type n3gpp_tai: Tai
        """

        self._n3gpp_tai = n3gpp_tai

    @property
    def n3_iwf_id(self):
        """Gets the n3_iwf_id of this N3gaLocation.

        This IE shall contain the N3IWF identifier received over NGAP and shall be encoded as a  string of hexadecimal characters. Each character in the string shall take a value of \"0\"  to \"9\", \"a\" to \"f\" or \"A\" to \"F\" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the N3IWF ID shall appear first in  the string, and the character representing the 4 least significant bit of the N3IWF ID  shall appear last in the string.    # noqa: E501

        :return: The n3_iwf_id of this N3gaLocation.
        :rtype: str
        """
        return self._n3_iwf_id

    @n3_iwf_id.setter
    def n3_iwf_id(self, n3_iwf_id):
        """Sets the n3_iwf_id of this N3gaLocation.

        This IE shall contain the N3IWF identifier received over NGAP and shall be encoded as a  string of hexadecimal characters. Each character in the string shall take a value of \"0\"  to \"9\", \"a\" to \"f\" or \"A\" to \"F\" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the N3IWF ID shall appear first in  the string, and the character representing the 4 least significant bit of the N3IWF ID  shall appear last in the string.    # noqa: E501

        :param n3_iwf_id: The n3_iwf_id of this N3gaLocation.
        :type n3_iwf_id: str
        """
        if n3_iwf_id is not None and not re.search(r'^[A-Fa-f0-9]+$', n3_iwf_id):  # noqa: E501
            raise ValueError("Invalid value for `n3_iwf_id`, must be a follow pattern or equal to `/^[A-Fa-f0-9]+$/`")  # noqa: E501

        self._n3_iwf_id = n3_iwf_id

    @property
    def ue_ipv4_addr(self):
        """Gets the ue_ipv4_addr of this N3gaLocation.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :return: The ue_ipv4_addr of this N3gaLocation.
        :rtype: str
        """
        return self._ue_ipv4_addr

    @ue_ipv4_addr.setter
    def ue_ipv4_addr(self, ue_ipv4_addr):
        """Sets the ue_ipv4_addr of this N3gaLocation.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :param ue_ipv4_addr: The ue_ipv4_addr of this N3gaLocation.
        :type ue_ipv4_addr: str
        """
        if ue_ipv4_addr is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', ue_ipv4_addr):  # noqa: E501
            raise ValueError("Invalid value for `ue_ipv4_addr`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/`")  # noqa: E501

        self._ue_ipv4_addr = ue_ipv4_addr

    @property
    def ue_ipv6_addr(self):
        """Gets the ue_ipv6_addr of this N3gaLocation.


        :return: The ue_ipv6_addr of this N3gaLocation.
        :rtype: Ipv6Addr
        """
        return self._ue_ipv6_addr

    @ue_ipv6_addr.setter
    def ue_ipv6_addr(self, ue_ipv6_addr):
        """Sets the ue_ipv6_addr of this N3gaLocation.


        :param ue_ipv6_addr: The ue_ipv6_addr of this N3gaLocation.
        :type ue_ipv6_addr: Ipv6Addr
        """

        self._ue_ipv6_addr = ue_ipv6_addr

    @property
    def port_number(self):
        """Gets the port_number of this N3gaLocation.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The port_number of this N3gaLocation.
        :rtype: int
        """
        return self._port_number

    @port_number.setter
    def port_number(self, port_number):
        """Sets the port_number of this N3gaLocation.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param port_number: The port_number of this N3gaLocation.
        :type port_number: int
        """
        if port_number is not None and port_number < 0:  # noqa: E501
            raise ValueError("Invalid value for `port_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port_number = port_number

    @property
    def protocol(self):
        """Gets the protocol of this N3gaLocation.


        :return: The protocol of this N3gaLocation.
        :rtype: TransportProtocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this N3gaLocation.


        :param protocol: The protocol of this N3gaLocation.
        :type protocol: TransportProtocol
        """

        self._protocol = protocol

    @property
    def tnap_id(self):
        """Gets the tnap_id of this N3gaLocation.


        :return: The tnap_id of this N3gaLocation.
        :rtype: TnapId
        """
        return self._tnap_id

    @tnap_id.setter
    def tnap_id(self, tnap_id):
        """Sets the tnap_id of this N3gaLocation.


        :param tnap_id: The tnap_id of this N3gaLocation.
        :type tnap_id: TnapId
        """

        self._tnap_id = tnap_id

    @property
    def twap_id(self):
        """Gets the twap_id of this N3gaLocation.


        :return: The twap_id of this N3gaLocation.
        :rtype: TwapId
        """
        return self._twap_id

    @twap_id.setter
    def twap_id(self, twap_id):
        """Sets the twap_id of this N3gaLocation.


        :param twap_id: The twap_id of this N3gaLocation.
        :type twap_id: TwapId
        """

        self._twap_id = twap_id

    @property
    def hfc_node_id(self):
        """Gets the hfc_node_id of this N3gaLocation.


        :return: The hfc_node_id of this N3gaLocation.
        :rtype: HfcNodeId
        """
        return self._hfc_node_id

    @hfc_node_id.setter
    def hfc_node_id(self, hfc_node_id):
        """Sets the hfc_node_id of this N3gaLocation.


        :param hfc_node_id: The hfc_node_id of this N3gaLocation.
        :type hfc_node_id: HfcNodeId
        """

        self._hfc_node_id = hfc_node_id

    @property
    def gli(self):
        """Gets the gli of this N3gaLocation.

        string with format 'bytes' as defined in OpenAPI  # noqa: E501

        :return: The gli of this N3gaLocation.
        :rtype: str
        """
        return self._gli

    @gli.setter
    def gli(self, gli):
        """Sets the gli of this N3gaLocation.

        string with format 'bytes' as defined in OpenAPI  # noqa: E501

        :param gli: The gli of this N3gaLocation.
        :type gli: str
        """

        self._gli = gli

    @property
    def w5gban_line_type(self):
        """Gets the w5gban_line_type of this N3gaLocation.


        :return: The w5gban_line_type of this N3gaLocation.
        :rtype: LineType
        """
        return self._w5gban_line_type

    @w5gban_line_type.setter
    def w5gban_line_type(self, w5gban_line_type):
        """Sets the w5gban_line_type of this N3gaLocation.


        :param w5gban_line_type: The w5gban_line_type of this N3gaLocation.
        :type w5gban_line_type: LineType
        """

        self._w5gban_line_type = w5gban_line_type

    @property
    def gci(self):
        """Gets the gci of this N3gaLocation.

        Global Cable Identifier uniquely identifying the connection between the 5G-CRG or FN-CRG to the 5GS. See clause 28.15.4 of 3GPP TS 23.003. This shall be encoded as a string per clause 28.15.4 of 3GPP TS 23.003, and compliant with the syntax specified  in clause 2.2  of IETF RFC 7542 for the username part of a NAI. The GCI value is specified in CableLabs WR-TR-5WWC-ARCH.   # noqa: E501

        :return: The gci of this N3gaLocation.
        :rtype: str
        """
        return self._gci

    @gci.setter
    def gci(self, gci):
        """Sets the gci of this N3gaLocation.

        Global Cable Identifier uniquely identifying the connection between the 5G-CRG or FN-CRG to the 5GS. See clause 28.15.4 of 3GPP TS 23.003. This shall be encoded as a string per clause 28.15.4 of 3GPP TS 23.003, and compliant with the syntax specified  in clause 2.2  of IETF RFC 7542 for the username part of a NAI. The GCI value is specified in CableLabs WR-TR-5WWC-ARCH.   # noqa: E501

        :param gci: The gci of this N3gaLocation.
        :type gci: str
        """

        self._gci = gci
