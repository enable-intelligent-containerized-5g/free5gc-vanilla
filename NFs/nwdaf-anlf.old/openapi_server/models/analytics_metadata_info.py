# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.accuracy import Accuracy
from openapi_server.models.dataset_statistical_property import DatasetStatisticalProperty
from openapi_server.models.output_strategy import OutputStrategy
from openapi_server.models.time_window import TimeWindow
from openapi_server import util

from openapi_server.models.accuracy import Accuracy  # noqa: E501
from openapi_server.models.dataset_statistical_property import DatasetStatisticalProperty  # noqa: E501
from openapi_server.models.output_strategy import OutputStrategy  # noqa: E501
from openapi_server.models.time_window import TimeWindow  # noqa: E501

class AnalyticsMetadataInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, num_samples=None, data_window=None, data_stat_props=None, strategy=None, accuracy=None):  # noqa: E501
        """AnalyticsMetadataInfo - a model defined in OpenAPI

        :param num_samples: The num_samples of this AnalyticsMetadataInfo.  # noqa: E501
        :type num_samples: int
        :param data_window: The data_window of this AnalyticsMetadataInfo.  # noqa: E501
        :type data_window: TimeWindow
        :param data_stat_props: The data_stat_props of this AnalyticsMetadataInfo.  # noqa: E501
        :type data_stat_props: List[DatasetStatisticalProperty]
        :param strategy: The strategy of this AnalyticsMetadataInfo.  # noqa: E501
        :type strategy: OutputStrategy
        :param accuracy: The accuracy of this AnalyticsMetadataInfo.  # noqa: E501
        :type accuracy: Accuracy
        """
        self.openapi_types = {
            'num_samples': int,
            'data_window': TimeWindow,
            'data_stat_props': List[DatasetStatisticalProperty],
            'strategy': OutputStrategy,
            'accuracy': Accuracy
        }

        self.attribute_map = {
            'num_samples': 'numSamples',
            'data_window': 'dataWindow',
            'data_stat_props': 'dataStatProps',
            'strategy': 'strategy',
            'accuracy': 'accuracy'
        }

        self.num_samples = num_samples
        self.data_window = data_window
        self.data_stat_props = data_stat_props
        self.strategy = strategy
        self.accuracy = accuracy

    @classmethod
    def from_dict(cls, dikt) -> 'AnalyticsMetadataInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnalyticsMetadataInfo of this AnalyticsMetadataInfo.  # noqa: E501
        :rtype: AnalyticsMetadataInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num_samples(self):
        """Gets the num_samples of this AnalyticsMetadataInfo.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The num_samples of this AnalyticsMetadataInfo.
        :rtype: int
        """
        return self._num_samples

    @num_samples.setter
    def num_samples(self, num_samples):
        """Sets the num_samples of this AnalyticsMetadataInfo.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param num_samples: The num_samples of this AnalyticsMetadataInfo.
        :type num_samples: int
        """
        if num_samples is not None and num_samples < 0:  # noqa: E501
            raise ValueError("Invalid value for `num_samples`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_samples = num_samples

    @property
    def data_window(self):
        """Gets the data_window of this AnalyticsMetadataInfo.


        :return: The data_window of this AnalyticsMetadataInfo.
        :rtype: TimeWindow
        """
        return self._data_window

    @data_window.setter
    def data_window(self, data_window):
        """Sets the data_window of this AnalyticsMetadataInfo.


        :param data_window: The data_window of this AnalyticsMetadataInfo.
        :type data_window: TimeWindow
        """

        self._data_window = data_window

    @property
    def data_stat_props(self):
        """Gets the data_stat_props of this AnalyticsMetadataInfo.


        :return: The data_stat_props of this AnalyticsMetadataInfo.
        :rtype: List[DatasetStatisticalProperty]
        """
        return self._data_stat_props

    @data_stat_props.setter
    def data_stat_props(self, data_stat_props):
        """Sets the data_stat_props of this AnalyticsMetadataInfo.


        :param data_stat_props: The data_stat_props of this AnalyticsMetadataInfo.
        :type data_stat_props: List[DatasetStatisticalProperty]
        """
        if data_stat_props is not None and len(data_stat_props) < 1:
            raise ValueError("Invalid value for `data_stat_props`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._data_stat_props = data_stat_props

    @property
    def strategy(self):
        """Gets the strategy of this AnalyticsMetadataInfo.


        :return: The strategy of this AnalyticsMetadataInfo.
        :rtype: OutputStrategy
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this AnalyticsMetadataInfo.


        :param strategy: The strategy of this AnalyticsMetadataInfo.
        :type strategy: OutputStrategy
        """

        self._strategy = strategy

    @property
    def accuracy(self):
        """Gets the accuracy of this AnalyticsMetadataInfo.


        :return: The accuracy of this AnalyticsMetadataInfo.
        :rtype: Accuracy
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this AnalyticsMetadataInfo.


        :param accuracy: The accuracy of this AnalyticsMetadataInfo.
        :type accuracy: Accuracy
        """

        self._accuracy = accuracy
