# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.event_report_mode import EventReportMode
from openapi_server.models.notification_flag import NotificationFlag
from openapi_server import util

from openapi_server.models.event_report_mode import EventReportMode  # noqa: E501
from openapi_server.models.notification_flag import NotificationFlag  # noqa: E501

class ReportingOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_mode=None, max_num_of_reports=None, expiry=None, sampling_ratio=None, guard_time=None, report_period=None, notif_flag=None):  # noqa: E501
        """ReportingOptions - a model defined in OpenAPI

        :param report_mode: The report_mode of this ReportingOptions.  # noqa: E501
        :type report_mode: EventReportMode
        :param max_num_of_reports: The max_num_of_reports of this ReportingOptions.  # noqa: E501
        :type max_num_of_reports: int
        :param expiry: The expiry of this ReportingOptions.  # noqa: E501
        :type expiry: datetime
        :param sampling_ratio: The sampling_ratio of this ReportingOptions.  # noqa: E501
        :type sampling_ratio: int
        :param guard_time: The guard_time of this ReportingOptions.  # noqa: E501
        :type guard_time: int
        :param report_period: The report_period of this ReportingOptions.  # noqa: E501
        :type report_period: int
        :param notif_flag: The notif_flag of this ReportingOptions.  # noqa: E501
        :type notif_flag: NotificationFlag
        """
        self.openapi_types = {
            'report_mode': EventReportMode,
            'max_num_of_reports': int,
            'expiry': datetime,
            'sampling_ratio': int,
            'guard_time': int,
            'report_period': int,
            'notif_flag': NotificationFlag
        }

        self.attribute_map = {
            'report_mode': 'reportMode',
            'max_num_of_reports': 'maxNumOfReports',
            'expiry': 'expiry',
            'sampling_ratio': 'samplingRatio',
            'guard_time': 'guardTime',
            'report_period': 'reportPeriod',
            'notif_flag': 'notifFlag'
        }

        self.report_mode = report_mode
        self.max_num_of_reports = max_num_of_reports
        self.expiry = expiry
        self.sampling_ratio = sampling_ratio
        self.guard_time = guard_time
        self.report_period = report_period
        self.notif_flag = notif_flag

    @classmethod
    def from_dict(cls, dikt) -> 'ReportingOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReportingOptions of this ReportingOptions.  # noqa: E501
        :rtype: ReportingOptions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_mode(self):
        """Gets the report_mode of this ReportingOptions.


        :return: The report_mode of this ReportingOptions.
        :rtype: EventReportMode
        """
        return self._report_mode

    @report_mode.setter
    def report_mode(self, report_mode):
        """Sets the report_mode of this ReportingOptions.


        :param report_mode: The report_mode of this ReportingOptions.
        :type report_mode: EventReportMode
        """

        self._report_mode = report_mode

    @property
    def max_num_of_reports(self):
        """Gets the max_num_of_reports of this ReportingOptions.


        :return: The max_num_of_reports of this ReportingOptions.
        :rtype: int
        """
        return self._max_num_of_reports

    @max_num_of_reports.setter
    def max_num_of_reports(self, max_num_of_reports):
        """Sets the max_num_of_reports of this ReportingOptions.


        :param max_num_of_reports: The max_num_of_reports of this ReportingOptions.
        :type max_num_of_reports: int
        """

        self._max_num_of_reports = max_num_of_reports

    @property
    def expiry(self):
        """Gets the expiry of this ReportingOptions.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The expiry of this ReportingOptions.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this ReportingOptions.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param expiry: The expiry of this ReportingOptions.
        :type expiry: datetime
        """

        self._expiry = expiry

    @property
    def sampling_ratio(self):
        """Gets the sampling_ratio of this ReportingOptions.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :return: The sampling_ratio of this ReportingOptions.
        :rtype: int
        """
        return self._sampling_ratio

    @sampling_ratio.setter
    def sampling_ratio(self, sampling_ratio):
        """Sets the sampling_ratio of this ReportingOptions.

        Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.    # noqa: E501

        :param sampling_ratio: The sampling_ratio of this ReportingOptions.
        :type sampling_ratio: int
        """
        if sampling_ratio is not None and sampling_ratio > 100:  # noqa: E501
            raise ValueError("Invalid value for `sampling_ratio`, must be a value less than or equal to `100`")  # noqa: E501
        if sampling_ratio is not None and sampling_ratio < 1:  # noqa: E501
            raise ValueError("Invalid value for `sampling_ratio`, must be a value greater than or equal to `1`")  # noqa: E501

        self._sampling_ratio = sampling_ratio

    @property
    def guard_time(self):
        """Gets the guard_time of this ReportingOptions.

        indicating a time in seconds.  # noqa: E501

        :return: The guard_time of this ReportingOptions.
        :rtype: int
        """
        return self._guard_time

    @guard_time.setter
    def guard_time(self, guard_time):
        """Sets the guard_time of this ReportingOptions.

        indicating a time in seconds.  # noqa: E501

        :param guard_time: The guard_time of this ReportingOptions.
        :type guard_time: int
        """

        self._guard_time = guard_time

    @property
    def report_period(self):
        """Gets the report_period of this ReportingOptions.

        indicating a time in seconds.  # noqa: E501

        :return: The report_period of this ReportingOptions.
        :rtype: int
        """
        return self._report_period

    @report_period.setter
    def report_period(self, report_period):
        """Sets the report_period of this ReportingOptions.

        indicating a time in seconds.  # noqa: E501

        :param report_period: The report_period of this ReportingOptions.
        :type report_period: int
        """

        self._report_period = report_period

    @property
    def notif_flag(self):
        """Gets the notif_flag of this ReportingOptions.


        :return: The notif_flag of this ReportingOptions.
        :rtype: NotificationFlag
        """
        return self._notif_flag

    @notif_flag.setter
    def notif_flag(self, notif_flag):
        """Sets the notif_flag of this ReportingOptions.


        :param notif_flag: The notif_flag of this ReportingOptions.
        :type notif_flag: NotificationFlag
        """

        self._notif_flag = notif_flag
