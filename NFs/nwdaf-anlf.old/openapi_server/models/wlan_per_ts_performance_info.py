# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.traffic_information import TrafficInformation
from openapi_server import util

from openapi_server.models.traffic_information import TrafficInformation  # noqa: E501

class WlanPerTsPerformanceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ts_start=None, ts_duration=None, rssi=None, rtt=None, traffic_info=None, number_of_ues=None, confidence=None):  # noqa: E501
        """WlanPerTsPerformanceInfo - a model defined in OpenAPI

        :param ts_start: The ts_start of this WlanPerTsPerformanceInfo.  # noqa: E501
        :type ts_start: datetime
        :param ts_duration: The ts_duration of this WlanPerTsPerformanceInfo.  # noqa: E501
        :type ts_duration: int
        :param rssi: The rssi of this WlanPerTsPerformanceInfo.  # noqa: E501
        :type rssi: int
        :param rtt: The rtt of this WlanPerTsPerformanceInfo.  # noqa: E501
        :type rtt: int
        :param traffic_info: The traffic_info of this WlanPerTsPerformanceInfo.  # noqa: E501
        :type traffic_info: TrafficInformation
        :param number_of_ues: The number_of_ues of this WlanPerTsPerformanceInfo.  # noqa: E501
        :type number_of_ues: int
        :param confidence: The confidence of this WlanPerTsPerformanceInfo.  # noqa: E501
        :type confidence: int
        """
        self.openapi_types = {
            'ts_start': datetime,
            'ts_duration': int,
            'rssi': int,
            'rtt': int,
            'traffic_info': TrafficInformation,
            'number_of_ues': int,
            'confidence': int
        }

        self.attribute_map = {
            'ts_start': 'tsStart',
            'ts_duration': 'tsDuration',
            'rssi': 'rssi',
            'rtt': 'rtt',
            'traffic_info': 'trafficInfo',
            'number_of_ues': 'numberOfUes',
            'confidence': 'confidence'
        }

        self.ts_start = ts_start
        self.ts_duration = ts_duration
        self.rssi = rssi
        self.rtt = rtt
        self.traffic_info = traffic_info
        self.number_of_ues = number_of_ues
        self.confidence = confidence

    @classmethod
    def from_dict(cls, dikt) -> 'WlanPerTsPerformanceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WlanPerTsPerformanceInfo of this WlanPerTsPerformanceInfo.  # noqa: E501
        :rtype: WlanPerTsPerformanceInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ts_start(self):
        """Gets the ts_start of this WlanPerTsPerformanceInfo.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The ts_start of this WlanPerTsPerformanceInfo.
        :rtype: datetime
        """
        return self._ts_start

    @ts_start.setter
    def ts_start(self, ts_start):
        """Sets the ts_start of this WlanPerTsPerformanceInfo.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param ts_start: The ts_start of this WlanPerTsPerformanceInfo.
        :type ts_start: datetime
        """
        if ts_start is None:
            raise ValueError("Invalid value for `ts_start`, must not be `None`")  # noqa: E501

        self._ts_start = ts_start

    @property
    def ts_duration(self):
        """Gets the ts_duration of this WlanPerTsPerformanceInfo.

        indicating a time in seconds.  # noqa: E501

        :return: The ts_duration of this WlanPerTsPerformanceInfo.
        :rtype: int
        """
        return self._ts_duration

    @ts_duration.setter
    def ts_duration(self, ts_duration):
        """Sets the ts_duration of this WlanPerTsPerformanceInfo.

        indicating a time in seconds.  # noqa: E501

        :param ts_duration: The ts_duration of this WlanPerTsPerformanceInfo.
        :type ts_duration: int
        """
        if ts_duration is None:
            raise ValueError("Invalid value for `ts_duration`, must not be `None`")  # noqa: E501

        self._ts_duration = ts_duration

    @property
    def rssi(self):
        """Gets the rssi of this WlanPerTsPerformanceInfo.


        :return: The rssi of this WlanPerTsPerformanceInfo.
        :rtype: int
        """
        return self._rssi

    @rssi.setter
    def rssi(self, rssi):
        """Sets the rssi of this WlanPerTsPerformanceInfo.


        :param rssi: The rssi of this WlanPerTsPerformanceInfo.
        :type rssi: int
        """

        self._rssi = rssi

    @property
    def rtt(self):
        """Gets the rtt of this WlanPerTsPerformanceInfo.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The rtt of this WlanPerTsPerformanceInfo.
        :rtype: int
        """
        return self._rtt

    @rtt.setter
    def rtt(self, rtt):
        """Sets the rtt of this WlanPerTsPerformanceInfo.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param rtt: The rtt of this WlanPerTsPerformanceInfo.
        :type rtt: int
        """
        if rtt is not None and rtt < 0:  # noqa: E501
            raise ValueError("Invalid value for `rtt`, must be a value greater than or equal to `0`")  # noqa: E501

        self._rtt = rtt

    @property
    def traffic_info(self):
        """Gets the traffic_info of this WlanPerTsPerformanceInfo.


        :return: The traffic_info of this WlanPerTsPerformanceInfo.
        :rtype: TrafficInformation
        """
        return self._traffic_info

    @traffic_info.setter
    def traffic_info(self, traffic_info):
        """Sets the traffic_info of this WlanPerTsPerformanceInfo.


        :param traffic_info: The traffic_info of this WlanPerTsPerformanceInfo.
        :type traffic_info: TrafficInformation
        """

        self._traffic_info = traffic_info

    @property
    def number_of_ues(self):
        """Gets the number_of_ues of this WlanPerTsPerformanceInfo.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The number_of_ues of this WlanPerTsPerformanceInfo.
        :rtype: int
        """
        return self._number_of_ues

    @number_of_ues.setter
    def number_of_ues(self, number_of_ues):
        """Sets the number_of_ues of this WlanPerTsPerformanceInfo.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param number_of_ues: The number_of_ues of this WlanPerTsPerformanceInfo.
        :type number_of_ues: int
        """
        if number_of_ues is not None and number_of_ues < 0:  # noqa: E501
            raise ValueError("Invalid value for `number_of_ues`, must be a value greater than or equal to `0`")  # noqa: E501

        self._number_of_ues = number_of_ues

    @property
    def confidence(self):
        """Gets the confidence of this WlanPerTsPerformanceInfo.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The confidence of this WlanPerTsPerformanceInfo.
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this WlanPerTsPerformanceInfo.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param confidence: The confidence of this WlanPerTsPerformanceInfo.
        :type confidence: int
        """
        if confidence is not None and confidence < 0:  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")  # noqa: E501

        self._confidence = confidence
