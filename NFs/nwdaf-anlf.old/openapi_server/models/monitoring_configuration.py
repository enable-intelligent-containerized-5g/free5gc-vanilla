# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.association_type import AssociationType
from openapi_server.models.datalink_reporting_configuration import DatalinkReportingConfiguration
from openapi_server.models.event_type import EventType
from openapi_server.models.location_reporting_configuration import LocationReportingConfiguration
from openapi_server.models.loss_connectivity_cfg import LossConnectivityCfg
from openapi_server.models.pdu_session_status_cfg import PduSessionStatusCfg
from openapi_server.models.reachability_for_data_configuration import ReachabilityForDataConfiguration
from openapi_server.models.reachability_for_sms_configuration import ReachabilityForSmsConfiguration
from openapi_server import util

from openapi_server.models.association_type import AssociationType  # noqa: E501
from openapi_server.models.datalink_reporting_configuration import DatalinkReportingConfiguration  # noqa: E501
from openapi_server.models.event_type import EventType  # noqa: E501
from openapi_server.models.location_reporting_configuration import LocationReportingConfiguration  # noqa: E501
from openapi_server.models.loss_connectivity_cfg import LossConnectivityCfg  # noqa: E501
from openapi_server.models.pdu_session_status_cfg import PduSessionStatusCfg  # noqa: E501
from openapi_server.models.reachability_for_data_configuration import ReachabilityForDataConfiguration  # noqa: E501
from openapi_server.models.reachability_for_sms_configuration import ReachabilityForSmsConfiguration  # noqa: E501

class MonitoringConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_type=None, immediate_flag=None, location_reporting_configuration=None, association_type=None, datalink_report_cfg=None, loss_connectivity_cfg=None, maximum_latency=None, maximum_response_time=None, suggested_packet_num_dl=None, pdu_session_status_cfg=None, reachability_for_sms_cfg=None, mtc_provider_information=None, af_id=None, reachability_for_data_cfg=None, idle_status_ind=False):  # noqa: E501
        """MonitoringConfiguration - a model defined in OpenAPI

        :param event_type: The event_type of this MonitoringConfiguration.  # noqa: E501
        :type event_type: EventType
        :param immediate_flag: The immediate_flag of this MonitoringConfiguration.  # noqa: E501
        :type immediate_flag: bool
        :param location_reporting_configuration: The location_reporting_configuration of this MonitoringConfiguration.  # noqa: E501
        :type location_reporting_configuration: LocationReportingConfiguration
        :param association_type: The association_type of this MonitoringConfiguration.  # noqa: E501
        :type association_type: AssociationType
        :param datalink_report_cfg: The datalink_report_cfg of this MonitoringConfiguration.  # noqa: E501
        :type datalink_report_cfg: DatalinkReportingConfiguration
        :param loss_connectivity_cfg: The loss_connectivity_cfg of this MonitoringConfiguration.  # noqa: E501
        :type loss_connectivity_cfg: LossConnectivityCfg
        :param maximum_latency: The maximum_latency of this MonitoringConfiguration.  # noqa: E501
        :type maximum_latency: int
        :param maximum_response_time: The maximum_response_time of this MonitoringConfiguration.  # noqa: E501
        :type maximum_response_time: int
        :param suggested_packet_num_dl: The suggested_packet_num_dl of this MonitoringConfiguration.  # noqa: E501
        :type suggested_packet_num_dl: int
        :param pdu_session_status_cfg: The pdu_session_status_cfg of this MonitoringConfiguration.  # noqa: E501
        :type pdu_session_status_cfg: PduSessionStatusCfg
        :param reachability_for_sms_cfg: The reachability_for_sms_cfg of this MonitoringConfiguration.  # noqa: E501
        :type reachability_for_sms_cfg: ReachabilityForSmsConfiguration
        :param mtc_provider_information: The mtc_provider_information of this MonitoringConfiguration.  # noqa: E501
        :type mtc_provider_information: str
        :param af_id: The af_id of this MonitoringConfiguration.  # noqa: E501
        :type af_id: str
        :param reachability_for_data_cfg: The reachability_for_data_cfg of this MonitoringConfiguration.  # noqa: E501
        :type reachability_for_data_cfg: ReachabilityForDataConfiguration
        :param idle_status_ind: The idle_status_ind of this MonitoringConfiguration.  # noqa: E501
        :type idle_status_ind: bool
        """
        self.openapi_types = {
            'event_type': EventType,
            'immediate_flag': bool,
            'location_reporting_configuration': LocationReportingConfiguration,
            'association_type': AssociationType,
            'datalink_report_cfg': DatalinkReportingConfiguration,
            'loss_connectivity_cfg': LossConnectivityCfg,
            'maximum_latency': int,
            'maximum_response_time': int,
            'suggested_packet_num_dl': int,
            'pdu_session_status_cfg': PduSessionStatusCfg,
            'reachability_for_sms_cfg': ReachabilityForSmsConfiguration,
            'mtc_provider_information': str,
            'af_id': str,
            'reachability_for_data_cfg': ReachabilityForDataConfiguration,
            'idle_status_ind': bool
        }

        self.attribute_map = {
            'event_type': 'eventType',
            'immediate_flag': 'immediateFlag',
            'location_reporting_configuration': 'locationReportingConfiguration',
            'association_type': 'associationType',
            'datalink_report_cfg': 'datalinkReportCfg',
            'loss_connectivity_cfg': 'lossConnectivityCfg',
            'maximum_latency': 'maximumLatency',
            'maximum_response_time': 'maximumResponseTime',
            'suggested_packet_num_dl': 'suggestedPacketNumDl',
            'pdu_session_status_cfg': 'pduSessionStatusCfg',
            'reachability_for_sms_cfg': 'reachabilityForSmsCfg',
            'mtc_provider_information': 'mtcProviderInformation',
            'af_id': 'afId',
            'reachability_for_data_cfg': 'reachabilityForDataCfg',
            'idle_status_ind': 'idleStatusInd'
        }

        self.event_type = event_type
        self.immediate_flag = immediate_flag
        self.location_reporting_configuration = location_reporting_configuration
        self.association_type = association_type
        self.datalink_report_cfg = datalink_report_cfg
        self.loss_connectivity_cfg = loss_connectivity_cfg
        self.maximum_latency = maximum_latency
        self.maximum_response_time = maximum_response_time
        self.suggested_packet_num_dl = suggested_packet_num_dl
        self.pdu_session_status_cfg = pdu_session_status_cfg
        self.reachability_for_sms_cfg = reachability_for_sms_cfg
        self.mtc_provider_information = mtc_provider_information
        self.af_id = af_id
        self.reachability_for_data_cfg = reachability_for_data_cfg
        self.idle_status_ind = idle_status_ind

    @classmethod
    def from_dict(cls, dikt) -> 'MonitoringConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MonitoringConfiguration of this MonitoringConfiguration.  # noqa: E501
        :rtype: MonitoringConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type(self):
        """Gets the event_type of this MonitoringConfiguration.


        :return: The event_type of this MonitoringConfiguration.
        :rtype: EventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this MonitoringConfiguration.


        :param event_type: The event_type of this MonitoringConfiguration.
        :type event_type: EventType
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501

        self._event_type = event_type

    @property
    def immediate_flag(self):
        """Gets the immediate_flag of this MonitoringConfiguration.


        :return: The immediate_flag of this MonitoringConfiguration.
        :rtype: bool
        """
        return self._immediate_flag

    @immediate_flag.setter
    def immediate_flag(self, immediate_flag):
        """Sets the immediate_flag of this MonitoringConfiguration.


        :param immediate_flag: The immediate_flag of this MonitoringConfiguration.
        :type immediate_flag: bool
        """

        self._immediate_flag = immediate_flag

    @property
    def location_reporting_configuration(self):
        """Gets the location_reporting_configuration of this MonitoringConfiguration.


        :return: The location_reporting_configuration of this MonitoringConfiguration.
        :rtype: LocationReportingConfiguration
        """
        return self._location_reporting_configuration

    @location_reporting_configuration.setter
    def location_reporting_configuration(self, location_reporting_configuration):
        """Sets the location_reporting_configuration of this MonitoringConfiguration.


        :param location_reporting_configuration: The location_reporting_configuration of this MonitoringConfiguration.
        :type location_reporting_configuration: LocationReportingConfiguration
        """

        self._location_reporting_configuration = location_reporting_configuration

    @property
    def association_type(self):
        """Gets the association_type of this MonitoringConfiguration.


        :return: The association_type of this MonitoringConfiguration.
        :rtype: AssociationType
        """
        return self._association_type

    @association_type.setter
    def association_type(self, association_type):
        """Sets the association_type of this MonitoringConfiguration.


        :param association_type: The association_type of this MonitoringConfiguration.
        :type association_type: AssociationType
        """

        self._association_type = association_type

    @property
    def datalink_report_cfg(self):
        """Gets the datalink_report_cfg of this MonitoringConfiguration.


        :return: The datalink_report_cfg of this MonitoringConfiguration.
        :rtype: DatalinkReportingConfiguration
        """
        return self._datalink_report_cfg

    @datalink_report_cfg.setter
    def datalink_report_cfg(self, datalink_report_cfg):
        """Sets the datalink_report_cfg of this MonitoringConfiguration.


        :param datalink_report_cfg: The datalink_report_cfg of this MonitoringConfiguration.
        :type datalink_report_cfg: DatalinkReportingConfiguration
        """

        self._datalink_report_cfg = datalink_report_cfg

    @property
    def loss_connectivity_cfg(self):
        """Gets the loss_connectivity_cfg of this MonitoringConfiguration.


        :return: The loss_connectivity_cfg of this MonitoringConfiguration.
        :rtype: LossConnectivityCfg
        """
        return self._loss_connectivity_cfg

    @loss_connectivity_cfg.setter
    def loss_connectivity_cfg(self, loss_connectivity_cfg):
        """Sets the loss_connectivity_cfg of this MonitoringConfiguration.


        :param loss_connectivity_cfg: The loss_connectivity_cfg of this MonitoringConfiguration.
        :type loss_connectivity_cfg: LossConnectivityCfg
        """

        self._loss_connectivity_cfg = loss_connectivity_cfg

    @property
    def maximum_latency(self):
        """Gets the maximum_latency of this MonitoringConfiguration.

        indicating a time in seconds.  # noqa: E501

        :return: The maximum_latency of this MonitoringConfiguration.
        :rtype: int
        """
        return self._maximum_latency

    @maximum_latency.setter
    def maximum_latency(self, maximum_latency):
        """Sets the maximum_latency of this MonitoringConfiguration.

        indicating a time in seconds.  # noqa: E501

        :param maximum_latency: The maximum_latency of this MonitoringConfiguration.
        :type maximum_latency: int
        """

        self._maximum_latency = maximum_latency

    @property
    def maximum_response_time(self):
        """Gets the maximum_response_time of this MonitoringConfiguration.

        indicating a time in seconds.  # noqa: E501

        :return: The maximum_response_time of this MonitoringConfiguration.
        :rtype: int
        """
        return self._maximum_response_time

    @maximum_response_time.setter
    def maximum_response_time(self, maximum_response_time):
        """Sets the maximum_response_time of this MonitoringConfiguration.

        indicating a time in seconds.  # noqa: E501

        :param maximum_response_time: The maximum_response_time of this MonitoringConfiguration.
        :type maximum_response_time: int
        """

        self._maximum_response_time = maximum_response_time

    @property
    def suggested_packet_num_dl(self):
        """Gets the suggested_packet_num_dl of this MonitoringConfiguration.


        :return: The suggested_packet_num_dl of this MonitoringConfiguration.
        :rtype: int
        """
        return self._suggested_packet_num_dl

    @suggested_packet_num_dl.setter
    def suggested_packet_num_dl(self, suggested_packet_num_dl):
        """Sets the suggested_packet_num_dl of this MonitoringConfiguration.


        :param suggested_packet_num_dl: The suggested_packet_num_dl of this MonitoringConfiguration.
        :type suggested_packet_num_dl: int
        """
        if suggested_packet_num_dl is not None and suggested_packet_num_dl < 1:  # noqa: E501
            raise ValueError("Invalid value for `suggested_packet_num_dl`, must be a value greater than or equal to `1`")  # noqa: E501

        self._suggested_packet_num_dl = suggested_packet_num_dl

    @property
    def pdu_session_status_cfg(self):
        """Gets the pdu_session_status_cfg of this MonitoringConfiguration.


        :return: The pdu_session_status_cfg of this MonitoringConfiguration.
        :rtype: PduSessionStatusCfg
        """
        return self._pdu_session_status_cfg

    @pdu_session_status_cfg.setter
    def pdu_session_status_cfg(self, pdu_session_status_cfg):
        """Sets the pdu_session_status_cfg of this MonitoringConfiguration.


        :param pdu_session_status_cfg: The pdu_session_status_cfg of this MonitoringConfiguration.
        :type pdu_session_status_cfg: PduSessionStatusCfg
        """

        self._pdu_session_status_cfg = pdu_session_status_cfg

    @property
    def reachability_for_sms_cfg(self):
        """Gets the reachability_for_sms_cfg of this MonitoringConfiguration.


        :return: The reachability_for_sms_cfg of this MonitoringConfiguration.
        :rtype: ReachabilityForSmsConfiguration
        """
        return self._reachability_for_sms_cfg

    @reachability_for_sms_cfg.setter
    def reachability_for_sms_cfg(self, reachability_for_sms_cfg):
        """Sets the reachability_for_sms_cfg of this MonitoringConfiguration.


        :param reachability_for_sms_cfg: The reachability_for_sms_cfg of this MonitoringConfiguration.
        :type reachability_for_sms_cfg: ReachabilityForSmsConfiguration
        """

        self._reachability_for_sms_cfg = reachability_for_sms_cfg

    @property
    def mtc_provider_information(self):
        """Gets the mtc_provider_information of this MonitoringConfiguration.

        String uniquely identifying MTC provider information.  # noqa: E501

        :return: The mtc_provider_information of this MonitoringConfiguration.
        :rtype: str
        """
        return self._mtc_provider_information

    @mtc_provider_information.setter
    def mtc_provider_information(self, mtc_provider_information):
        """Sets the mtc_provider_information of this MonitoringConfiguration.

        String uniquely identifying MTC provider information.  # noqa: E501

        :param mtc_provider_information: The mtc_provider_information of this MonitoringConfiguration.
        :type mtc_provider_information: str
        """

        self._mtc_provider_information = mtc_provider_information

    @property
    def af_id(self):
        """Gets the af_id of this MonitoringConfiguration.


        :return: The af_id of this MonitoringConfiguration.
        :rtype: str
        """
        return self._af_id

    @af_id.setter
    def af_id(self, af_id):
        """Sets the af_id of this MonitoringConfiguration.


        :param af_id: The af_id of this MonitoringConfiguration.
        :type af_id: str
        """

        self._af_id = af_id

    @property
    def reachability_for_data_cfg(self):
        """Gets the reachability_for_data_cfg of this MonitoringConfiguration.


        :return: The reachability_for_data_cfg of this MonitoringConfiguration.
        :rtype: ReachabilityForDataConfiguration
        """
        return self._reachability_for_data_cfg

    @reachability_for_data_cfg.setter
    def reachability_for_data_cfg(self, reachability_for_data_cfg):
        """Sets the reachability_for_data_cfg of this MonitoringConfiguration.


        :param reachability_for_data_cfg: The reachability_for_data_cfg of this MonitoringConfiguration.
        :type reachability_for_data_cfg: ReachabilityForDataConfiguration
        """

        self._reachability_for_data_cfg = reachability_for_data_cfg

    @property
    def idle_status_ind(self):
        """Gets the idle_status_ind of this MonitoringConfiguration.


        :return: The idle_status_ind of this MonitoringConfiguration.
        :rtype: bool
        """
        return self._idle_status_ind

    @idle_status_ind.setter
    def idle_status_ind(self, idle_status_ind):
        """Sets the idle_status_ind of this MonitoringConfiguration.


        :param idle_status_ind: The idle_status_ind of this MonitoringConfiguration.
        :type idle_status_ind: bool
        """

        self._idle_status_ind = idle_status_ind
