# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.civic_address import CivicAddress
from openapi_server.models.geographic_area import GeographicArea
from openapi_server.models.network_area_info1 import NetworkAreaInfo1
from openapi_server.models.umt_time import UmtTime
from openapi_server import util

from openapi_server.models.civic_address import CivicAddress  # noqa: E501
from openapi_server.models.geographic_area import GeographicArea  # noqa: E501
from openapi_server.models.network_area_info1 import NetworkAreaInfo1  # noqa: E501
from openapi_server.models.umt_time import UmtTime  # noqa: E501

class LocationArea(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geographic_areas=None, civic_addresses=None, nw_area_info=None, umt_time=None):  # noqa: E501
        """LocationArea - a model defined in OpenAPI

        :param geographic_areas: The geographic_areas of this LocationArea.  # noqa: E501
        :type geographic_areas: List[GeographicArea]
        :param civic_addresses: The civic_addresses of this LocationArea.  # noqa: E501
        :type civic_addresses: List[CivicAddress]
        :param nw_area_info: The nw_area_info of this LocationArea.  # noqa: E501
        :type nw_area_info: NetworkAreaInfo1
        :param umt_time: The umt_time of this LocationArea.  # noqa: E501
        :type umt_time: UmtTime
        """
        self.openapi_types = {
            'geographic_areas': List[GeographicArea],
            'civic_addresses': List[CivicAddress],
            'nw_area_info': NetworkAreaInfo1,
            'umt_time': UmtTime
        }

        self.attribute_map = {
            'geographic_areas': 'geographicAreas',
            'civic_addresses': 'civicAddresses',
            'nw_area_info': 'nwAreaInfo',
            'umt_time': 'umtTime'
        }

        self.geographic_areas = geographic_areas
        self.civic_addresses = civic_addresses
        self.nw_area_info = nw_area_info
        self.umt_time = umt_time

    @classmethod
    def from_dict(cls, dikt) -> 'LocationArea':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LocationArea of this LocationArea.  # noqa: E501
        :rtype: LocationArea
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geographic_areas(self):
        """Gets the geographic_areas of this LocationArea.

        Identifies a list of geographic area of the user where the UE is located.  # noqa: E501

        :return: The geographic_areas of this LocationArea.
        :rtype: List[GeographicArea]
        """
        return self._geographic_areas

    @geographic_areas.setter
    def geographic_areas(self, geographic_areas):
        """Sets the geographic_areas of this LocationArea.

        Identifies a list of geographic area of the user where the UE is located.  # noqa: E501

        :param geographic_areas: The geographic_areas of this LocationArea.
        :type geographic_areas: List[GeographicArea]
        """
        if geographic_areas is not None and len(geographic_areas) < 0:
            raise ValueError("Invalid value for `geographic_areas`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._geographic_areas = geographic_areas

    @property
    def civic_addresses(self):
        """Gets the civic_addresses of this LocationArea.

        Identifies a list of civic addresses of the user where the UE is located.  # noqa: E501

        :return: The civic_addresses of this LocationArea.
        :rtype: List[CivicAddress]
        """
        return self._civic_addresses

    @civic_addresses.setter
    def civic_addresses(self, civic_addresses):
        """Sets the civic_addresses of this LocationArea.

        Identifies a list of civic addresses of the user where the UE is located.  # noqa: E501

        :param civic_addresses: The civic_addresses of this LocationArea.
        :type civic_addresses: List[CivicAddress]
        """
        if civic_addresses is not None and len(civic_addresses) < 0:
            raise ValueError("Invalid value for `civic_addresses`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._civic_addresses = civic_addresses

    @property
    def nw_area_info(self):
        """Gets the nw_area_info of this LocationArea.


        :return: The nw_area_info of this LocationArea.
        :rtype: NetworkAreaInfo1
        """
        return self._nw_area_info

    @nw_area_info.setter
    def nw_area_info(self, nw_area_info):
        """Sets the nw_area_info of this LocationArea.


        :param nw_area_info: The nw_area_info of this LocationArea.
        :type nw_area_info: NetworkAreaInfo1
        """

        self._nw_area_info = nw_area_info

    @property
    def umt_time(self):
        """Gets the umt_time of this LocationArea.


        :return: The umt_time of this LocationArea.
        :rtype: UmtTime
        """
        return self._umt_time

    @umt_time.setter
    def umt_time(self, umt_time):
        """Sets the umt_time of this LocationArea.


        :param umt_time: The umt_time of this LocationArea.
        :type umt_time: UmtTime
        """

        self._umt_time = umt_time
