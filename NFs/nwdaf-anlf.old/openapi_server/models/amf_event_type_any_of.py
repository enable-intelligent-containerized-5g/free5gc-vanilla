# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AmfEventTypeAnyOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    LOCATION_REPORT = "LOCATION_REPORT"
    PRESENCE_IN_AOI_REPORT = "PRESENCE_IN_AOI_REPORT"
    TIMEZONE_REPORT = "TIMEZONE_REPORT"
    ACCESS_TYPE_REPORT = "ACCESS_TYPE_REPORT"
    REGISTRATION_STATE_REPORT = "REGISTRATION_STATE_REPORT"
    CONNECTIVITY_STATE_REPORT = "CONNECTIVITY_STATE_REPORT"
    REACHABILITY_REPORT = "REACHABILITY_REPORT"
    COMMUNICATION_FAILURE_REPORT = "COMMUNICATION_FAILURE_REPORT"
    UES_IN_AREA_REPORT = "UES_IN_AREA_REPORT"
    SUBSCRIPTION_ID_CHANGE = "SUBSCRIPTION_ID_CHANGE"
    SUBSCRIPTION_ID_ADDITION = "SUBSCRIPTION_ID_ADDITION"
    LOSS_OF_CONNECTIVITY = "LOSS_OF_CONNECTIVITY"
    _5GS_USER_STATE_REPORT = "5GS_USER_STATE_REPORT"
    AVAILABILITY_AFTER_DDN_FAILURE = "AVAILABILITY_AFTER_DDN_FAILURE"
    TYPE_ALLOCATION_CODE_REPORT = "TYPE_ALLOCATION_CODE_REPORT"
    FREQUENT_MOBILITY_REGISTRATION_REPORT = "FREQUENT_MOBILITY_REGISTRATION_REPORT"
    SNSSAI_TA_MAPPING_REPORT = "SNSSAI_TA_MAPPING_REPORT"
    UE_LOCATION_TRENDS = "UE_LOCATION_TRENDS"
    UE_ACCESS_BEHAVIOR_TRENDS = "UE_ACCESS_BEHAVIOR_TRENDS"
    UE_MM_TRANSACTION_REPORT = "UE_MM_TRANSACTION_REPORT"
    def __init__(self):  # noqa: E501
        """AmfEventTypeAnyOf - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt) -> 'AmfEventTypeAnyOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AmfEventType_anyOf of this AmfEventTypeAnyOf.  # noqa: E501
        :rtype: AmfEventTypeAnyOf
        """
        return util.deserialize_model(dikt, cls)
