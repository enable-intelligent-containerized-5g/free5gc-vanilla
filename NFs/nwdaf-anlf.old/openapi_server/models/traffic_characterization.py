# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ip_eth_flow_description import IpEthFlowDescription
from openapi_server.models.snssai import Snssai
from openapi_server import util

from openapi_server.models.ip_eth_flow_description import IpEthFlowDescription  # noqa: E501
from openapi_server.models.snssai import Snssai  # noqa: E501

class TrafficCharacterization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dnn=None, snssai=None, app_id=None, f_descs=None, ul_vol=None, ul_vol_variance=None, dl_vol=None, dl_vol_variance=None):  # noqa: E501
        """TrafficCharacterization - a model defined in OpenAPI

        :param dnn: The dnn of this TrafficCharacterization.  # noqa: E501
        :type dnn: str
        :param snssai: The snssai of this TrafficCharacterization.  # noqa: E501
        :type snssai: Snssai
        :param app_id: The app_id of this TrafficCharacterization.  # noqa: E501
        :type app_id: str
        :param f_descs: The f_descs of this TrafficCharacterization.  # noqa: E501
        :type f_descs: List[IpEthFlowDescription]
        :param ul_vol: The ul_vol of this TrafficCharacterization.  # noqa: E501
        :type ul_vol: int
        :param ul_vol_variance: The ul_vol_variance of this TrafficCharacterization.  # noqa: E501
        :type ul_vol_variance: float
        :param dl_vol: The dl_vol of this TrafficCharacterization.  # noqa: E501
        :type dl_vol: int
        :param dl_vol_variance: The dl_vol_variance of this TrafficCharacterization.  # noqa: E501
        :type dl_vol_variance: float
        """
        self.openapi_types = {
            'dnn': str,
            'snssai': Snssai,
            'app_id': str,
            'f_descs': List[IpEthFlowDescription],
            'ul_vol': int,
            'ul_vol_variance': float,
            'dl_vol': int,
            'dl_vol_variance': float
        }

        self.attribute_map = {
            'dnn': 'dnn',
            'snssai': 'snssai',
            'app_id': 'appId',
            'f_descs': 'fDescs',
            'ul_vol': 'ulVol',
            'ul_vol_variance': 'ulVolVariance',
            'dl_vol': 'dlVol',
            'dl_vol_variance': 'dlVolVariance'
        }

        self.dnn = dnn
        self.snssai = snssai
        self.app_id = app_id
        self.f_descs = f_descs
        self.ul_vol = ul_vol
        self.ul_vol_variance = ul_vol_variance
        self.dl_vol = dl_vol
        self.dl_vol_variance = dl_vol_variance

    @classmethod
    def from_dict(cls, dikt) -> 'TrafficCharacterization':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TrafficCharacterization of this TrafficCharacterization.  # noqa: E501
        :rtype: TrafficCharacterization
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dnn(self):
        """Gets the dnn of this TrafficCharacterization.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :return: The dnn of this TrafficCharacterization.
        :rtype: str
        """
        return self._dnn

    @dnn.setter
    def dnn(self, dnn):
        """Sets the dnn of this TrafficCharacterization.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :param dnn: The dnn of this TrafficCharacterization.
        :type dnn: str
        """

        self._dnn = dnn

    @property
    def snssai(self):
        """Gets the snssai of this TrafficCharacterization.


        :return: The snssai of this TrafficCharacterization.
        :rtype: Snssai
        """
        return self._snssai

    @snssai.setter
    def snssai(self, snssai):
        """Sets the snssai of this TrafficCharacterization.


        :param snssai: The snssai of this TrafficCharacterization.
        :type snssai: Snssai
        """

        self._snssai = snssai

    @property
    def app_id(self):
        """Gets the app_id of this TrafficCharacterization.

        String providing an application identifier.  # noqa: E501

        :return: The app_id of this TrafficCharacterization.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this TrafficCharacterization.

        String providing an application identifier.  # noqa: E501

        :param app_id: The app_id of this TrafficCharacterization.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def f_descs(self):
        """Gets the f_descs of this TrafficCharacterization.


        :return: The f_descs of this TrafficCharacterization.
        :rtype: List[IpEthFlowDescription]
        """
        return self._f_descs

    @f_descs.setter
    def f_descs(self, f_descs):
        """Sets the f_descs of this TrafficCharacterization.


        :param f_descs: The f_descs of this TrafficCharacterization.
        :type f_descs: List[IpEthFlowDescription]
        """
        if f_descs is not None and len(f_descs) > 2:
            raise ValueError("Invalid value for `f_descs`, number of items must be less than or equal to `2`")  # noqa: E501
        if f_descs is not None and len(f_descs) < 1:
            raise ValueError("Invalid value for `f_descs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._f_descs = f_descs

    @property
    def ul_vol(self):
        """Gets the ul_vol of this TrafficCharacterization.

        Unsigned integer identifying a volume in units of bytes.  # noqa: E501

        :return: The ul_vol of this TrafficCharacterization.
        :rtype: int
        """
        return self._ul_vol

    @ul_vol.setter
    def ul_vol(self, ul_vol):
        """Sets the ul_vol of this TrafficCharacterization.

        Unsigned integer identifying a volume in units of bytes.  # noqa: E501

        :param ul_vol: The ul_vol of this TrafficCharacterization.
        :type ul_vol: int
        """
        if ul_vol is not None and ul_vol < 0:  # noqa: E501
            raise ValueError("Invalid value for `ul_vol`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ul_vol = ul_vol

    @property
    def ul_vol_variance(self):
        """Gets the ul_vol_variance of this TrafficCharacterization.

        string with format 'float' as defined in OpenAPI.  # noqa: E501

        :return: The ul_vol_variance of this TrafficCharacterization.
        :rtype: float
        """
        return self._ul_vol_variance

    @ul_vol_variance.setter
    def ul_vol_variance(self, ul_vol_variance):
        """Sets the ul_vol_variance of this TrafficCharacterization.

        string with format 'float' as defined in OpenAPI.  # noqa: E501

        :param ul_vol_variance: The ul_vol_variance of this TrafficCharacterization.
        :type ul_vol_variance: float
        """

        self._ul_vol_variance = ul_vol_variance

    @property
    def dl_vol(self):
        """Gets the dl_vol of this TrafficCharacterization.

        Unsigned integer identifying a volume in units of bytes.  # noqa: E501

        :return: The dl_vol of this TrafficCharacterization.
        :rtype: int
        """
        return self._dl_vol

    @dl_vol.setter
    def dl_vol(self, dl_vol):
        """Sets the dl_vol of this TrafficCharacterization.

        Unsigned integer identifying a volume in units of bytes.  # noqa: E501

        :param dl_vol: The dl_vol of this TrafficCharacterization.
        :type dl_vol: int
        """
        if dl_vol is not None and dl_vol < 0:  # noqa: E501
            raise ValueError("Invalid value for `dl_vol`, must be a value greater than or equal to `0`")  # noqa: E501

        self._dl_vol = dl_vol

    @property
    def dl_vol_variance(self):
        """Gets the dl_vol_variance of this TrafficCharacterization.

        string with format 'float' as defined in OpenAPI.  # noqa: E501

        :return: The dl_vol_variance of this TrafficCharacterization.
        :rtype: float
        """
        return self._dl_vol_variance

    @dl_vol_variance.setter
    def dl_vol_variance(self, dl_vol_variance):
        """Sets the dl_vol_variance of this TrafficCharacterization.

        string with format 'float' as defined in OpenAPI.  # noqa: E501

        :param dl_vol_variance: The dl_vol_variance of this TrafficCharacterization.
        :type dl_vol_variance: float
        """

        self._dl_vol_variance = dl_vol_variance
