# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.event_filter import EventFilter
from openapi_server.models.nwdaf_event import NwdafEvent
from openapi_server.models.target_ue_information import TargetUeInformation
from openapi_server.models.time_window import TimeWindow
from openapi_server import util

from openapi_server.models.event_filter import EventFilter  # noqa: E501
from openapi_server.models.nwdaf_event import NwdafEvent  # noqa: E501
from openapi_server.models.target_ue_information import TargetUeInformation  # noqa: E501
from openapi_server.models.time_window import TimeWindow  # noqa: E501

class MLEventSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, m_l_event=None, m_l_event_filter=None, tgt_ue=None, m_l_target_period=None, expiry_time=None):  # noqa: E501
        """MLEventSubscription - a model defined in OpenAPI

        :param m_l_event: The m_l_event of this MLEventSubscription.  # noqa: E501
        :type m_l_event: NwdafEvent
        :param m_l_event_filter: The m_l_event_filter of this MLEventSubscription.  # noqa: E501
        :type m_l_event_filter: EventFilter
        :param tgt_ue: The tgt_ue of this MLEventSubscription.  # noqa: E501
        :type tgt_ue: TargetUeInformation
        :param m_l_target_period: The m_l_target_period of this MLEventSubscription.  # noqa: E501
        :type m_l_target_period: TimeWindow
        :param expiry_time: The expiry_time of this MLEventSubscription.  # noqa: E501
        :type expiry_time: datetime
        """
        self.openapi_types = {
            'm_l_event': NwdafEvent,
            'm_l_event_filter': EventFilter,
            'tgt_ue': TargetUeInformation,
            'm_l_target_period': TimeWindow,
            'expiry_time': datetime
        }

        self.attribute_map = {
            'm_l_event': 'mLEvent',
            'm_l_event_filter': 'mLEventFilter',
            'tgt_ue': 'tgtUe',
            'm_l_target_period': 'mLTargetPeriod',
            'expiry_time': 'expiryTime'
        }

        self.m_l_event = m_l_event
        self.m_l_event_filter = m_l_event_filter
        self.tgt_ue = tgt_ue
        self.m_l_target_period = m_l_target_period
        self.expiry_time = expiry_time

    @classmethod
    def from_dict(cls, dikt) -> 'MLEventSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MLEventSubscription of this MLEventSubscription.  # noqa: E501
        :rtype: MLEventSubscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def m_l_event(self):
        """Gets the m_l_event of this MLEventSubscription.


        :return: The m_l_event of this MLEventSubscription.
        :rtype: NwdafEvent
        """
        return self._m_l_event

    @m_l_event.setter
    def m_l_event(self, m_l_event):
        """Sets the m_l_event of this MLEventSubscription.


        :param m_l_event: The m_l_event of this MLEventSubscription.
        :type m_l_event: NwdafEvent
        """
#        if m_l_event is None:
#            raise ValueError("Invalid value for `m_l_event`, must not be `None`")  # noqa: E501

        self._m_l_event = m_l_event

    @property
    def m_l_event_filter(self):
        """Gets the m_l_event_filter of this MLEventSubscription.


        :return: The m_l_event_filter of this MLEventSubscription.
        :rtype: EventFilter
        """
        return self._m_l_event_filter

    @m_l_event_filter.setter
    def m_l_event_filter(self, m_l_event_filter):
        """Sets the m_l_event_filter of this MLEventSubscription.


        :param m_l_event_filter: The m_l_event_filter of this MLEventSubscription.
        :type m_l_event_filter: EventFilter
        """
#        if m_l_event_filter is None:
#            raise ValueError("Invalid value for `m_l_event_filter`, must not be `None`")  # noqa: E501

        self._m_l_event_filter = m_l_event_filter

    @property
    def tgt_ue(self):
        """Gets the tgt_ue of this MLEventSubscription.


        :return: The tgt_ue of this MLEventSubscription.
        :rtype: TargetUeInformation
        """
        return self._tgt_ue

    @tgt_ue.setter
    def tgt_ue(self, tgt_ue):
        """Sets the tgt_ue of this MLEventSubscription.


        :param tgt_ue: The tgt_ue of this MLEventSubscription.
        :type tgt_ue: TargetUeInformation
        """

        self._tgt_ue = tgt_ue

    @property
    def m_l_target_period(self):
        """Gets the m_l_target_period of this MLEventSubscription.


        :return: The m_l_target_period of this MLEventSubscription.
        :rtype: TimeWindow
        """
        return self._m_l_target_period

    @m_l_target_period.setter
    def m_l_target_period(self, m_l_target_period):
        """Sets the m_l_target_period of this MLEventSubscription.


        :param m_l_target_period: The m_l_target_period of this MLEventSubscription.
        :type m_l_target_period: TimeWindow
        """

        self._m_l_target_period = m_l_target_period

    @property
    def expiry_time(self):
        """Gets the expiry_time of this MLEventSubscription.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The expiry_time of this MLEventSubscription.
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this MLEventSubscription.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param expiry_time: The expiry_time of this MLEventSubscription.
        :type expiry_time: datetime
        """

        self._expiry_time = expiry_time
