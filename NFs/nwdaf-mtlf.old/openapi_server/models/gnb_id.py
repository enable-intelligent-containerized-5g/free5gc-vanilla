# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class GNbId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bit_length=None, g_nb_value=None):  # noqa: E501
        """GNbId - a model defined in OpenAPI

        :param bit_length: The bit_length of this GNbId.  # noqa: E501
        :type bit_length: int
        :param g_nb_value: The g_nb_value of this GNbId.  # noqa: E501
        :type g_nb_value: str
        """
        self.openapi_types = {
            'bit_length': int,
            'g_nb_value': str
        }

        self.attribute_map = {
            'bit_length': 'bitLength',
            'g_nb_value': 'gNBValue'
        }

        self.bit_length = bit_length
        self.g_nb_value = g_nb_value

    @classmethod
    def from_dict(cls, dikt) -> 'GNbId':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GNbId of this GNbId.  # noqa: E501
        :rtype: GNbId
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bit_length(self):
        """Gets the bit_length of this GNbId.

        Unsigned integer representing the bit length of the gNB ID as defined in clause 9.3.1.6 of 3GPP TS 38.413 [11], within the range 22 to 32.   # noqa: E501

        :return: The bit_length of this GNbId.
        :rtype: int
        """
        return self._bit_length

    @bit_length.setter
    def bit_length(self, bit_length):
        """Sets the bit_length of this GNbId.

        Unsigned integer representing the bit length of the gNB ID as defined in clause 9.3.1.6 of 3GPP TS 38.413 [11], within the range 22 to 32.   # noqa: E501

        :param bit_length: The bit_length of this GNbId.
        :type bit_length: int
        """
        if bit_length is None:
            raise ValueError("Invalid value for `bit_length`, must not be `None`")  # noqa: E501
        if bit_length is not None and bit_length > 32:  # noqa: E501
            raise ValueError("Invalid value for `bit_length`, must be a value less than or equal to `32`")  # noqa: E501
        if bit_length is not None and bit_length < 22:  # noqa: E501
            raise ValueError("Invalid value for `bit_length`, must be a value greater than or equal to `22`")  # noqa: E501

        self._bit_length = bit_length

    @property
    def g_nb_value(self):
        """Gets the g_nb_value of this GNbId.

        This represents the identifier of the gNB. The value of the gNB ID shall be encoded in hexadecimal representation. Each character in the string shall take a value of \"0\" to \"9\", \"a\" to \"f\" or \"A\" to \"F\" and shall represent 4 bits. The padding 0 shall be added to make multiple nibbles,  the most significant character representing the padding 0 if required together with the 4 most significant bits of the gNB ID shall appear first in the string, and the character representing the 4 least significant bit of the gNB ID shall appear last in the string.   # noqa: E501

        :return: The g_nb_value of this GNbId.
        :rtype: str
        """
        return self._g_nb_value

    @g_nb_value.setter
    def g_nb_value(self, g_nb_value):
        """Sets the g_nb_value of this GNbId.

        This represents the identifier of the gNB. The value of the gNB ID shall be encoded in hexadecimal representation. Each character in the string shall take a value of \"0\" to \"9\", \"a\" to \"f\" or \"A\" to \"F\" and shall represent 4 bits. The padding 0 shall be added to make multiple nibbles,  the most significant character representing the padding 0 if required together with the 4 most significant bits of the gNB ID shall appear first in the string, and the character representing the 4 least significant bit of the gNB ID shall appear last in the string.   # noqa: E501

        :param g_nb_value: The g_nb_value of this GNbId.
        :type g_nb_value: str
        """
        if g_nb_value is None:
            raise ValueError("Invalid value for `g_nb_value`, must not be `None`")  # noqa: E501
        if g_nb_value is not None and not re.search(r'^[A-Fa-f0-9]{6,8}$', g_nb_value):  # noqa: E501
            raise ValueError("Invalid value for `g_nb_value`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{6,8}$/`")  # noqa: E501

        self._g_nb_value = g_nb_value
