# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.battery_indication import BatteryIndication
from openapi_server.models.location_area import LocationArea
from openapi_server.models.scheduled_communication_time import ScheduledCommunicationTime
from openapi_server.models.scheduled_communication_type import ScheduledCommunicationType
from openapi_server.models.stationary_indication import StationaryIndication
from openapi_server.models.traffic_profile import TrafficProfile
from openapi_server import util

from openapi_server.models.battery_indication import BatteryIndication  # noqa: E501
from openapi_server.models.location_area import LocationArea  # noqa: E501
from openapi_server.models.scheduled_communication_time import ScheduledCommunicationTime  # noqa: E501
from openapi_server.models.scheduled_communication_type import ScheduledCommunicationType  # noqa: E501
from openapi_server.models.stationary_indication import StationaryIndication  # noqa: E501
from openapi_server.models.traffic_profile import TrafficProfile  # noqa: E501

class ExpectedUeBehaviourData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stationary_indication=None, communication_duration_time=None, periodic_time=None, scheduled_communication_time=None, scheduled_communication_type=None, expected_umts=None, traffic_profile=None, battery_indication=None, validity_time=None):  # noqa: E501
        """ExpectedUeBehaviourData - a model defined in OpenAPI

        :param stationary_indication: The stationary_indication of this ExpectedUeBehaviourData.  # noqa: E501
        :type stationary_indication: StationaryIndication
        :param communication_duration_time: The communication_duration_time of this ExpectedUeBehaviourData.  # noqa: E501
        :type communication_duration_time: int
        :param periodic_time: The periodic_time of this ExpectedUeBehaviourData.  # noqa: E501
        :type periodic_time: int
        :param scheduled_communication_time: The scheduled_communication_time of this ExpectedUeBehaviourData.  # noqa: E501
        :type scheduled_communication_time: ScheduledCommunicationTime
        :param scheduled_communication_type: The scheduled_communication_type of this ExpectedUeBehaviourData.  # noqa: E501
        :type scheduled_communication_type: ScheduledCommunicationType
        :param expected_umts: The expected_umts of this ExpectedUeBehaviourData.  # noqa: E501
        :type expected_umts: List[LocationArea]
        :param traffic_profile: The traffic_profile of this ExpectedUeBehaviourData.  # noqa: E501
        :type traffic_profile: TrafficProfile
        :param battery_indication: The battery_indication of this ExpectedUeBehaviourData.  # noqa: E501
        :type battery_indication: BatteryIndication
        :param validity_time: The validity_time of this ExpectedUeBehaviourData.  # noqa: E501
        :type validity_time: datetime
        """
        self.openapi_types = {
            'stationary_indication': StationaryIndication,
            'communication_duration_time': int,
            'periodic_time': int,
            'scheduled_communication_time': ScheduledCommunicationTime,
            'scheduled_communication_type': ScheduledCommunicationType,
            'expected_umts': List[LocationArea],
            'traffic_profile': TrafficProfile,
            'battery_indication': BatteryIndication,
            'validity_time': datetime
        }

        self.attribute_map = {
            'stationary_indication': 'stationaryIndication',
            'communication_duration_time': 'communicationDurationTime',
            'periodic_time': 'periodicTime',
            'scheduled_communication_time': 'scheduledCommunicationTime',
            'scheduled_communication_type': 'scheduledCommunicationType',
            'expected_umts': 'expectedUmts',
            'traffic_profile': 'trafficProfile',
            'battery_indication': 'batteryIndication',
            'validity_time': 'validityTime'
        }

        self.stationary_indication = stationary_indication
        self.communication_duration_time = communication_duration_time
        self.periodic_time = periodic_time
        self.scheduled_communication_time = scheduled_communication_time
        self.scheduled_communication_type = scheduled_communication_type
        self.expected_umts = expected_umts
        self.traffic_profile = traffic_profile
        self.battery_indication = battery_indication
        self.validity_time = validity_time

    @classmethod
    def from_dict(cls, dikt) -> 'ExpectedUeBehaviourData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExpectedUeBehaviourData of this ExpectedUeBehaviourData.  # noqa: E501
        :rtype: ExpectedUeBehaviourData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stationary_indication(self):
        """Gets the stationary_indication of this ExpectedUeBehaviourData.


        :return: The stationary_indication of this ExpectedUeBehaviourData.
        :rtype: StationaryIndication
        """
        return self._stationary_indication

    @stationary_indication.setter
    def stationary_indication(self, stationary_indication):
        """Sets the stationary_indication of this ExpectedUeBehaviourData.


        :param stationary_indication: The stationary_indication of this ExpectedUeBehaviourData.
        :type stationary_indication: StationaryIndication
        """

        self._stationary_indication = stationary_indication

    @property
    def communication_duration_time(self):
        """Gets the communication_duration_time of this ExpectedUeBehaviourData.

        indicating a time in seconds.  # noqa: E501

        :return: The communication_duration_time of this ExpectedUeBehaviourData.
        :rtype: int
        """
        return self._communication_duration_time

    @communication_duration_time.setter
    def communication_duration_time(self, communication_duration_time):
        """Sets the communication_duration_time of this ExpectedUeBehaviourData.

        indicating a time in seconds.  # noqa: E501

        :param communication_duration_time: The communication_duration_time of this ExpectedUeBehaviourData.
        :type communication_duration_time: int
        """

        self._communication_duration_time = communication_duration_time

    @property
    def periodic_time(self):
        """Gets the periodic_time of this ExpectedUeBehaviourData.

        indicating a time in seconds.  # noqa: E501

        :return: The periodic_time of this ExpectedUeBehaviourData.
        :rtype: int
        """
        return self._periodic_time

    @periodic_time.setter
    def periodic_time(self, periodic_time):
        """Sets the periodic_time of this ExpectedUeBehaviourData.

        indicating a time in seconds.  # noqa: E501

        :param periodic_time: The periodic_time of this ExpectedUeBehaviourData.
        :type periodic_time: int
        """

        self._periodic_time = periodic_time

    @property
    def scheduled_communication_time(self):
        """Gets the scheduled_communication_time of this ExpectedUeBehaviourData.


        :return: The scheduled_communication_time of this ExpectedUeBehaviourData.
        :rtype: ScheduledCommunicationTime
        """
        return self._scheduled_communication_time

    @scheduled_communication_time.setter
    def scheduled_communication_time(self, scheduled_communication_time):
        """Sets the scheduled_communication_time of this ExpectedUeBehaviourData.


        :param scheduled_communication_time: The scheduled_communication_time of this ExpectedUeBehaviourData.
        :type scheduled_communication_time: ScheduledCommunicationTime
        """

        self._scheduled_communication_time = scheduled_communication_time

    @property
    def scheduled_communication_type(self):
        """Gets the scheduled_communication_type of this ExpectedUeBehaviourData.


        :return: The scheduled_communication_type of this ExpectedUeBehaviourData.
        :rtype: ScheduledCommunicationType
        """
        return self._scheduled_communication_type

    @scheduled_communication_type.setter
    def scheduled_communication_type(self, scheduled_communication_type):
        """Sets the scheduled_communication_type of this ExpectedUeBehaviourData.


        :param scheduled_communication_type: The scheduled_communication_type of this ExpectedUeBehaviourData.
        :type scheduled_communication_type: ScheduledCommunicationType
        """

        self._scheduled_communication_type = scheduled_communication_type

    @property
    def expected_umts(self):
        """Gets the expected_umts of this ExpectedUeBehaviourData.

        Identifies the UE's expected geographical movement. The attribute is only applicable in 5G.  # noqa: E501

        :return: The expected_umts of this ExpectedUeBehaviourData.
        :rtype: List[LocationArea]
        """
        return self._expected_umts

    @expected_umts.setter
    def expected_umts(self, expected_umts):
        """Sets the expected_umts of this ExpectedUeBehaviourData.

        Identifies the UE's expected geographical movement. The attribute is only applicable in 5G.  # noqa: E501

        :param expected_umts: The expected_umts of this ExpectedUeBehaviourData.
        :type expected_umts: List[LocationArea]
        """
        if expected_umts is not None and len(expected_umts) < 1:
            raise ValueError("Invalid value for `expected_umts`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._expected_umts = expected_umts

    @property
    def traffic_profile(self):
        """Gets the traffic_profile of this ExpectedUeBehaviourData.


        :return: The traffic_profile of this ExpectedUeBehaviourData.
        :rtype: TrafficProfile
        """
        return self._traffic_profile

    @traffic_profile.setter
    def traffic_profile(self, traffic_profile):
        """Sets the traffic_profile of this ExpectedUeBehaviourData.


        :param traffic_profile: The traffic_profile of this ExpectedUeBehaviourData.
        :type traffic_profile: TrafficProfile
        """

        self._traffic_profile = traffic_profile

    @property
    def battery_indication(self):
        """Gets the battery_indication of this ExpectedUeBehaviourData.


        :return: The battery_indication of this ExpectedUeBehaviourData.
        :rtype: BatteryIndication
        """
        return self._battery_indication

    @battery_indication.setter
    def battery_indication(self, battery_indication):
        """Sets the battery_indication of this ExpectedUeBehaviourData.


        :param battery_indication: The battery_indication of this ExpectedUeBehaviourData.
        :type battery_indication: BatteryIndication
        """

        self._battery_indication = battery_indication

    @property
    def validity_time(self):
        """Gets the validity_time of this ExpectedUeBehaviourData.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The validity_time of this ExpectedUeBehaviourData.
        :rtype: datetime
        """
        return self._validity_time

    @validity_time.setter
    def validity_time(self, validity_time):
        """Sets the validity_time of this ExpectedUeBehaviourData.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param validity_time: The validity_time of this ExpectedUeBehaviourData.
        :type validity_time: datetime
        """

        self._validity_time = validity_time
