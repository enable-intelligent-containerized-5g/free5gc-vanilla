# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ipv6_addr import Ipv6Addr
from openapi_server.models.ipv6_prefix import Ipv6Prefix
import re
from openapi_server import util

from openapi_server.models.ipv6_addr import Ipv6Addr  # noqa: E501
from openapi_server.models.ipv6_prefix import Ipv6Prefix  # noqa: E501
import re  # noqa: E501

class IpAddr(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ipv4_addr=None, ipv6_addr=None, ipv6_prefix=None):  # noqa: E501
        """IpAddr - a model defined in OpenAPI

        :param ipv4_addr: The ipv4_addr of this IpAddr.  # noqa: E501
        :type ipv4_addr: str
        :param ipv6_addr: The ipv6_addr of this IpAddr.  # noqa: E501
        :type ipv6_addr: Ipv6Addr
        :param ipv6_prefix: The ipv6_prefix of this IpAddr.  # noqa: E501
        :type ipv6_prefix: Ipv6Prefix
        """
        self.openapi_types = {
            'ipv4_addr': str,
            'ipv6_addr': Ipv6Addr,
            'ipv6_prefix': Ipv6Prefix
        }

        self.attribute_map = {
            'ipv4_addr': 'ipv4Addr',
            'ipv6_addr': 'ipv6Addr',
            'ipv6_prefix': 'ipv6Prefix'
        }

        self.ipv4_addr = ipv4_addr
        self.ipv6_addr = ipv6_addr
        self.ipv6_prefix = ipv6_prefix

    @classmethod
    def from_dict(cls, dikt) -> 'IpAddr':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IpAddr of this IpAddr.  # noqa: E501
        :rtype: IpAddr
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ipv4_addr(self):
        """Gets the ipv4_addr of this IpAddr.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :return: The ipv4_addr of this IpAddr.
        :rtype: str
        """
        return self._ipv4_addr

    @ipv4_addr.setter
    def ipv4_addr(self, ipv4_addr):
        """Sets the ipv4_addr of this IpAddr.

        String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.   # noqa: E501

        :param ipv4_addr: The ipv4_addr of this IpAddr.
        :type ipv4_addr: str
        """
        if ipv4_addr is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$', ipv4_addr):  # noqa: E501
            raise ValueError("Invalid value for `ipv4_addr`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/`")  # noqa: E501

        self._ipv4_addr = ipv4_addr

    @property
    def ipv6_addr(self):
        """Gets the ipv6_addr of this IpAddr.


        :return: The ipv6_addr of this IpAddr.
        :rtype: Ipv6Addr
        """
        return self._ipv6_addr

    @ipv6_addr.setter
    def ipv6_addr(self, ipv6_addr):
        """Sets the ipv6_addr of this IpAddr.


        :param ipv6_addr: The ipv6_addr of this IpAddr.
        :type ipv6_addr: Ipv6Addr
        """

        self._ipv6_addr = ipv6_addr

    @property
    def ipv6_prefix(self):
        """Gets the ipv6_prefix of this IpAddr.


        :return: The ipv6_prefix of this IpAddr.
        :rtype: Ipv6Prefix
        """
        return self._ipv6_prefix

    @ipv6_prefix.setter
    def ipv6_prefix(self, ipv6_prefix):
        """Sets the ipv6_prefix of this IpAddr.


        :param ipv6_prefix: The ipv6_prefix of this IpAddr.
        :type ipv6_prefix: Ipv6Prefix
        """

        self._ipv6_prefix = ipv6_prefix
