# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.failure_event_info_for_ml_model import FailureEventInfoForMLModel
from openapi_server.models.ml_event_notif import MLEventNotif
from openapi_server.models.ml_event_subscription import MLEventSubscription
from openapi_server.models.reporting_information import ReportingInformation
import re
from openapi_server import util

from openapi_server.models.failure_event_info_for_ml_model import FailureEventInfoForMLModel  # noqa: E501
from openapi_server.models.ml_event_notif import MLEventNotif  # noqa: E501
from openapi_server.models.ml_event_subscription import MLEventSubscription  # noqa: E501
from openapi_server.models.reporting_information import ReportingInformation  # noqa: E501
import re  # noqa: E501

class NwdafMLModelProvSubsc(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, m_l_event_subscs=None, notif_uri=None, m_l_event_notifs=None, supp_feats=None, notif_corre_id=None, event_req=None, fail_event_reports=None):  # noqa: E501
        """NwdafMLModelProvSubsc - a model defined in OpenAPI

        :param m_l_event_subscs: The m_l_event_subscs of this NwdafMLModelProvSubsc.  # noqa: E501
        :type m_l_event_subscs: List[MLEventSubscription]
        :param notif_uri: The notif_uri of this NwdafMLModelProvSubsc.  # noqa: E501
        :type notif_uri: str
        :param m_l_event_notifs: The m_l_event_notifs of this NwdafMLModelProvSubsc.  # noqa: E501
        :type m_l_event_notifs: List[MLEventNotif]
        :param supp_feats: The supp_feats of this NwdafMLModelProvSubsc.  # noqa: E501
        :type supp_feats: str
        :param notif_corre_id: The notif_corre_id of this NwdafMLModelProvSubsc.  # noqa: E501
        :type notif_corre_id: str
        :param event_req: The event_req of this NwdafMLModelProvSubsc.  # noqa: E501
        :type event_req: ReportingInformation
        :param fail_event_reports: The fail_event_reports of this NwdafMLModelProvSubsc.  # noqa: E501
        :type fail_event_reports: List[FailureEventInfoForMLModel]
        """
        self.openapi_types = {
            'm_l_event_subscs': List[MLEventSubscription],
            'notif_uri': str,
            'm_l_event_notifs': List[MLEventNotif],
            'supp_feats': str,
            'notif_corre_id': str,
            'event_req': ReportingInformation,
            'fail_event_reports': List[FailureEventInfoForMLModel]
        }

        self.attribute_map = {
            'm_l_event_subscs': 'mLEventSubscs',
            'notif_uri': 'notifUri',
            'm_l_event_notifs': 'mLEventNotifs',
            'supp_feats': 'suppFeats',
            'notif_corre_id': 'notifCorreId',
            'event_req': 'eventReq',
            'fail_event_reports': 'failEventReports'
        }

        self.m_l_event_subscs = m_l_event_subscs
        self.notif_uri = notif_uri
        self.m_l_event_notifs = m_l_event_notifs
        self.supp_feats = supp_feats
        self.notif_corre_id = notif_corre_id
        self.event_req = event_req
        self.fail_event_reports = fail_event_reports

    @classmethod
    def from_dict(cls, dikt) -> 'NwdafMLModelProvSubsc':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NwdafMLModelProvSubsc of this NwdafMLModelProvSubsc.  # noqa: E501
        :rtype: NwdafMLModelProvSubsc
        """
        return util.deserialize_model(dikt, cls)

    @property
    def m_l_event_subscs(self):
        """Gets the m_l_event_subscs of this NwdafMLModelProvSubsc.

        Subscribed events  # noqa: E501

        :return: The m_l_event_subscs of this NwdafMLModelProvSubsc.
        :rtype: List[MLEventSubscription]
        """
        return self._m_l_event_subscs

    @m_l_event_subscs.setter
    def m_l_event_subscs(self, m_l_event_subscs):
        """Sets the m_l_event_subscs of this NwdafMLModelProvSubsc.

        Subscribed events  # noqa: E501

        :param m_l_event_subscs: The m_l_event_subscs of this NwdafMLModelProvSubsc.
        :type m_l_event_subscs: List[MLEventSubscription]
        """
#        if m_l_event_subscs is None:
#            raise ValueError("Invalid value for `m_l_event_subscs`, must not be `None`")  # noqa: E501
#        if m_l_event_subscs is not None and len(m_l_event_subscs) < 1:
#            raise ValueError("Invalid value for `m_l_event_subscs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._m_l_event_subscs = m_l_event_subscs

    @property
    def notif_uri(self):
        """Gets the notif_uri of this NwdafMLModelProvSubsc.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The notif_uri of this NwdafMLModelProvSubsc.
        :rtype: str
        """
        return self._notif_uri

    @notif_uri.setter
    def notif_uri(self, notif_uri):
        """Sets the notif_uri of this NwdafMLModelProvSubsc.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param notif_uri: The notif_uri of this NwdafMLModelProvSubsc.
        :type notif_uri: str
        """
#        if notif_uri is None:
#            raise ValueError("Invalid value for `notif_uri`, must not be `None`")  # noqa: E501

        self._notif_uri = notif_uri

    @property
    def m_l_event_notifs(self):
        """Gets the m_l_event_notifs of this NwdafMLModelProvSubsc.


        :return: The m_l_event_notifs of this NwdafMLModelProvSubsc.
        :rtype: List[MLEventNotif]
        """
        return self._m_l_event_notifs

    @m_l_event_notifs.setter
    def m_l_event_notifs(self, m_l_event_notifs):
        """Sets the m_l_event_notifs of this NwdafMLModelProvSubsc.


        :param m_l_event_notifs: The m_l_event_notifs of this NwdafMLModelProvSubsc.
        :type m_l_event_notifs: List[MLEventNotif]
        """
#        if m_l_event_notifs is not None and len(m_l_event_notifs) < 1:
#            raise ValueError("Invalid value for `m_l_event_notifs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._m_l_event_notifs = m_l_event_notifs

    @property
    def supp_feats(self):
        """Gets the supp_feats of this NwdafMLModelProvSubsc.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :return: The supp_feats of this NwdafMLModelProvSubsc.
        :rtype: str
        """
        return self._supp_feats

    @supp_feats.setter
    def supp_feats(self, supp_feats):
        """Sets the supp_feats of this NwdafMLModelProvSubsc.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :param supp_feats: The supp_feats of this NwdafMLModelProvSubsc.
        :type supp_feats: str
        """
#        if supp_feats is not None and not re.search(r'^[A-Fa-f0-9]*$', supp_feats):  # noqa: E501
#            raise ValueError("Invalid value for `supp_feats`, must be a follow pattern or equal to `/^[A-Fa-f0-9]*$/`")  # noqa: E501

        self._supp_feats = supp_feats

    @property
    def notif_corre_id(self):
        """Gets the notif_corre_id of this NwdafMLModelProvSubsc.


        :return: The notif_corre_id of this NwdafMLModelProvSubsc.
        :rtype: str
        """
        return self._notif_corre_id

    @notif_corre_id.setter
    def notif_corre_id(self, notif_corre_id):
        """Sets the notif_corre_id of this NwdafMLModelProvSubsc.


        :param notif_corre_id: The notif_corre_id of this NwdafMLModelProvSubsc.
        :type notif_corre_id: str
        """

        self._notif_corre_id = notif_corre_id

    @property
    def event_req(self):
        """Gets the event_req of this NwdafMLModelProvSubsc.


        :return: The event_req of this NwdafMLModelProvSubsc.
        :rtype: ReportingInformation
        """
        return self._event_req

    @event_req.setter
    def event_req(self, event_req):
        """Sets the event_req of this NwdafMLModelProvSubsc.


        :param event_req: The event_req of this NwdafMLModelProvSubsc.
        :type event_req: ReportingInformation
        """

        self._event_req = event_req

    @property
    def fail_event_reports(self):
        """Gets the fail_event_reports of this NwdafMLModelProvSubsc.


        :return: The fail_event_reports of this NwdafMLModelProvSubsc.
        :rtype: List[FailureEventInfoForMLModel]
        """
        return self._fail_event_reports

    @fail_event_reports.setter
    def fail_event_reports(self, fail_event_reports):
        """Sets the fail_event_reports of this NwdafMLModelProvSubsc.


        :param fail_event_reports: The fail_event_reports of this NwdafMLModelProvSubsc.
        :type fail_event_reports: List[FailureEventInfoForMLModel]
        """
#        if fail_event_reports is not None and len(fail_event_reports) < 1:
#            raise ValueError("Invalid value for `fail_event_reports`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._fail_event_reports = fail_event_reports
