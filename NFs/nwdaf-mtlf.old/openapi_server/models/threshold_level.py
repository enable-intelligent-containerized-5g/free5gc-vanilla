# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class ThresholdLevel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cong_level=None, nf_load_level=None, nf_cpu_usage=None, nf_memory_usage=None, nf_storage_usage=None, avg_traffic_rate=None, max_traffic_rate=None, avg_packet_delay=None, max_packet_delay=None, avg_packet_loss_rate=None, svc_exp_level=None):  # noqa: E501
        """ThresholdLevel - a model defined in OpenAPI

        :param cong_level: The cong_level of this ThresholdLevel.  # noqa: E501
        :type cong_level: int
        :param nf_load_level: The nf_load_level of this ThresholdLevel.  # noqa: E501
        :type nf_load_level: int
        :param nf_cpu_usage: The nf_cpu_usage of this ThresholdLevel.  # noqa: E501
        :type nf_cpu_usage: int
        :param nf_memory_usage: The nf_memory_usage of this ThresholdLevel.  # noqa: E501
        :type nf_memory_usage: int
        :param nf_storage_usage: The nf_storage_usage of this ThresholdLevel.  # noqa: E501
        :type nf_storage_usage: int
        :param avg_traffic_rate: The avg_traffic_rate of this ThresholdLevel.  # noqa: E501
        :type avg_traffic_rate: str
        :param max_traffic_rate: The max_traffic_rate of this ThresholdLevel.  # noqa: E501
        :type max_traffic_rate: str
        :param avg_packet_delay: The avg_packet_delay of this ThresholdLevel.  # noqa: E501
        :type avg_packet_delay: int
        :param max_packet_delay: The max_packet_delay of this ThresholdLevel.  # noqa: E501
        :type max_packet_delay: int
        :param avg_packet_loss_rate: The avg_packet_loss_rate of this ThresholdLevel.  # noqa: E501
        :type avg_packet_loss_rate: int
        :param svc_exp_level: The svc_exp_level of this ThresholdLevel.  # noqa: E501
        :type svc_exp_level: float
        """
        self.openapi_types = {
            'cong_level': int,
            'nf_load_level': int,
            'nf_cpu_usage': int,
            'nf_memory_usage': int,
            'nf_storage_usage': int,
            'avg_traffic_rate': str,
            'max_traffic_rate': str,
            'avg_packet_delay': int,
            'max_packet_delay': int,
            'avg_packet_loss_rate': int,
            'svc_exp_level': float
        }

        self.attribute_map = {
            'cong_level': 'congLevel',
            'nf_load_level': 'nfLoadLevel',
            'nf_cpu_usage': 'nfCpuUsage',
            'nf_memory_usage': 'nfMemoryUsage',
            'nf_storage_usage': 'nfStorageUsage',
            'avg_traffic_rate': 'avgTrafficRate',
            'max_traffic_rate': 'maxTrafficRate',
            'avg_packet_delay': 'avgPacketDelay',
            'max_packet_delay': 'maxPacketDelay',
            'avg_packet_loss_rate': 'avgPacketLossRate',
            'svc_exp_level': 'svcExpLevel'
        }

        self.cong_level = cong_level
        self.nf_load_level = nf_load_level
        self.nf_cpu_usage = nf_cpu_usage
        self.nf_memory_usage = nf_memory_usage
        self.nf_storage_usage = nf_storage_usage
        self.avg_traffic_rate = avg_traffic_rate
        self.max_traffic_rate = max_traffic_rate
        self.avg_packet_delay = avg_packet_delay
        self.max_packet_delay = max_packet_delay
        self.avg_packet_loss_rate = avg_packet_loss_rate
        self.svc_exp_level = svc_exp_level

    @classmethod
    def from_dict(cls, dikt) -> 'ThresholdLevel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ThresholdLevel of this ThresholdLevel.  # noqa: E501
        :rtype: ThresholdLevel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cong_level(self):
        """Gets the cong_level of this ThresholdLevel.


        :return: The cong_level of this ThresholdLevel.
        :rtype: int
        """
        return self._cong_level

    @cong_level.setter
    def cong_level(self, cong_level):
        """Sets the cong_level of this ThresholdLevel.


        :param cong_level: The cong_level of this ThresholdLevel.
        :type cong_level: int
        """

        self._cong_level = cong_level

    @property
    def nf_load_level(self):
        """Gets the nf_load_level of this ThresholdLevel.


        :return: The nf_load_level of this ThresholdLevel.
        :rtype: int
        """
        return self._nf_load_level

    @nf_load_level.setter
    def nf_load_level(self, nf_load_level):
        """Sets the nf_load_level of this ThresholdLevel.


        :param nf_load_level: The nf_load_level of this ThresholdLevel.
        :type nf_load_level: int
        """

        self._nf_load_level = nf_load_level

    @property
    def nf_cpu_usage(self):
        """Gets the nf_cpu_usage of this ThresholdLevel.


        :return: The nf_cpu_usage of this ThresholdLevel.
        :rtype: int
        """
        return self._nf_cpu_usage

    @nf_cpu_usage.setter
    def nf_cpu_usage(self, nf_cpu_usage):
        """Sets the nf_cpu_usage of this ThresholdLevel.


        :param nf_cpu_usage: The nf_cpu_usage of this ThresholdLevel.
        :type nf_cpu_usage: int
        """

        self._nf_cpu_usage = nf_cpu_usage

    @property
    def nf_memory_usage(self):
        """Gets the nf_memory_usage of this ThresholdLevel.


        :return: The nf_memory_usage of this ThresholdLevel.
        :rtype: int
        """
        return self._nf_memory_usage

    @nf_memory_usage.setter
    def nf_memory_usage(self, nf_memory_usage):
        """Sets the nf_memory_usage of this ThresholdLevel.


        :param nf_memory_usage: The nf_memory_usage of this ThresholdLevel.
        :type nf_memory_usage: int
        """

        self._nf_memory_usage = nf_memory_usage

    @property
    def nf_storage_usage(self):
        """Gets the nf_storage_usage of this ThresholdLevel.


        :return: The nf_storage_usage of this ThresholdLevel.
        :rtype: int
        """
        return self._nf_storage_usage

    @nf_storage_usage.setter
    def nf_storage_usage(self, nf_storage_usage):
        """Sets the nf_storage_usage of this ThresholdLevel.


        :param nf_storage_usage: The nf_storage_usage of this ThresholdLevel.
        :type nf_storage_usage: int
        """

        self._nf_storage_usage = nf_storage_usage

    @property
    def avg_traffic_rate(self):
        """Gets the avg_traffic_rate of this ThresholdLevel.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :return: The avg_traffic_rate of this ThresholdLevel.
        :rtype: str
        """
        return self._avg_traffic_rate

    @avg_traffic_rate.setter
    def avg_traffic_rate(self, avg_traffic_rate):
        """Sets the avg_traffic_rate of this ThresholdLevel.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :param avg_traffic_rate: The avg_traffic_rate of this ThresholdLevel.
        :type avg_traffic_rate: str
        """
        if avg_traffic_rate is not None and not re.search(r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$', avg_traffic_rate):  # noqa: E501
            raise ValueError("Invalid value for `avg_traffic_rate`, must be a follow pattern or equal to `/^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/`")  # noqa: E501

        self._avg_traffic_rate = avg_traffic_rate

    @property
    def max_traffic_rate(self):
        """Gets the max_traffic_rate of this ThresholdLevel.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :return: The max_traffic_rate of this ThresholdLevel.
        :rtype: str
        """
        return self._max_traffic_rate

    @max_traffic_rate.setter
    def max_traffic_rate(self, max_traffic_rate):
        """Sets the max_traffic_rate of this ThresholdLevel.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :param max_traffic_rate: The max_traffic_rate of this ThresholdLevel.
        :type max_traffic_rate: str
        """
        if max_traffic_rate is not None and not re.search(r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$', max_traffic_rate):  # noqa: E501
            raise ValueError("Invalid value for `max_traffic_rate`, must be a follow pattern or equal to `/^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/`")  # noqa: E501

        self._max_traffic_rate = max_traffic_rate

    @property
    def avg_packet_delay(self):
        """Gets the avg_packet_delay of this ThresholdLevel.

        Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds.   # noqa: E501

        :return: The avg_packet_delay of this ThresholdLevel.
        :rtype: int
        """
        return self._avg_packet_delay

    @avg_packet_delay.setter
    def avg_packet_delay(self, avg_packet_delay):
        """Sets the avg_packet_delay of this ThresholdLevel.

        Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds.   # noqa: E501

        :param avg_packet_delay: The avg_packet_delay of this ThresholdLevel.
        :type avg_packet_delay: int
        """
        if avg_packet_delay is not None and avg_packet_delay < 1:  # noqa: E501
            raise ValueError("Invalid value for `avg_packet_delay`, must be a value greater than or equal to `1`")  # noqa: E501

        self._avg_packet_delay = avg_packet_delay

    @property
    def max_packet_delay(self):
        """Gets the max_packet_delay of this ThresholdLevel.

        Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds.   # noqa: E501

        :return: The max_packet_delay of this ThresholdLevel.
        :rtype: int
        """
        return self._max_packet_delay

    @max_packet_delay.setter
    def max_packet_delay(self, max_packet_delay):
        """Sets the max_packet_delay of this ThresholdLevel.

        Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds.   # noqa: E501

        :param max_packet_delay: The max_packet_delay of this ThresholdLevel.
        :type max_packet_delay: int
        """
        if max_packet_delay is not None and max_packet_delay < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_packet_delay`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_packet_delay = max_packet_delay

    @property
    def avg_packet_loss_rate(self):
        """Gets the avg_packet_loss_rate of this ThresholdLevel.

        Unsigned integer indicating Packet Loss Rate (see clauses 5.7.2.8 and 5.7.4 of 3GPP TS 23.501), expressed in tenth of percent.   # noqa: E501

        :return: The avg_packet_loss_rate of this ThresholdLevel.
        :rtype: int
        """
        return self._avg_packet_loss_rate

    @avg_packet_loss_rate.setter
    def avg_packet_loss_rate(self, avg_packet_loss_rate):
        """Sets the avg_packet_loss_rate of this ThresholdLevel.

        Unsigned integer indicating Packet Loss Rate (see clauses 5.7.2.8 and 5.7.4 of 3GPP TS 23.501), expressed in tenth of percent.   # noqa: E501

        :param avg_packet_loss_rate: The avg_packet_loss_rate of this ThresholdLevel.
        :type avg_packet_loss_rate: int
        """
        if avg_packet_loss_rate is not None and avg_packet_loss_rate > 1000:  # noqa: E501
            raise ValueError("Invalid value for `avg_packet_loss_rate`, must be a value less than or equal to `1000`")  # noqa: E501
        if avg_packet_loss_rate is not None and avg_packet_loss_rate < 0:  # noqa: E501
            raise ValueError("Invalid value for `avg_packet_loss_rate`, must be a value greater than or equal to `0`")  # noqa: E501

        self._avg_packet_loss_rate = avg_packet_loss_rate

    @property
    def svc_exp_level(self):
        """Gets the svc_exp_level of this ThresholdLevel.

        string with format 'float' as defined in OpenAPI.  # noqa: E501

        :return: The svc_exp_level of this ThresholdLevel.
        :rtype: float
        """
        return self._svc_exp_level

    @svc_exp_level.setter
    def svc_exp_level(self, svc_exp_level):
        """Sets the svc_exp_level of this ThresholdLevel.

        string with format 'float' as defined in OpenAPI.  # noqa: E501

        :param svc_exp_level: The svc_exp_level of this ThresholdLevel.
        :type svc_exp_level: float
        """

        self._svc_exp_level = svc_exp_level
