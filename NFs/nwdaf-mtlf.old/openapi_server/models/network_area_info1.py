# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ecgi import Ecgi
from openapi_server.models.global_ran_node_id import GlobalRanNodeId
from openapi_server.models.ncgi import Ncgi
from openapi_server.models.tai import Tai
from openapi_server import util

from openapi_server.models.ecgi import Ecgi  # noqa: E501
from openapi_server.models.global_ran_node_id import GlobalRanNodeId  # noqa: E501
from openapi_server.models.ncgi import Ncgi  # noqa: E501
from openapi_server.models.tai import Tai  # noqa: E501

class NetworkAreaInfo1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ecgis=None, ncgis=None, g_ran_node_ids=None, tais=None):  # noqa: E501
        """NetworkAreaInfo1 - a model defined in OpenAPI

        :param ecgis: The ecgis of this NetworkAreaInfo1.  # noqa: E501
        :type ecgis: List[Ecgi]
        :param ncgis: The ncgis of this NetworkAreaInfo1.  # noqa: E501
        :type ncgis: List[Ncgi]
        :param g_ran_node_ids: The g_ran_node_ids of this NetworkAreaInfo1.  # noqa: E501
        :type g_ran_node_ids: List[GlobalRanNodeId]
        :param tais: The tais of this NetworkAreaInfo1.  # noqa: E501
        :type tais: List[Tai]
        """
        self.openapi_types = {
            'ecgis': List[Ecgi],
            'ncgis': List[Ncgi],
            'g_ran_node_ids': List[GlobalRanNodeId],
            'tais': List[Tai]
        }

        self.attribute_map = {
            'ecgis': 'ecgis',
            'ncgis': 'ncgis',
            'g_ran_node_ids': 'gRanNodeIds',
            'tais': 'tais'
        }

        self.ecgis = ecgis
        self.ncgis = ncgis
        self.g_ran_node_ids = g_ran_node_ids
        self.tais = tais

    @classmethod
    def from_dict(cls, dikt) -> 'NetworkAreaInfo1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NetworkAreaInfo_1 of this NetworkAreaInfo1.  # noqa: E501
        :rtype: NetworkAreaInfo1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ecgis(self):
        """Gets the ecgis of this NetworkAreaInfo1.

        Contains a list of E-UTRA cell identities.  # noqa: E501

        :return: The ecgis of this NetworkAreaInfo1.
        :rtype: List[Ecgi]
        """
        return self._ecgis

    @ecgis.setter
    def ecgis(self, ecgis):
        """Sets the ecgis of this NetworkAreaInfo1.

        Contains a list of E-UTRA cell identities.  # noqa: E501

        :param ecgis: The ecgis of this NetworkAreaInfo1.
        :type ecgis: List[Ecgi]
        """
        if ecgis is not None and len(ecgis) < 1:
            raise ValueError("Invalid value for `ecgis`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ecgis = ecgis

    @property
    def ncgis(self):
        """Gets the ncgis of this NetworkAreaInfo1.

        Contains a list of NR cell identities.  # noqa: E501

        :return: The ncgis of this NetworkAreaInfo1.
        :rtype: List[Ncgi]
        """
        return self._ncgis

    @ncgis.setter
    def ncgis(self, ncgis):
        """Sets the ncgis of this NetworkAreaInfo1.

        Contains a list of NR cell identities.  # noqa: E501

        :param ncgis: The ncgis of this NetworkAreaInfo1.
        :type ncgis: List[Ncgi]
        """
        if ncgis is not None and len(ncgis) < 1:
            raise ValueError("Invalid value for `ncgis`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ncgis = ncgis

    @property
    def g_ran_node_ids(self):
        """Gets the g_ran_node_ids of this NetworkAreaInfo1.

        Contains a list of NG RAN nodes.  # noqa: E501

        :return: The g_ran_node_ids of this NetworkAreaInfo1.
        :rtype: List[GlobalRanNodeId]
        """
        return self._g_ran_node_ids

    @g_ran_node_ids.setter
    def g_ran_node_ids(self, g_ran_node_ids):
        """Sets the g_ran_node_ids of this NetworkAreaInfo1.

        Contains a list of NG RAN nodes.  # noqa: E501

        :param g_ran_node_ids: The g_ran_node_ids of this NetworkAreaInfo1.
        :type g_ran_node_ids: List[GlobalRanNodeId]
        """
        if g_ran_node_ids is not None and len(g_ran_node_ids) < 1:
            raise ValueError("Invalid value for `g_ran_node_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._g_ran_node_ids = g_ran_node_ids

    @property
    def tais(self):
        """Gets the tais of this NetworkAreaInfo1.

        Contains a list of tracking area identities.  # noqa: E501

        :return: The tais of this NetworkAreaInfo1.
        :rtype: List[Tai]
        """
        return self._tais

    @tais.setter
    def tais(self, tais):
        """Sets the tais of this NetworkAreaInfo1.

        Contains a list of tracking area identities.  # noqa: E501

        :param tais: The tais of this NetworkAreaInfo1.
        :type tais: List[Tai]
        """
        if tais is not None and len(tais) < 1:
            raise ValueError("Invalid value for `tais`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tais = tais
