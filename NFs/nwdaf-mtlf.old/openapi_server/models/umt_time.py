# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UmtTime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, time_of_day=None, day_of_week=None):  # noqa: E501
        """UmtTime - a model defined in OpenAPI

        :param time_of_day: The time_of_day of this UmtTime.  # noqa: E501
        :type time_of_day: str
        :param day_of_week: The day_of_week of this UmtTime.  # noqa: E501
        :type day_of_week: int
        """
        self.openapi_types = {
            'time_of_day': str,
            'day_of_week': int
        }

        self.attribute_map = {
            'time_of_day': 'timeOfDay',
            'day_of_week': 'dayOfWeek'
        }

        self.time_of_day = time_of_day
        self.day_of_week = day_of_week

    @classmethod
    def from_dict(cls, dikt) -> 'UmtTime':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UmtTime of this UmtTime.  # noqa: E501
        :rtype: UmtTime
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_of_day(self):
        """Gets the time_of_day of this UmtTime.

        String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).    # noqa: E501

        :return: The time_of_day of this UmtTime.
        :rtype: str
        """
        return self._time_of_day

    @time_of_day.setter
    def time_of_day(self, time_of_day):
        """Sets the time_of_day of this UmtTime.

        String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).    # noqa: E501

        :param time_of_day: The time_of_day of this UmtTime.
        :type time_of_day: str
        """
        if time_of_day is None:
            raise ValueError("Invalid value for `time_of_day`, must not be `None`")  # noqa: E501

        self._time_of_day = time_of_day

    @property
    def day_of_week(self):
        """Gets the day_of_week of this UmtTime.

        integer between and including 1 and 7 denoting a weekday. 1 shall indicate Monday, and the subsequent weekdays  shall be indicated with the next higher numbers. 7 shall indicate Sunday.   # noqa: E501

        :return: The day_of_week of this UmtTime.
        :rtype: int
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this UmtTime.

        integer between and including 1 and 7 denoting a weekday. 1 shall indicate Monday, and the subsequent weekdays  shall be indicated with the next higher numbers. 7 shall indicate Sunday.   # noqa: E501

        :param day_of_week: The day_of_week of this UmtTime.
        :type day_of_week: int
        """
        if day_of_week is None:
            raise ValueError("Invalid value for `day_of_week`, must not be `None`")  # noqa: E501
        if day_of_week is not None and day_of_week > 7:  # noqa: E501
            raise ValueError("Invalid value for `day_of_week`, must be a value less than or equal to `7`")  # noqa: E501
        if day_of_week is not None and day_of_week < 1:  # noqa: E501
            raise ValueError("Invalid value for `day_of_week`, must be a value greater than or equal to `1`")  # noqa: E501

        self._day_of_week = day_of_week
