# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.matching_direction import MatchingDirection
from openapi_server.models.rat_type import RatType
from openapi_server.models.threshold_level import ThresholdLevel
from openapi_server import util

from openapi_server.models.matching_direction import MatchingDirection  # noqa: E501
from openapi_server.models.rat_type import RatType  # noqa: E501
from openapi_server.models.threshold_level import ThresholdLevel  # noqa: E501

class RatFreqInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_freq=None, all_rat=None, freq=None, rat_type=None, svc_exp_threshold=None, matching_dir=None):  # noqa: E501
        """RatFreqInformation - a model defined in OpenAPI

        :param all_freq: The all_freq of this RatFreqInformation.  # noqa: E501
        :type all_freq: bool
        :param all_rat: The all_rat of this RatFreqInformation.  # noqa: E501
        :type all_rat: bool
        :param freq: The freq of this RatFreqInformation.  # noqa: E501
        :type freq: int
        :param rat_type: The rat_type of this RatFreqInformation.  # noqa: E501
        :type rat_type: RatType
        :param svc_exp_threshold: The svc_exp_threshold of this RatFreqInformation.  # noqa: E501
        :type svc_exp_threshold: ThresholdLevel
        :param matching_dir: The matching_dir of this RatFreqInformation.  # noqa: E501
        :type matching_dir: MatchingDirection
        """
        self.openapi_types = {
            'all_freq': bool,
            'all_rat': bool,
            'freq': int,
            'rat_type': RatType,
            'svc_exp_threshold': ThresholdLevel,
            'matching_dir': MatchingDirection
        }

        self.attribute_map = {
            'all_freq': 'allFreq',
            'all_rat': 'allRat',
            'freq': 'freq',
            'rat_type': 'ratType',
            'svc_exp_threshold': 'svcExpThreshold',
            'matching_dir': 'matchingDir'
        }

        self.all_freq = all_freq
        self.all_rat = all_rat
        self.freq = freq
        self.rat_type = rat_type
        self.svc_exp_threshold = svc_exp_threshold
        self.matching_dir = matching_dir

    @classmethod
    def from_dict(cls, dikt) -> 'RatFreqInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RatFreqInformation of this RatFreqInformation.  # noqa: E501
        :rtype: RatFreqInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_freq(self):
        """Gets the all_freq of this RatFreqInformation.

        Set to \"true\" to indicate to handle all the frequencies the NWDAF received, otherwise  set to \"false\" or omit. The \"allFreq\" attribute and the \"freq\" attribute are mutually  exclusive.   # noqa: E501

        :return: The all_freq of this RatFreqInformation.
        :rtype: bool
        """
        return self._all_freq

    @all_freq.setter
    def all_freq(self, all_freq):
        """Sets the all_freq of this RatFreqInformation.

        Set to \"true\" to indicate to handle all the frequencies the NWDAF received, otherwise  set to \"false\" or omit. The \"allFreq\" attribute and the \"freq\" attribute are mutually  exclusive.   # noqa: E501

        :param all_freq: The all_freq of this RatFreqInformation.
        :type all_freq: bool
        """

        self._all_freq = all_freq

    @property
    def all_rat(self):
        """Gets the all_rat of this RatFreqInformation.

        Set to \"true\" to indicate to handle all the RAT Types the NWDAF received, otherwise  set to \"false\" or omit. The \"allRat\" attribute and the \"ratType\" attribute are mutually  exclusive.   # noqa: E501

        :return: The all_rat of this RatFreqInformation.
        :rtype: bool
        """
        return self._all_rat

    @all_rat.setter
    def all_rat(self, all_rat):
        """Sets the all_rat of this RatFreqInformation.

        Set to \"true\" to indicate to handle all the RAT Types the NWDAF received, otherwise  set to \"false\" or omit. The \"allRat\" attribute and the \"ratType\" attribute are mutually  exclusive.   # noqa: E501

        :param all_rat: The all_rat of this RatFreqInformation.
        :type all_rat: bool
        """

        self._all_rat = all_rat

    @property
    def freq(self):
        """Gets the freq of this RatFreqInformation.

        Integer value indicating the ARFCN applicable for a downlink, uplink or bi-directional (TDD) NR global frequency raster, as definition of \"ARFCN-ValueNR\" IE in clause 6.3.2 of 3GPP TS 38.331.   # noqa: E501

        :return: The freq of this RatFreqInformation.
        :rtype: int
        """
        return self._freq

    @freq.setter
    def freq(self, freq):
        """Sets the freq of this RatFreqInformation.

        Integer value indicating the ARFCN applicable for a downlink, uplink or bi-directional (TDD) NR global frequency raster, as definition of \"ARFCN-ValueNR\" IE in clause 6.3.2 of 3GPP TS 38.331.   # noqa: E501

        :param freq: The freq of this RatFreqInformation.
        :type freq: int
        """
        if freq is not None and freq > 3279165:  # noqa: E501
            raise ValueError("Invalid value for `freq`, must be a value less than or equal to `3279165`")  # noqa: E501
        if freq is not None and freq < 0:  # noqa: E501
            raise ValueError("Invalid value for `freq`, must be a value greater than or equal to `0`")  # noqa: E501

        self._freq = freq

    @property
    def rat_type(self):
        """Gets the rat_type of this RatFreqInformation.


        :return: The rat_type of this RatFreqInformation.
        :rtype: RatType
        """
        return self._rat_type

    @rat_type.setter
    def rat_type(self, rat_type):
        """Sets the rat_type of this RatFreqInformation.


        :param rat_type: The rat_type of this RatFreqInformation.
        :type rat_type: RatType
        """

        self._rat_type = rat_type

    @property
    def svc_exp_threshold(self):
        """Gets the svc_exp_threshold of this RatFreqInformation.


        :return: The svc_exp_threshold of this RatFreqInformation.
        :rtype: ThresholdLevel
        """
        return self._svc_exp_threshold

    @svc_exp_threshold.setter
    def svc_exp_threshold(self, svc_exp_threshold):
        """Sets the svc_exp_threshold of this RatFreqInformation.


        :param svc_exp_threshold: The svc_exp_threshold of this RatFreqInformation.
        :type svc_exp_threshold: ThresholdLevel
        """

        self._svc_exp_threshold = svc_exp_threshold

    @property
    def matching_dir(self):
        """Gets the matching_dir of this RatFreqInformation.


        :return: The matching_dir of this RatFreqInformation.
        :rtype: MatchingDirection
        """
        return self._matching_dir

    @matching_dir.setter
    def matching_dir(self, matching_dir):
        """Sets the matching_dir of this RatFreqInformation.


        :param matching_dir: The matching_dir of this RatFreqInformation.
        :type matching_dir: MatchingDirection
        """

        self._matching_dir = matching_dir
