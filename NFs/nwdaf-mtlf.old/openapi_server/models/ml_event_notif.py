# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ml_model_addr import MLModelAddr
from openapi_server.models.network_area_info import NetworkAreaInfo
from openapi_server.models.nwdaf_event import NwdafEvent
from openapi_server.models.time_window import TimeWindow
from openapi_server import util

from openapi_server.models.ml_model_addr import MLModelAddr  # noqa: E501
from openapi_server.models.network_area_info import NetworkAreaInfo  # noqa: E501
from openapi_server.models.nwdaf_event import NwdafEvent  # noqa: E501
from openapi_server.models.time_window import TimeWindow  # noqa: E501



class MLEventNotif(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event=None, notif_corre_id=None, m_l_file_addr=None, validity_period=None, spatial_validity=None):  # noqa: E501
        """MLEventNotif - a model defined in OpenAPI

        :param event: The event of this MLEventNotif.  # noqa: E501
        :type event: NwdafEvent
        :param notif_corre_id: The notif_corre_id of this MLEventNotif.  # noqa: E501
        :type notif_corre_id: str
        :param m_l_file_addr: The m_l_file_addr of this MLEventNotif.  # noqa: E501
        :type m_l_file_addr: MLModelAddr
        :param validity_period: The validity_period of this MLEventNotif.  # noqa: E501
        :type validity_period: TimeWindow
        :param spatial_validity: The spatial_validity of this MLEventNotif.  # noqa: E501
        :type spatial_validity: NetworkAreaInfo
        """
        self.openapi_types = {
            'event': NwdafEvent,
            'notif_corre_id': str,
            'm_l_file_addr': MLModelAddr,
            'validity_period': TimeWindow,
            'spatial_validity': NetworkAreaInfo
        }

        self.attribute_map = {
            'event': 'event',
            'notif_corre_id': 'notifCorreId',
            'm_l_file_addr': 'mLFileAddr',
            'validity_period': 'validityPeriod',
            'spatial_validity': 'spatialValidity'
        }

        self.event = event
        self.notif_corre_id = notif_corre_id
        self.m_l_file_addr = m_l_file_addr
        self.validity_period = validity_period
        self.spatial_validity = spatial_validity

    @classmethod
    def from_dict(cls, dikt) -> 'MLEventNotif':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MLEventNotif of this MLEventNotif.  # noqa: E501
        :rtype: MLEventNotif
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this MLEventNotif.


        :return: The event of this MLEventNotif.
        :rtype: NwdafEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this MLEventNotif.


        :param event: The event of this MLEventNotif.
        :type event: NwdafEvent
        """
#        if event is None:
#            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501

        self._event = event

    @property
    def notif_corre_id(self):
        """Gets the notif_corre_id of this MLEventNotif.


        :return: The notif_corre_id of this MLEventNotif.
        :rtype: str
        """
        return self._notif_corre_id

    @notif_corre_id.setter
    def notif_corre_id(self, notif_corre_id):
        """Sets the notif_corre_id of this MLEventNotif.


        :param notif_corre_id: The notif_corre_id of this MLEventNotif.
        :type notif_corre_id: str
        """

        self._notif_corre_id = notif_corre_id

    @property
    def m_l_file_addr(self):
        """Gets the m_l_file_addr of this MLEventNotif.


        :return: The m_l_file_addr of this MLEventNotif.
        :rtype: MLModelAddr
        """
        return self._m_l_file_addr

    @m_l_file_addr.setter
    def m_l_file_addr(self, m_l_file_addr):
        """Sets the m_l_file_addr of this MLEventNotif.


        :param m_l_file_addr: The m_l_file_addr of this MLEventNotif.
        :type m_l_file_addr: MLModelAddr
        """
#        if m_l_file_addr is None:
#            raise ValueError("Invalid value for `m_l_file_addr`, must not be `None`")  # noqa: E501

        self._m_l_file_addr = m_l_file_addr

    @property
    def validity_period(self):
        """Gets the validity_period of this MLEventNotif.


        :return: The validity_period of this MLEventNotif.
        :rtype: TimeWindow
        """
        return self._validity_period

    @validity_period.setter
    def validity_period(self, validity_period):
        """Sets the validity_period of this MLEventNotif.


        :param validity_period: The validity_period of this MLEventNotif.
        :type validity_period: TimeWindow
        """

        self._validity_period = validity_period

    @property
    def spatial_validity(self):
        """Gets the spatial_validity of this MLEventNotif.


        :return: The spatial_validity of this MLEventNotif.
        :rtype: NetworkAreaInfo
        """
        return self._spatial_validity

    @spatial_validity.setter
    def spatial_validity(self, spatial_validity):
        """Sets the spatial_validity of this MLEventNotif.


        :param spatial_validity: The spatial_validity of this MLEventNotif.
        :type spatial_validity: NetworkAreaInfo
        """

        self._spatial_validity = spatial_validity
