# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ExceptionIdAnyOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    UNEXPECTED_UE_LOCATION = "UNEXPECTED_UE_LOCATION"
    UNEXPECTED_LONG_LIVE_FLOW = "UNEXPECTED_LONG_LIVE_FLOW"
    UNEXPECTED_LARGE_RATE_FLOW = "UNEXPECTED_LARGE_RATE_FLOW"
    UNEXPECTED_WAKEUP = "UNEXPECTED_WAKEUP"
    SUSPICION_OF_DDOS_ATTACK = "SUSPICION_OF_DDOS_ATTACK"
    WRONG_DESTINATION_ADDRESS = "WRONG_DESTINATION_ADDRESS"
    TOO_FREQUENT_SERVICE_ACCESS = "TOO_FREQUENT_SERVICE_ACCESS"
    UNEXPECTED_RADIO_LINK_FAILURES = "UNEXPECTED_RADIO_LINK_FAILURES"
    PING_PONG_ACROSS_CELLS = "PING_PONG_ACROSS_CELLS"
    def __init__(self):  # noqa: E501
        """ExceptionIdAnyOf - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt) -> 'ExceptionIdAnyOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExceptionId_anyOf of this ExceptionIdAnyOf.  # noqa: E501
        :rtype: ExceptionIdAnyOf
        """
        return util.deserialize_model(dikt, cls)
