# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.dn_perf_ordering_criterion import DnPerfOrderingCriterion
from openapi_server.models.matching_direction import MatchingDirection
from openapi_server.models.threshold_level import ThresholdLevel
from openapi_server import util

from openapi_server.models.dn_perf_ordering_criterion import DnPerfOrderingCriterion  # noqa: E501
from openapi_server.models.matching_direction import MatchingDirection  # noqa: E501
from openapi_server.models.threshold_level import ThresholdLevel  # noqa: E501

class DnPerformanceReq(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dn_perf_order_criter=None, order=None, report_thresholds=None):  # noqa: E501
        """DnPerformanceReq - a model defined in OpenAPI

        :param dn_perf_order_criter: The dn_perf_order_criter of this DnPerformanceReq.  # noqa: E501
        :type dn_perf_order_criter: DnPerfOrderingCriterion
        :param order: The order of this DnPerformanceReq.  # noqa: E501
        :type order: MatchingDirection
        :param report_thresholds: The report_thresholds of this DnPerformanceReq.  # noqa: E501
        :type report_thresholds: List[ThresholdLevel]
        """
        self.openapi_types = {
            'dn_perf_order_criter': DnPerfOrderingCriterion,
            'order': MatchingDirection,
            'report_thresholds': List[ThresholdLevel]
        }

        self.attribute_map = {
            'dn_perf_order_criter': 'dnPerfOrderCriter',
            'order': 'order',
            'report_thresholds': 'reportThresholds'
        }

        self.dn_perf_order_criter = dn_perf_order_criter
        self.order = order
        self.report_thresholds = report_thresholds

    @classmethod
    def from_dict(cls, dikt) -> 'DnPerformanceReq':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DnPerformanceReq of this DnPerformanceReq.  # noqa: E501
        :rtype: DnPerformanceReq
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dn_perf_order_criter(self):
        """Gets the dn_perf_order_criter of this DnPerformanceReq.


        :return: The dn_perf_order_criter of this DnPerformanceReq.
        :rtype: DnPerfOrderingCriterion
        """
        return self._dn_perf_order_criter

    @dn_perf_order_criter.setter
    def dn_perf_order_criter(self, dn_perf_order_criter):
        """Sets the dn_perf_order_criter of this DnPerformanceReq.


        :param dn_perf_order_criter: The dn_perf_order_criter of this DnPerformanceReq.
        :type dn_perf_order_criter: DnPerfOrderingCriterion
        """

        self._dn_perf_order_criter = dn_perf_order_criter

    @property
    def order(self):
        """Gets the order of this DnPerformanceReq.


        :return: The order of this DnPerformanceReq.
        :rtype: MatchingDirection
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this DnPerformanceReq.


        :param order: The order of this DnPerformanceReq.
        :type order: MatchingDirection
        """

        self._order = order

    @property
    def report_thresholds(self):
        """Gets the report_thresholds of this DnPerformanceReq.


        :return: The report_thresholds of this DnPerformanceReq.
        :rtype: List[ThresholdLevel]
        """
        return self._report_thresholds

    @report_thresholds.setter
    def report_thresholds(self, report_thresholds):
        """Sets the report_thresholds of this DnPerformanceReq.


        :param report_thresholds: The report_thresholds of this DnPerformanceReq.
        :type report_thresholds: List[ThresholdLevel]
        """
        if report_thresholds is not None and len(report_thresholds) < 1:
            raise ValueError("Invalid value for `report_thresholds`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._report_thresholds = report_thresholds
