# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.class_criterion import ClassCriterion
from openapi_server.models.dispersion_ordering_criterion import DispersionOrderingCriterion
from openapi_server.models.dispersion_type import DispersionType
from openapi_server.models.matching_direction import MatchingDirection
from openapi_server.models.ranking_criterion import RankingCriterion
from openapi_server import util

from openapi_server.models.class_criterion import ClassCriterion  # noqa: E501
from openapi_server.models.dispersion_ordering_criterion import DispersionOrderingCriterion  # noqa: E501
from openapi_server.models.dispersion_type import DispersionType  # noqa: E501
from openapi_server.models.matching_direction import MatchingDirection  # noqa: E501
from openapi_server.models.ranking_criterion import RankingCriterion  # noqa: E501

class DispersionRequirement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disper_type=None, class_criters=None, rank_criters=None, disp_order_criter=None, order=None):  # noqa: E501
        """DispersionRequirement - a model defined in OpenAPI

        :param disper_type: The disper_type of this DispersionRequirement.  # noqa: E501
        :type disper_type: DispersionType
        :param class_criters: The class_criters of this DispersionRequirement.  # noqa: E501
        :type class_criters: List[ClassCriterion]
        :param rank_criters: The rank_criters of this DispersionRequirement.  # noqa: E501
        :type rank_criters: List[RankingCriterion]
        :param disp_order_criter: The disp_order_criter of this DispersionRequirement.  # noqa: E501
        :type disp_order_criter: DispersionOrderingCriterion
        :param order: The order of this DispersionRequirement.  # noqa: E501
        :type order: MatchingDirection
        """
        self.openapi_types = {
            'disper_type': DispersionType,
            'class_criters': List[ClassCriterion],
            'rank_criters': List[RankingCriterion],
            'disp_order_criter': DispersionOrderingCriterion,
            'order': MatchingDirection
        }

        self.attribute_map = {
            'disper_type': 'disperType',
            'class_criters': 'classCriters',
            'rank_criters': 'rankCriters',
            'disp_order_criter': 'dispOrderCriter',
            'order': 'order'
        }

        self.disper_type = disper_type
        self.class_criters = class_criters
        self.rank_criters = rank_criters
        self.disp_order_criter = disp_order_criter
        self.order = order

    @classmethod
    def from_dict(cls, dikt) -> 'DispersionRequirement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DispersionRequirement of this DispersionRequirement.  # noqa: E501
        :rtype: DispersionRequirement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disper_type(self):
        """Gets the disper_type of this DispersionRequirement.


        :return: The disper_type of this DispersionRequirement.
        :rtype: DispersionType
        """
        return self._disper_type

    @disper_type.setter
    def disper_type(self, disper_type):
        """Sets the disper_type of this DispersionRequirement.


        :param disper_type: The disper_type of this DispersionRequirement.
        :type disper_type: DispersionType
        """
        if disper_type is None:
            raise ValueError("Invalid value for `disper_type`, must not be `None`")  # noqa: E501

        self._disper_type = disper_type

    @property
    def class_criters(self):
        """Gets the class_criters of this DispersionRequirement.


        :return: The class_criters of this DispersionRequirement.
        :rtype: List[ClassCriterion]
        """
        return self._class_criters

    @class_criters.setter
    def class_criters(self, class_criters):
        """Sets the class_criters of this DispersionRequirement.


        :param class_criters: The class_criters of this DispersionRequirement.
        :type class_criters: List[ClassCriterion]
        """
        if class_criters is not None and len(class_criters) < 1:
            raise ValueError("Invalid value for `class_criters`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._class_criters = class_criters

    @property
    def rank_criters(self):
        """Gets the rank_criters of this DispersionRequirement.


        :return: The rank_criters of this DispersionRequirement.
        :rtype: List[RankingCriterion]
        """
        return self._rank_criters

    @rank_criters.setter
    def rank_criters(self, rank_criters):
        """Sets the rank_criters of this DispersionRequirement.


        :param rank_criters: The rank_criters of this DispersionRequirement.
        :type rank_criters: List[RankingCriterion]
        """
        if rank_criters is not None and len(rank_criters) < 1:
            raise ValueError("Invalid value for `rank_criters`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._rank_criters = rank_criters

    @property
    def disp_order_criter(self):
        """Gets the disp_order_criter of this DispersionRequirement.


        :return: The disp_order_criter of this DispersionRequirement.
        :rtype: DispersionOrderingCriterion
        """
        return self._disp_order_criter

    @disp_order_criter.setter
    def disp_order_criter(self, disp_order_criter):
        """Sets the disp_order_criter of this DispersionRequirement.


        :param disp_order_criter: The disp_order_criter of this DispersionRequirement.
        :type disp_order_criter: DispersionOrderingCriterion
        """

        self._disp_order_criter = disp_order_criter

    @property
    def order(self):
        """Gets the order of this DispersionRequirement.


        :return: The order of this DispersionRequirement.
        :rtype: MatchingDirection
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this DispersionRequirement.


        :param order: The order of this DispersionRequirement.
        :type order: MatchingDirection
        """

        self._order = order
