# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.qos_resource_type import QosResourceType
import re
from openapi_server import util

from openapi_server.models.qos_resource_type import QosResourceType  # noqa: E501
import re  # noqa: E501

class QosRequirement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _5qi=None, gfbr_ul=None, gfbr_dl=None, res_type=None, pdb=None, per=None):  # noqa: E501
        """QosRequirement - a model defined in OpenAPI

        :param _5qi: The _5qi of this QosRequirement.  # noqa: E501
        :type _5qi: int
        :param gfbr_ul: The gfbr_ul of this QosRequirement.  # noqa: E501
        :type gfbr_ul: str
        :param gfbr_dl: The gfbr_dl of this QosRequirement.  # noqa: E501
        :type gfbr_dl: str
        :param res_type: The res_type of this QosRequirement.  # noqa: E501
        :type res_type: QosResourceType
        :param pdb: The pdb of this QosRequirement.  # noqa: E501
        :type pdb: int
        :param per: The per of this QosRequirement.  # noqa: E501
        :type per: str
        """
        self.openapi_types = {
            '_5qi': int,
            'gfbr_ul': str,
            'gfbr_dl': str,
            'res_type': QosResourceType,
            'pdb': int,
            'per': str
        }

        self.attribute_map = {
            '_5qi': '5qi',
            'gfbr_ul': 'gfbrUl',
            'gfbr_dl': 'gfbrDl',
            'res_type': 'resType',
            'pdb': 'pdb',
            'per': 'per'
        }

        self._5qi = _5qi
        self.gfbr_ul = gfbr_ul
        self.gfbr_dl = gfbr_dl
        self.res_type = res_type
        self.pdb = pdb
        self.per = per

    @classmethod
    def from_dict(cls, dikt) -> 'QosRequirement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QosRequirement of this QosRequirement.  # noqa: E501
        :rtype: QosRequirement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _5qi(self):
        """Gets the _5qi of this QosRequirement.

        Unsigned integer representing a 5G QoS Identifier (see clause 5.7.2.1 of 3GPP TS 23.501, within the range 0 to 255.   # noqa: E501

        :return: The _5qi of this QosRequirement.
        :rtype: int
        """
        return self.__5qi

    @_5qi.setter
    def _5qi(self, _5qi):
        """Sets the _5qi of this QosRequirement.

        Unsigned integer representing a 5G QoS Identifier (see clause 5.7.2.1 of 3GPP TS 23.501, within the range 0 to 255.   # noqa: E501

        :param _5qi: The _5qi of this QosRequirement.
        :type _5qi: int
        """
        if _5qi is not None and _5qi > 255:  # noqa: E501
            raise ValueError("Invalid value for `_5qi`, must be a value less than or equal to `255`")  # noqa: E501
        if _5qi is not None and _5qi < 0:  # noqa: E501
            raise ValueError("Invalid value for `_5qi`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__5qi = _5qi

    @property
    def gfbr_ul(self):
        """Gets the gfbr_ul of this QosRequirement.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :return: The gfbr_ul of this QosRequirement.
        :rtype: str
        """
        return self._gfbr_ul

    @gfbr_ul.setter
    def gfbr_ul(self, gfbr_ul):
        """Sets the gfbr_ul of this QosRequirement.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :param gfbr_ul: The gfbr_ul of this QosRequirement.
        :type gfbr_ul: str
        """
        if gfbr_ul is not None and not re.search(r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$', gfbr_ul):  # noqa: E501
            raise ValueError("Invalid value for `gfbr_ul`, must be a follow pattern or equal to `/^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/`")  # noqa: E501

        self._gfbr_ul = gfbr_ul

    @property
    def gfbr_dl(self):
        """Gets the gfbr_dl of this QosRequirement.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :return: The gfbr_dl of this QosRequirement.
        :rtype: str
        """
        return self._gfbr_dl

    @gfbr_dl.setter
    def gfbr_dl(self, gfbr_dl):
        """Sets the gfbr_dl of this QosRequirement.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :param gfbr_dl: The gfbr_dl of this QosRequirement.
        :type gfbr_dl: str
        """
        if gfbr_dl is not None and not re.search(r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$', gfbr_dl):  # noqa: E501
            raise ValueError("Invalid value for `gfbr_dl`, must be a follow pattern or equal to `/^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/`")  # noqa: E501

        self._gfbr_dl = gfbr_dl

    @property
    def res_type(self):
        """Gets the res_type of this QosRequirement.


        :return: The res_type of this QosRequirement.
        :rtype: QosResourceType
        """
        return self._res_type

    @res_type.setter
    def res_type(self, res_type):
        """Sets the res_type of this QosRequirement.


        :param res_type: The res_type of this QosRequirement.
        :type res_type: QosResourceType
        """

        self._res_type = res_type

    @property
    def pdb(self):
        """Gets the pdb of this QosRequirement.

        Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds.   # noqa: E501

        :return: The pdb of this QosRequirement.
        :rtype: int
        """
        return self._pdb

    @pdb.setter
    def pdb(self, pdb):
        """Sets the pdb of this QosRequirement.

        Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds.   # noqa: E501

        :param pdb: The pdb of this QosRequirement.
        :type pdb: int
        """
        if pdb is not None and pdb < 1:  # noqa: E501
            raise ValueError("Invalid value for `pdb`, must be a value greater than or equal to `1`")  # noqa: E501

        self._pdb = pdb

    @property
    def per(self):
        """Gets the per of this QosRequirement.

        String representing Packet Error Rate (see clause 5.7.3.5 and 5.7.4 of 3GPP TS 23.501, expressed as a \"scalar x 10-k\" where the scalar and the exponent k are each encoded as one decimal digit.   # noqa: E501

        :return: The per of this QosRequirement.
        :rtype: str
        """
        return self._per

    @per.setter
    def per(self, per):
        """Sets the per of this QosRequirement.

        String representing Packet Error Rate (see clause 5.7.3.5 and 5.7.4 of 3GPP TS 23.501, expressed as a \"scalar x 10-k\" where the scalar and the exponent k are each encoded as one decimal digit.   # noqa: E501

        :param per: The per of this QosRequirement.
        :type per: str
        """
        if per is not None and not re.search(r'^([0-9]E-[0-9])$', per):  # noqa: E501
            raise ValueError("Invalid value for `per`, must be a follow pattern or equal to `/^([0-9]E-[0-9])$/`")  # noqa: E501

        self._per = per
