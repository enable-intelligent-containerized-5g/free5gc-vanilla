# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.snssai import Snssai
from openapi_server import util

from openapi_server.models.snssai import Snssai  # noqa: E501

class NsiIdInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, snssai=None, nsi_ids=None):  # noqa: E501
        """NsiIdInfo - a model defined in OpenAPI

        :param snssai: The snssai of this NsiIdInfo.  # noqa: E501
        :type snssai: Snssai
        :param nsi_ids: The nsi_ids of this NsiIdInfo.  # noqa: E501
        :type nsi_ids: List[str]
        """
        self.openapi_types = {
            'snssai': Snssai,
            'nsi_ids': List[str]
        }

        self.attribute_map = {
            'snssai': 'snssai',
            'nsi_ids': 'nsiIds'
        }

        self.snssai = snssai
        self.nsi_ids = nsi_ids

    @classmethod
    def from_dict(cls, dikt) -> 'NsiIdInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NsiIdInfo of this NsiIdInfo.  # noqa: E501
        :rtype: NsiIdInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def snssai(self):
        """Gets the snssai of this NsiIdInfo.


        :return: The snssai of this NsiIdInfo.
        :rtype: Snssai
        """
        return self._snssai

    @snssai.setter
    def snssai(self, snssai):
        """Sets the snssai of this NsiIdInfo.


        :param snssai: The snssai of this NsiIdInfo.
        :type snssai: Snssai
        """
        if snssai is None:
            raise ValueError("Invalid value for `snssai`, must not be `None`")  # noqa: E501

        self._snssai = snssai

    @property
    def nsi_ids(self):
        """Gets the nsi_ids of this NsiIdInfo.


        :return: The nsi_ids of this NsiIdInfo.
        :rtype: List[str]
        """
        return self._nsi_ids

    @nsi_ids.setter
    def nsi_ids(self, nsi_ids):
        """Sets the nsi_ids of this NsiIdInfo.


        :param nsi_ids: The nsi_ids of this NsiIdInfo.
        :type nsi_ids: List[str]
        """
        if nsi_ids is not None and len(nsi_ids) < 1:
            raise ValueError("Invalid value for `nsi_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nsi_ids = nsi_ids
